<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="LiveAPI.xsl"?><LiveAPI compare="added changed common" version="8.2.7-9.0.6"><Doc type="Description">Unofficial Live API documentation generated by the “API_MakeDoc” MIDI Remote Script.</Doc><Doc type="Description">This is unofficial documentation. Please do not contact Ableton with questions or problems relating to the use of this documentation.</Doc><Module compare="added changed common" name="Live"><Module compare="added changed common" name="Application"><Class compare="added changed common" name="Application"><Doc type="Description">This class represents the Live application.</Doc><Class compare="added changed common" name="View"><Doc type="Description">This class represents the view aspects of the Live application.</Doc><Sub-Class compare="common" name="NavDirection"><Value compare="common" name="down" /><Value compare="common" name="left" /><Value compare="common" name="right" /><Value compare="common" name="up" /></Sub-Class><Method compare="changed common" name="available_main_views()"><Doc compare="deleted changed" type="Format">available_main_views( (View)arg1) → tuple</Doc><Doc compare="added changed" type="Format">available_main_views( (View)arg1) → StringVector</Doc><Doc compare="deleted changed" type="Cpp-Signature">class boost::python::tuple available_main_views(class TPyViewData&lt;class ASongApp&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">std::vector&lt;TString, std::allocator&lt;TString&gt; &gt; available_main_views(TPyViewData&lt;ASongApp&gt;)</Doc><Doc type="Description">Return a list of strings with the available subcomponent views, which is to be specified, when using the rest of this classes functions. A ‘subcomponent view’ is a main view component of a document view, like the Session view, the Arranger or Detailview and so on… </Doc></Method><Property compare="added" name="browse_mode"><Doc type="Description">Return true if HotSwap mode is active for any target.</Doc></Property><Method compare="added" name="add_browse_mode_listener()"><Doc type="Format">add_browse_mode_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_browse_mode_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “browse_mode” has changed. </Doc></Method><Method compare="added" name="browse_mode_has_listener()"><Doc type="Format">browse_mode_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool browse_mode_has_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “browse_mode”. </Doc></Method><Method compare="added" name="remove_browse_mode_listener()"><Doc type="Format">remove_browse_mode_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_browse_mode_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “browse_mode”. </Doc></Method><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the application view.</Doc></Property><Method compare="common" name="focus_view()"><Doc type="Format">focus_view( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void focus_view(class TPyViewData&lt;class ASongApp&gt;, class TString)</Doc><Doc compare="added changed" type="Cpp-Signature">void focus_view(TPyViewData&lt;ASongApp&gt;, TString)</Doc><Doc type="Description">Show and focus one through the identifier string specified view. </Doc></Method><Method compare="common" name="hide_view()"><Doc type="Format">hide_view( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void hide_view(class TPyViewData&lt;class ASongApp&gt;, class TString)</Doc><Doc compare="added changed" type="Cpp-Signature">void hide_view(TPyViewData&lt;ASongApp&gt;, TString)</Doc><Doc type="Description">Hide one through the identifier string specified view. </Doc></Method><Method compare="common" name="is_view_visible()"><Doc type="Format">is_view_visible( (View)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool is_view_visible(class TPyViewData&lt;class ASongApp&gt;, class TString)</Doc><Doc compare="added changed" type="Cpp-Signature">bool is_view_visible(TPyViewData&lt;ASongApp&gt;, TString)</Doc><Doc type="Description">Return true if the through the identifier string specified view is currently visible. </Doc></Method><Method compare="common" name="add_is_view_visible_listener()"><Doc type="Format">add_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_is_view_visible_listener(class TPyViewData&lt;class ASongApp&gt;, class TString, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_is_view_visible_listener(TPyViewData&lt;ASongApp&gt;, TString, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_view_visible” has changed. </Doc></Method><Method compare="common" name="is_view_visible_has_listener()"><Doc type="Format">is_view_visible_has_listener( (View)arg1, (object)arg2, (object)arg3) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool is_view_visible_has_listener(class TPyViewData&lt;class ASongApp&gt;, class TString, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool is_view_visible_has_listener(TPyViewData&lt;ASongApp&gt;, TString, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_view_visible”. </Doc></Method><Method compare="common" name="remove_is_view_visible_listener()"><Doc type="Format">remove_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_is_view_visible_listener(class TPyViewData&lt;class ASongApp&gt;, class TString, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_is_view_visible_listener(TPyViewData&lt;ASongApp&gt;, TString, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_view_visible”. </Doc></Method><Method compare="common" name="scroll_view()"><Doc type="Format">scroll_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void scroll_view(class TPyViewData&lt;class ASongApp&gt;, long, class TString, bool)</Doc><Doc compare="added changed" type="Cpp-Signature">void scroll_view(TPyViewData&lt;ASongApp&gt;, int, TString, bool)</Doc><Doc type="Description">Scroll through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. </Doc></Method><Method compare="changed common" name="show_view()"><Doc type="Format">show_view( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void show_view(class TPyViewData&lt;class ASongApp&gt;, class TString)</Doc><Doc compare="added changed" type="Cpp-Signature">void show_view(TPyViewData&lt;ASongApp&gt;, TString)</Doc><Doc compare="deleted changed" type="Description">Show one through the identifier string specified view. </Doc><Doc compare="added changed" type="Description">Show one through the identifier string specified view. Will throw a runtime error if this is called in Live’s initialization scope. </Doc></Method><Method compare="added" name="toggle_browse()"><Doc type="Format">toggle_browse( (View)arg1) → None</Doc><Doc type="Cpp-Signature">void toggle_browse(TPyViewData&lt;ASongApp&gt;)</Doc><Doc type="Description">Reveals the device chain, the browser and starts hot swap for the selected device. Calling this function again stops hot swap. </Doc></Method><Method compare="common" name="add_view_focus_changed_listener()"><Doc type="Format">add_view_focus_changed_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_view_focus_changed_listener(class TPyViewData&lt;class ASongApp&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_view_focus_changed_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “view_focus_changed” has changed. </Doc></Method><Method compare="common" name="remove_view_focus_changed_listener()"><Doc type="Format">remove_view_focus_changed_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_view_focus_changed_listener(class TPyViewData&lt;class ASongApp&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_view_focus_changed_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “view_focus_changed”. </Doc></Method><Method compare="common" name="view_focus_changed_has_listener()"><Doc type="Format">view_focus_changed_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool view_focus_changed_has_listener(class TPyViewData&lt;class ASongApp&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool view_focus_changed_has_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “view_focus_changed”. </Doc></Method><Method compare="common" name="zoom_view()"><Doc type="Format">zoom_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void zoom_view(class TPyViewData&lt;class ASongApp&gt;, long, class TString, bool)</Doc><Doc compare="added changed" type="Cpp-Signature">void zoom_view(TPyViewData&lt;ASongApp&gt;, int, TString, bool)</Doc><Doc type="Description">Zoom through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. </Doc></Method></Class><Property compare="added" name="browser"><Doc type="Description">Returns an interface to the browser.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Returns the canonical parent of the application.</Doc></Property><Property compare="added" name="current_dialog_button_count"><Doc type="Description">Number of buttons on the current dialog.</Doc></Property><Property compare="added" name="current_dialog_message"><Doc type="Description">Text of the last dialog that appeared; Empty if all dialogs just disappeared.</Doc></Property><Method compare="common" name="get_bugfix_version()"><Doc type="Format">get_bugfix_version( (Application)arg1) → int</Doc><Doc compare="deleted changed" type="Cpp-Signature">long get_bugfix_version(class TPyHandle&lt;class ASongApp&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">int get_bugfix_version(TPyHandle&lt;ASongApp&gt;)</Doc><Doc type="Description">Returns an integer representing the bugfix version of Live. </Doc></Method><Method compare="common" name="get_document()"><Doc type="Format">get_document( (Application)arg1) → Song</Doc><Doc compare="deleted changed" type="Cpp-Signature">class TWeakPtr&lt;class TPyHandle&lt;class ASong&gt; &gt; get_document(class TPyHandle&lt;class ASongApp&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">TWeakPtr&lt;TPyHandle&lt;ASong&gt; &gt; get_document(TPyHandle&lt;ASongApp&gt;)</Doc><Doc type="Description">Returns the current Live Set. </Doc></Method><Method compare="common" name="get_major_version()"><Doc type="Format">get_major_version( (Application)arg1) → int</Doc><Doc compare="deleted changed" type="Cpp-Signature">long get_major_version(class TPyHandle&lt;class ASongApp&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">int get_major_version(TPyHandle&lt;ASongApp&gt;)</Doc><Doc type="Description">Returns an integer representing the major version of Live. </Doc></Method><Method compare="common" name="get_minor_version()"><Doc type="Format">get_minor_version( (Application)arg1) → int</Doc><Doc compare="deleted changed" type="Cpp-Signature">long get_minor_version(class TPyHandle&lt;class ASongApp&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">int get_minor_version(TPyHandle&lt;ASongApp&gt;)</Doc><Doc type="Description">Returns an integer representing the minor version of Live. </Doc></Method><Property compare="added" name="open_dialog_count"><Doc type="Description">The number of open dialogs in Live. 0 if not dialog is open.</Doc></Property><Method compare="added" name="add_open_dialog_count_listener()"><Doc type="Format">add_open_dialog_count_listener( (Application)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_open_dialog_count_listener(TPyHandle&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “open_dialog_count” has changed. </Doc></Method><Method compare="added" name="open_dialog_count_has_listener()"><Doc type="Format">open_dialog_count_has_listener( (Application)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool open_dialog_count_has_listener(TPyHandle&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “open_dialog_count”. </Doc></Method><Method compare="added" name="remove_open_dialog_count_listener()"><Doc type="Format">remove_open_dialog_count_listener( (Application)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_open_dialog_count_listener(TPyHandle&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “open_dialog_count”. </Doc></Method><Method compare="added" name="press_current_dialog_button()"><Doc type="Format">press_current_dialog_button( (Application)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void press_current_dialog_button(TPyHandle&lt;ASongApp&gt;, int)</Doc><Doc type="Description">Press a button, by index, on the current message box. </Doc></Method><Property compare="common" name="view"><Doc type="Description">Returns the applications view component.</Doc></Property></Class><Built-In compare="common" name="combine_apcs()"><Doc type="Format">combine_apcs() → bool</Doc><Doc type="Cpp-Signature">bool combine_apcs()</Doc><Doc type="Description">Returns true if multiple APCs should be combined. </Doc></Built-In><Built-In compare="changed common" name="encrypt_challenge()"><Doc compare="deleted changed" type="Format">encrypt_challenge( (int)arg1, (int)arg2) → tuple</Doc><Doc compare="added changed" type="Format">encrypt_challenge( (int)dongle1, (int)dongle2 [, (int)key_index=0]) → tuple</Doc><Doc compare="deleted changed" type="Cpp-Signature">class boost::python::tuple encrypt_challenge(long, long)</Doc><Doc compare="added changed" type="Cpp-Signature">boost::python::tuple encrypt_challenge(int, int [, int=0])</Doc><Doc type="Description">Returns an encrypted challenge based on the TEA algortithm </Doc></Built-In><Built-In compare="common" name="encrypt_challenge2()"><Doc type="Format">encrypt_challenge2( (int)arg1) → int</Doc><Doc compare="deleted changed" type="Cpp-Signature">long encrypt_challenge2(long)</Doc><Doc compare="added changed" type="Cpp-Signature">int encrypt_challenge2(int)</Doc><Doc type="Description">Returns the UMAC hash for the given challenge. </Doc></Built-In><Built-In compare="common" name="get_application()"><Doc type="Format">get_application() → Application</Doc><Doc compare="deleted changed" type="Cpp-Signature">class TWeakPtr&lt;class TPyHandle&lt;class ASongApp&gt; &gt; get_application()</Doc><Doc compare="added changed" type="Cpp-Signature">TWeakPtr&lt;TPyHandle&lt;ASongApp&gt; &gt; get_application()</Doc><Doc type="Description">Returns the application instance. </Doc></Built-In><Built-In compare="common" name="get_random_int()"><Doc type="Format">get_random_int( (int)arg1, (int)arg2) → int</Doc><Doc compare="deleted changed" type="Cpp-Signature">long get_random_int(long, long)</Doc><Doc compare="added changed" type="Cpp-Signature">int get_random_int(int, int)</Doc><Doc type="Description">Returns a random integer from the given range. </Doc></Built-In></Module><Module compare="added" name="Base"><Class name="IntVector"><Doc type="Description">A simple container for returning integers from Live.</Doc><Method name="append()"><Doc type="Format">append( (IntVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::vector&lt;int, std::allocator&lt;int&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method name="extend()"><Doc type="Format">extend( (IntVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::vector&lt;int, std::allocator&lt;int&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class><Class name="LimitationError" /><Class name="StringVector"><Doc type="Description">A simple container for returning strings from Live.</Doc><Method name="append()"><Doc type="Format">append( (StringVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::vector&lt;TString, std::allocator&lt;TString&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method name="extend()"><Doc type="Format">extend( (StringVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::vector&lt;TString, std::allocator&lt;TString&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class><Class name="Vector"><Doc type="Description">A simple read only container for returning objects from Live.</Doc><Method name="append()"><Doc type="Format">append( (Vector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method name="extend()"><Doc type="Format">extend( (Vector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class></Module><Module compare="added" name="Browser"><Class name="Browser"><Doc type="Description">This class represents the live browser data base.</Doc><Property name="filter_type"><Doc type="Description">Bang triggered when the hotswap target has changed.</Doc></Property><Method name="add_filter_type_listener()"><Doc type="Format">add_filter_type_listener( (Browser)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_filter_type_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “filter_type” has changed. </Doc></Method><Method name="filter_type_has_listener()"><Doc type="Format">filter_type_has_listener( (Browser)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool filter_type_has_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “filter_type”. </Doc></Method><Method name="remove_filter_type_listener()"><Doc type="Format">remove_filter_type_listener( (Browser)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_filter_type_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “filter_type”. </Doc></Method><Method name="add_full_refresh_listener()"><Doc type="Format">add_full_refresh_listener( (Browser)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_full_refresh_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “full_refresh” has changed. </Doc></Method><Method name="full_refresh_has_listener()"><Doc type="Format">full_refresh_has_listener( (Browser)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool full_refresh_has_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “full_refresh”. </Doc></Method><Method name="remove_full_refresh_listener()"><Doc type="Format">remove_full_refresh_listener( (Browser)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_full_refresh_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “full_refresh”. </Doc></Method><Property name="hotswap_target"><Doc type="Description">Bang triggered when the hotswap target has changed.</Doc></Property><Method name="add_hotswap_target_listener()"><Doc type="Format">add_hotswap_target_listener( (Browser)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_hotswap_target_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “hotswap_target” has changed. </Doc></Method><Method name="hotswap_target_has_listener()"><Doc type="Format">hotswap_target_has_listener( (Browser)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool hotswap_target_has_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “hotswap_target”. </Doc></Method><Method name="remove_hotswap_target_listener()"><Doc type="Format">remove_hotswap_target_listener( (Browser)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_hotswap_target_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “hotswap_target”. </Doc></Method><Method name="load_item()"><Doc type="Format">load_item( (Browser)arg1, (BrowserItem)arg2) → None</Doc><Doc type="Cpp-Signature">void load_item(TPyHandle&lt;ABrowserDelegate&gt;, NPythonBrowser::TPythonBrowserItem)</Doc><Doc type="Description">Loads the provided browser item. </Doc></Method><Property name="packs"><Doc type="Description">Const access to the list of packs of the browser.</Doc></Property><Property name="places"><Doc type="Description">Const access to the list of places of the browser.</Doc></Property><Property name="tags"><Doc type="Description">Const access to the list of tags of the browser.</Doc></Property></Class><Class name="BrowserItem"><Doc type="Description">This class represents an item of the browser hierarchy.</Doc><Property name="children"><Doc type="Description">Const access to the descendants of this browser item.</Doc></Property><Property name="is_device"><Doc type="Description">Indicates if the browser item represents a device.</Doc></Property><Property name="is_folder"><Doc type="Description">Indicates if the browser item represents folder.</Doc></Property><Property name="is_loadable"><Doc type="Description">True if item can be loaded via the Browser’s ‘load_item’ method.</Doc></Property><Property name="is_selected"><Doc type="Description">True if the item is ancestor of or the actual selection.</Doc></Property><Property name="name"><Doc type="Description">Const access to the canonical display name of this browser item.</Doc></Property><Property name="source"><Doc type="Description">Specifies where does item come from — i.e. Live pack, user library…</Doc></Property></Class><Class name="BrowserItemVector"><Doc type="Description">A container for returning browser items from Live.</Doc><Method name="append()"><Doc type="Format">append( (BrowserItemVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::vector&lt;NPythonBrowser::TPythonBrowserItem, std::allocator&lt;NPythonBrowser::TPythonBrowserItem&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method name="extend()"><Doc type="Format">extend( (BrowserItemVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::vector&lt;NPythonBrowser::TPythonBrowserItem, std::allocator&lt;NPythonBrowser::TPythonBrowserItem&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class><Class name="FilterType"><Value name="audio_effect_hotswap" /><Value name="count" /><Value name="disabled" /><Value name="drum_pad_hotswap" /><Value name="hotswap_off" /><Value name="instrument_hotswap" /><Value name="midi_effect_hotswap" /></Class></Module><Module compare="added common" name="Chain"><Class compare="added common" name="Chain"><Doc type="Description">This class represents a group device chain in Live.</Doc><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the chain.</Doc></Property><Method compare="added" name="delete_device()"><Doc type="Format">delete_device( (Chain)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void delete_device(TChainPyHandle, int)</Doc><Doc type="Description">Remove a device identified by its index from the chain. Throws runtime error if bad index.  </Doc></Method><Property compare="common" name="devices"><Doc type="Description">Return const access to all available Devices that are present in the chains</Doc></Property><Method compare="common" name="add_devices_listener()"><Doc type="Format">add_devices_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_devices_listener(class TChainPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_devices_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “devices” has changed. </Doc></Method><Method compare="common" name="devices_has_listener()"><Doc type="Format">devices_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool devices_has_listener(class TChainPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool devices_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “devices”. </Doc></Method><Method compare="common" name="remove_devices_listener()"><Doc type="Format">remove_devices_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_devices_listener(class TChainPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_devices_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “devices”. </Doc></Method><Property compare="added" name="has_audio_input"><Doc type="Description">return True, if this Chain can be feed with an Audio signal. This istrue for all Audio Chains.</Doc></Property><Property compare="added" name="has_audio_output"><Doc type="Description">return True, if this Chain sends out an Audio signal. This istrue for all Audio Chains, and MIDI chains with an Instrument.</Doc></Property><Property compare="added" name="has_midi_input"><Doc type="Description">return True, if this Chain can be feed with an Audio signal. This istrue for all MIDI Chains.</Doc></Property><Property compare="added" name="has_midi_output"><Doc type="Description">return True, if this Chain sends out MIDI events. This istrue for all MIDI Chains with no Instruments.</Doc></Property><Property compare="common" name="mixer_device"><Doc type="Description">Return access to the mixer device that holds the chain’s mixer parameters:the Volume, Pan, and Sendamounts.</Doc></Property><Property compare="common" name="mute"><Doc type="Description">Mute/unmute the chain.</Doc></Property><Method compare="common" name="add_mute_listener()"><Doc type="Format">add_mute_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_mute_listener(class TChainPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_mute_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “mute” has changed. </Doc></Method><Method compare="common" name="mute_has_listener()"><Doc type="Format">mute_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool mute_has_listener(class TChainPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool mute_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “mute”. </Doc></Method><Method compare="common" name="remove_mute_listener()"><Doc type="Format">remove_mute_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_mute_listener(class TChainPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_mute_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “mute”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Read/write access to the name of the Chain, as visible in the track header.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_name_listener(class TChainPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_name_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool name_has_listener(class TChainPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool name_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_name_listener(class TChainPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_name_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="solo"><Doc type="Description">Get/Set the solo status of the chain. Note that this will not disable thesolo state of any other Chain in the same rack. If you want exclusive solo, you have to disable the solo state of the other Chains manually.</Doc></Property><Method compare="common" name="add_solo_listener()"><Doc type="Format">add_solo_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_solo_listener(class TChainPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_solo_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “solo” has changed. </Doc></Method><Method compare="common" name="remove_solo_listener()"><Doc type="Format">remove_solo_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_solo_listener(class TChainPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_solo_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “solo”. </Doc></Method><Method compare="common" name="solo_has_listener()"><Doc type="Format">solo_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool solo_has_listener(class TChainPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool solo_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “solo”. </Doc></Method></Class></Module><Module compare="added changed common" name="Clip"><Class compare="added changed common" name="Clip"><Doc type="Description">This class represents a Clip in Live. It can be either an AudioClip or a MIDI Clip, in an Arrangement or the Session, dependingon the Track (Slot) it lives in.</Doc><Class compare="added" name="View"><Doc type="Description">Representing the view aspects of a Clip.</Doc><Property name="canonical_parent"><Doc type="Description">Get the canonical parent of the clip view.</Doc></Property><Property name="grid_is_triplet"><Doc type="Description">Get/set wether the grid is showing in triplet mode.</Doc></Property><Property name="grid_quantization"><Doc type="Description">Get/set clip grid quantization resolution.</Doc></Property><Method name="show_loop()"><Doc type="Format">show_loop( (View)arg1) → None</Doc><Doc type="Cpp-Signature">void show_loop(TPyViewData&lt;AClip&gt;)</Doc><Doc type="Description">Show the entire loop in the detail view. </Doc></Method></Class><Property compare="added" name="available_warp_modes"><Doc type="Description">Avalibale for AudioClips only.Get/Set the available warp modes, that can be used.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the Clip.</Doc></Property><Method compare="added" name="clear_all_envelopes()"><Doc type="Format">clear_all_envelopes( (Clip)arg1) → None</Doc><Doc type="Cpp-Signature">void clear_all_envelopes(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Clears all envelopes for this clip. </Doc></Method><Method compare="added" name="clear_envelope()"><Doc type="Format">clear_envelope( (Clip)arg1, (DeviceParameter)arg2) → None</Doc><Doc type="Cpp-Signature">void clear_envelope(TPyHandle&lt;AClip&gt;, TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description">Clears the envelope of this clips given parameter. </Doc></Method><Property compare="common" name="color"><Doc type="Description">Get/set access to the color of the Clip (RGB).</Doc></Property><Method compare="common" name="add_color_listener()"><Doc type="Format">add_color_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_color_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_color_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color” has changed. </Doc></Method><Method compare="common" name="color_has_listener()"><Doc type="Format">color_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool color_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool color_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color”. </Doc></Method><Method compare="common" name="remove_color_listener()"><Doc type="Format">remove_color_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_color_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_color_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color”. </Doc></Method><Method compare="common" name="deselect_all_notes()"><Doc type="Format">deselect_all_notes( (Clip)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void deselect_all_notes(class TPyHandle&lt;class AClip&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void deselect_all_notes(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">De-selects all notes present in the clip. </Doc></Method><Method compare="added" name="duplicate_loop()"><Doc type="Format">duplicate_loop( (Clip)arg1) → None</Doc><Doc type="Cpp-Signature">void duplicate_loop(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Make the loop two times longer and duplicates notes and envelopes. Duplicates the clip start/end range if the clip is not looped. </Doc></Method><Property compare="added" name="end_marker"><Doc type="Description">Get/Set the Clips end marker pos in beats.</Doc></Property><Method compare="added" name="add_end_marker_listener()"><Doc type="Format">add_end_marker_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_end_marker_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “end_marker” has changed. </Doc></Method><Method compare="added" name="end_marker_has_listener()"><Doc type="Format">end_marker_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool end_marker_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “end_marker”. </Doc></Method><Method compare="added" name="remove_end_marker_listener()"><Doc type="Format">remove_end_marker_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_end_marker_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “end_marker”. </Doc></Method><Property compare="added" name="file_path"><Doc type="Description">Get the path of the file represented by the Audio Clip.</Doc></Property><Method compare="common" name="fire()"><Doc type="Format">fire( (Clip)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void fire(class TPyHandle&lt;class AClip&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void fire(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">(Re)Start playing this Clip. </Doc></Method><Property compare="added" name="gain"><Doc type="Description">Avalibale for AudioClips only.Read/write access to the gain setting of theAudio Clip</Doc></Property><Method compare="added" name="add_gain_listener()"><Doc type="Format">add_gain_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_gain_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “gain” has changed. </Doc></Method><Method compare="added" name="gain_has_listener()"><Doc type="Format">gain_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool gain_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “gain”. </Doc></Method><Method compare="added" name="remove_gain_listener()"><Doc type="Format">remove_gain_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_gain_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “gain”. </Doc></Method><Property compare="added" name="gain_display_string"><Doc type="Description">Return a string with the gain as dB value</Doc></Property><Method compare="added" name="get_notes()"><Doc type="Format">get_notes( (Clip)arg1, (float)arg2, (int)arg3, (float)arg4, (int)arg5) → tuple</Doc><Doc type="Cpp-Signature">boost::python::tuple get_notes(TPyHandle&lt;AClip&gt;, double, int, double, int)</Doc><Doc type="Description">Returns a tuple of tuples where each inner tuple represents a note starting in the given pitch- and time range. The inner tuple contains pitch, time, duration, velocity, and mute state. </Doc></Method><Method compare="changed common" name="get_selected_notes()"><Doc type="Format">get_selected_notes( (Clip)arg1) → tuple</Doc><Doc compare="deleted changed" type="Cpp-Signature">class boost::python::tuple get_selected_notes(class TPyHandle&lt;class AClip&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">boost::python::tuple get_selected_notes(TPyHandle&lt;AClip&gt;)</Doc><Doc compare="deleted changed" type="Description">Returns a tuple of tuples where each inner tuple represents a note. The inner tuple contains pitch, time, duration, velocity, and mute state. </Doc><Doc compare="added changed" type="Description">Returns a tuple of tuples where each inner tuple represents a selected note. The inner tuple contains pitch, time, duration, velocity, and mute state. </Doc></Method><Property compare="added" name="has_envelopes"><Doc type="Description">Will notify if the clip gets his first envelope or the last envelope is removed.</Doc></Property><Method compare="added" name="add_has_envelopes_listener()"><Doc type="Format">add_has_envelopes_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_has_envelopes_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_envelopes” has changed. </Doc></Method><Method compare="added" name="has_envelopes_has_listener()"><Doc type="Format">has_envelopes_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool has_envelopes_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_envelopes”. </Doc></Method><Method compare="added" name="remove_has_envelopes_listener()"><Doc type="Format">remove_has_envelopes_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_has_envelopes_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_envelopes”. </Doc></Method><Property compare="common" name="is_audio_clip"><Doc type="Description">Return true if this Clip is an Audio Clip.A Clip can be either an Audioclip or a MIDI Clip.</Doc></Property><Property compare="common" name="is_midi_clip"><Doc type="Description">return true if this Clip is a MIDI Clip.A Clip can be either an Audioclip or a MIDI Clip.</Doc></Property><Property compare="added" name="is_overdubbing"><Doc type="Description">returns true if the Clip is recording overdubs</Doc></Property><Method compare="added" name="add_is_overdubbing_listener()"><Doc type="Format">add_is_overdubbing_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_overdubbing_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_overdubbing” has changed. </Doc></Method><Method compare="added" name="is_overdubbing_has_listener()"><Doc type="Format">is_overdubbing_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_overdubbing_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_overdubbing”. </Doc></Method><Method compare="added" name="remove_is_overdubbing_listener()"><Doc type="Format">remove_is_overdubbing_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_overdubbing_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_overdubbing”. </Doc></Method><Property compare="common" name="is_playing"><Doc type="Description">Get/Set if this Clip is currently playing. If the Clips trigger modeis set to a quantization value, the Clip will not start playing immediately.If you need to know wether the Clip was triggered, use the is_triggered property.</Doc></Property><Property compare="common" name="is_recording"><Doc type="Description">returns true if the Clip was triggered to record or is recording.</Doc></Property><Method compare="common" name="add_is_recording_listener()"><Doc type="Format">add_is_recording_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_is_recording_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_is_recording_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_recording” has changed. </Doc></Method><Method compare="common" name="is_recording_has_listener()"><Doc type="Format">is_recording_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool is_recording_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool is_recording_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_recording”. </Doc></Method><Method compare="common" name="remove_is_recording_listener()"><Doc type="Format">remove_is_recording_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_is_recording_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_is_recording_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_recording”. </Doc></Method><Property compare="common" name="is_triggered"><Doc type="Description">returns true if the Clip was triggered or is playing.</Doc></Property><Property compare="common" name="length"><Doc type="Description">Get to the Clips length in beats.</Doc></Property><Property compare="common" name="loop_end"><Doc type="Description">Get/Set the loop end pos of this Clip in beats.</Doc></Property><Method compare="common" name="add_loop_end_listener()"><Doc type="Format">add_loop_end_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_loop_end_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_loop_end_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “loop_end” has changed. </Doc></Method><Method compare="common" name="loop_end_has_listener()"><Doc type="Format">loop_end_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool loop_end_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool loop_end_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “loop_end”. </Doc></Method><Method compare="common" name="remove_loop_end_listener()"><Doc type="Format">remove_loop_end_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_loop_end_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_loop_end_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “loop_end”. </Doc></Method><Method compare="common" name="add_loop_jump_listener()"><Doc type="Format">add_loop_jump_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_loop_jump_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_loop_jump_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “loop_jump” has changed. </Doc></Method><Method compare="common" name="loop_jump_has_listener()"><Doc type="Format">loop_jump_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool loop_jump_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool loop_jump_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “loop_jump”. </Doc></Method><Method compare="common" name="remove_loop_jump_listener()"><Doc type="Format">remove_loop_jump_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_loop_jump_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_loop_jump_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “loop_jump”. </Doc></Method><Property compare="common" name="loop_start"><Doc type="Description">Get/Set the Clips loopstart pos in beats.</Doc></Property><Method compare="common" name="add_loop_start_listener()"><Doc type="Format">add_loop_start_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_loop_start_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_loop_start_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “loop_start” has changed. </Doc></Method><Method compare="common" name="loop_start_has_listener()"><Doc type="Format">loop_start_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool loop_start_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool loop_start_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “loop_start”. </Doc></Method><Method compare="common" name="remove_loop_start_listener()"><Doc type="Format">remove_loop_start_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_loop_start_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_loop_start_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “loop_start”. </Doc></Method><Property compare="common" name="looping"><Doc type="Description">Get/Set the Clips ‘loop is enabled’ flag.Only Warped Audio Clips or MIDI Clip can be looped.</Doc></Property><Method compare="common" name="add_looping_listener()"><Doc type="Format">add_looping_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_looping_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_looping_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “looping” has changed. </Doc></Method><Method compare="common" name="looping_has_listener()"><Doc type="Format">looping_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool looping_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool looping_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “looping”. </Doc></Method><Method compare="common" name="remove_looping_listener()"><Doc type="Format">remove_looping_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_looping_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_looping_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “looping”. </Doc></Method><Method compare="common" name="move_playing_pos()"><Doc type="Format">move_playing_pos( (Clip)arg1, (float)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void move_playing_pos(class TPyHandle&lt;class AClip&gt;, double)</Doc><Doc compare="added changed" type="Cpp-Signature">void move_playing_pos(TPyHandle&lt;AClip&gt;, double)</Doc><Doc type="Description">Jump forward or backward by the specified relative amount in beats. Will do nothing, if the Clip is not playing. </Doc></Method><Property compare="common" name="muted"><Doc type="Description">Read/write access to the mute state of the Clip.</Doc></Property><Method compare="common" name="add_muted_listener()"><Doc type="Format">add_muted_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_muted_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_muted_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “muted” has changed. </Doc></Method><Method compare="common" name="muted_has_listener()"><Doc type="Format">muted_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool muted_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool muted_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “muted”. </Doc></Method><Method compare="common" name="remove_muted_listener()"><Doc type="Format">remove_muted_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_muted_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_muted_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “muted”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Read/write access to the name of the Clip.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_name_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_name_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool name_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_name_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Method compare="common" name="add_notes_listener()"><Doc type="Format">add_notes_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_notes_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_notes_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “notes” has changed. </Doc></Method><Method compare="common" name="notes_has_listener()"><Doc type="Format">notes_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool notes_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool notes_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “notes”. </Doc></Method><Method compare="common" name="remove_notes_listener()"><Doc type="Format">remove_notes_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_notes_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_notes_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “notes”. </Doc></Method><Property compare="common" name="pitch_coarse"><Doc type="Description">Avalibale for AudioClips only.Read/write access to the pitch (in halftones) setting of theAudio Clip, ranging from -48 to 48</Doc></Property><Method compare="common" name="add_pitch_coarse_listener()"><Doc type="Format">add_pitch_coarse_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_pitch_coarse_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_pitch_coarse_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “pitch_coarse” has changed. </Doc></Method><Method compare="common" name="pitch_coarse_has_listener()"><Doc type="Format">pitch_coarse_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool pitch_coarse_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool pitch_coarse_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “pitch_coarse”. </Doc></Method><Method compare="common" name="remove_pitch_coarse_listener()"><Doc type="Format">remove_pitch_coarse_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_pitch_coarse_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_pitch_coarse_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “pitch_coarse”. </Doc></Method><Property compare="common" name="pitch_fine"><Doc type="Description">Avalibale for AudioClips only.Read/write access to the pitch fine setting of theAudio Clip, ranging from -500 to 500</Doc></Property><Method compare="common" name="add_pitch_fine_listener()"><Doc type="Format">add_pitch_fine_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_pitch_fine_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_pitch_fine_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “pitch_fine” has changed. </Doc></Method><Method compare="common" name="pitch_fine_has_listener()"><Doc type="Format">pitch_fine_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool pitch_fine_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool pitch_fine_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “pitch_fine”. </Doc></Method><Method compare="common" name="remove_pitch_fine_listener()"><Doc type="Format">remove_pitch_fine_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_pitch_fine_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_pitch_fine_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “pitch_fine”. </Doc></Method><Property compare="common" name="playing_position"><Doc type="Description">Constant access to the current playing position of the clip.The returned value is the position in beats for midi and warped audio clips, or in seconds for unwarped audio clips. Stopped clips will return 0.</Doc></Property><Method compare="common" name="add_playing_position_listener()"><Doc type="Format">add_playing_position_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_playing_position_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_playing_position_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “playing_position” has changed. </Doc></Method><Method compare="common" name="playing_position_has_listener()"><Doc type="Format">playing_position_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool playing_position_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool playing_position_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “playing_position”. </Doc></Method><Method compare="common" name="remove_playing_position_listener()"><Doc type="Format">remove_playing_position_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_playing_position_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_playing_position_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “playing_position”. </Doc></Method><Method compare="common" name="add_playing_status_listener()"><Doc type="Format">add_playing_status_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_playing_status_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_playing_status_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “playing_status” has changed. </Doc></Method><Method compare="common" name="playing_status_has_listener()"><Doc type="Format">playing_status_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool playing_status_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool playing_status_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “playing_status”. </Doc></Method><Method compare="common" name="remove_playing_status_listener()"><Doc type="Format">remove_playing_status_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_playing_status_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_playing_status_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “playing_status”. </Doc></Method><Method compare="added" name="quantize()"><Doc type="Format">quantize( (Clip)arg1, (int)arg2, (float)arg3) → None</Doc><Doc type="Cpp-Signature">void quantize(TPyHandle&lt;AClip&gt;, int, float)</Doc><Doc type="Description">Quantize all notes in a clip or align warp markers. </Doc></Method><Method compare="added" name="quantize_pitch()"><Doc type="Format">quantize_pitch( (Clip)arg1, (int)arg2, (int)arg3, (float)arg4) → None</Doc><Doc type="Cpp-Signature">void quantize_pitch(TPyHandle&lt;AClip&gt;, int, int, float)</Doc><Doc type="Description">Quantize all the notes of a given pitch.  Raises an error on audio clips. </Doc></Method><Method compare="added" name="remove_notes()"><Doc type="Format">remove_notes( (Clip)arg1, (float)arg2, (int)arg3, (float)arg4, (int)arg5) → None</Doc><Doc type="Cpp-Signature">void remove_notes(TPyHandle&lt;AClip&gt;, double, int, double, int)</Doc><Doc type="Description">Delete all notes starting in the given pitch- and time range. </Doc></Method><Method compare="common" name="replace_selected_notes()"><Doc type="Format">replace_selected_notes( (Clip)arg1, (tuple)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void replace_selected_notes(class TPyHandle&lt;class AClip&gt;, class boost::python::tuple)</Doc><Doc compare="added changed" type="Cpp-Signature">void replace_selected_notes(TPyHandle&lt;AClip&gt;, boost::python::tuple)</Doc><Doc type="Description">Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_selected_notes. The notes described that way will then be used to replace the old selection. </Doc></Method><Method compare="common" name="select_all_notes()"><Doc type="Format">select_all_notes( (Clip)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void select_all_notes(class TPyHandle&lt;class AClip&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void select_all_notes(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Selects all notes present in the clip. </Doc></Method><Method compare="common" name="set_fire_button_state()"><Doc type="Format">set_fire_button_state( (Clip)arg1, (bool)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void set_fire_button_state(class TPyHandle&lt;class AClip&gt;, bool)</Doc><Doc compare="added changed" type="Cpp-Signature">void set_fire_button_state(TPyHandle&lt;AClip&gt;, bool)</Doc><Doc type="Description">Set the clip’s fire button state directly. Supports all launch modes. </Doc></Method><Method compare="added" name="set_notes()"><Doc type="Format">set_notes( (Clip)arg1, (tuple)arg2) → None</Doc><Doc type="Cpp-Signature">void set_notes(TPyHandle&lt;AClip&gt;, boost::python::tuple)</Doc><Doc type="Description">Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_notes. The notes described that way will then be added to the clip. </Doc></Method><Property compare="common" name="signature_denominator"><Doc type="Description">Get/Set access to the global signature denominator of the Clip.</Doc></Property><Method compare="common" name="add_signature_denominator_listener()"><Doc type="Format">add_signature_denominator_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_signature_denominator_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_signature_denominator_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “signature_denominator” has changed. </Doc></Method><Method compare="common" name="remove_signature_denominator_listener()"><Doc type="Format">remove_signature_denominator_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_signature_denominator_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_signature_denominator_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “signature_denominator”. </Doc></Method><Method compare="common" name="signature_denominator_has_listener()"><Doc type="Format">signature_denominator_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool signature_denominator_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool signature_denominator_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “signature_denominator”. </Doc></Method><Property compare="common" name="signature_numerator"><Doc type="Description">Get/Set access to the global signature numerator of the Clip.</Doc></Property><Method compare="common" name="add_signature_numerator_listener()"><Doc type="Format">add_signature_numerator_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_signature_numerator_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_signature_numerator_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “signature_numerator” has changed. </Doc></Method><Method compare="common" name="remove_signature_numerator_listener()"><Doc type="Format">remove_signature_numerator_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_signature_numerator_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_signature_numerator_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “signature_numerator”. </Doc></Method><Method compare="common" name="signature_numerator_has_listener()"><Doc type="Format">signature_numerator_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool signature_numerator_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool signature_numerator_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “signature_numerator”. </Doc></Method><Property compare="added" name="start_marker"><Doc type="Description">Get/Set the Clips start marker pos in beats.</Doc></Property><Method compare="added" name="add_start_marker_listener()"><Doc type="Format">add_start_marker_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_start_marker_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “start_marker” has changed. </Doc></Method><Method compare="added" name="remove_start_marker_listener()"><Doc type="Format">remove_start_marker_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_start_marker_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “start_marker”. </Doc></Method><Method compare="added" name="start_marker_has_listener()"><Doc type="Format">start_marker_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool start_marker_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “start_marker”. </Doc></Method><Property compare="added" name="start_time"><Doc type="Description">Get the clips start time offset.</Doc></Property><Method compare="common" name="stop()"><Doc type="Format">stop( (Clip)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void stop(class TPyHandle&lt;class AClip&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void stop(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Stop playing this Clip. </Doc></Method><Property compare="added" name="view"><Doc type="Description">Get the view of the Clip.</Doc></Property><Property compare="added" name="warp_mode"><Doc type="Description">Avalibale for AudioClips only.Get/Set the warp mode for this audio clip.</Doc></Property><Method compare="added" name="add_warp_mode_listener()"><Doc type="Format">add_warp_mode_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_warp_mode_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “warp_mode” has changed. </Doc></Method><Method compare="added" name="remove_warp_mode_listener()"><Doc type="Format">remove_warp_mode_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_warp_mode_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “warp_mode”. </Doc></Method><Method compare="added" name="warp_mode_has_listener()"><Doc type="Format">warp_mode_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool warp_mode_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “warp_mode”. </Doc></Method><Property compare="common" name="warping"><Doc type="Description">Avalibale for AudioClips only.Get/Set if this Clip is timestreched.</Doc></Property><Method compare="common" name="add_warping_listener()"><Doc type="Format">add_warping_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_warping_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_warping_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “warping” has changed. </Doc></Method><Method compare="common" name="remove_warping_listener()"><Doc type="Format">remove_warping_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_warping_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_warping_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “warping”. </Doc></Method><Method compare="common" name="warping_has_listener()"><Doc type="Format">warping_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool warping_has_listener(class TPyHandle&lt;class AClip&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool warping_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “warping”. </Doc></Method><Property compare="common" name="will_record_on_start"><Doc type="Description">returns true if the Clip will record on being started.</Doc></Property></Class><Class compare="added" name="GridQuantization"><Value name="count" /><Value name="g_2_bars" /><Value name="g_4_bars" /><Value name="g_8_bars" /><Value name="g_bar" /><Value name="g_eighth" /><Value name="g_half" /><Value name="g_quarter" /><Value name="g_sixteenth" /><Value name="g_thirtysecond" /><Value name="no_grid" /></Class><Class compare="added" name="WarpMode"><Value name="beats" /><Value name="complex" /><Value name="complex_pro" /><Value name="count" /><Value name="repitch" /><Value name="rex" /><Value name="texture" /><Value name="tones" /></Class></Module><Module compare="added common" name="ClipSlot"><Class compare="added common" name="ClipSlot"><Doc type="Description">This class represents an entry in Lives Session view matrix.</Doc><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the ClipSlot.</Doc></Property><Property compare="common" name="clip"><Doc type="Description">Returns the Clip which this clipslots currently owns. Might be None.</Doc></Property><Property compare="common" name="controls_other_clips"><Doc type="Description">Returns true if firing this slot will fire clips in other slots.Can only be true for slots in group tracks.</Doc></Property><Method compare="common" name="add_controls_other_clips_listener()"><Doc type="Format">add_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_controls_other_clips_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_controls_other_clips_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “controls_other_clips” has changed. </Doc></Method><Method compare="common" name="controls_other_clips_has_listener()"><Doc type="Format">controls_other_clips_has_listener( (ClipSlot)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool controls_other_clips_has_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool controls_other_clips_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “controls_other_clips”. </Doc></Method><Method compare="common" name="remove_controls_other_clips_listener()"><Doc type="Format">remove_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_controls_other_clips_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_controls_other_clips_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “controls_other_clips”. </Doc></Method><Method compare="added" name="create_clip()"><Doc type="Format">create_clip( (ClipSlot)arg1, (float)arg2) → None</Doc><Doc type="Cpp-Signature">void create_clip(TPyHandle&lt;AGroupAndClipSlotBase&gt;, double)</Doc><Doc type="Description">Creates an empty clip with the given length in the slot. Throws an error when called on non-empty slots or slots in non-MIDI tracks. </Doc></Method><Method compare="added" name="delete_clip()"><Doc type="Format">delete_clip( (ClipSlot)arg1) → None</Doc><Doc type="Cpp-Signature">void delete_clip(TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc><Doc type="Description">Removes the clip contained in the slot. Rises an exception if the slot was empty. </Doc></Method><Method compare="common" name="fire()"><Doc type="Format">fire( (ClipSlot)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void fire(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void fire(TPyHandle&lt;AGroupAndClipSlotBase&gt;)fire( (ClipSlot)self [, (float)record_length=1.7976931348623157e+308 [, (int)launch_quantization=-2147483648 [, (bool)force_legato=False]]]) → None : If ‘record_length’ is passed, the clip will be refired after the given recording length.  Raises an error if the slot owns a clip. ‘launch_quantization’ determines the quantization of global transport that is applied overriding the value in the song. ‘force_legato’ will make the clip play inmediatelly. The playhead will be moved to keep the clip synchronized. </Doc><Doc type="Description">Fire a Clip if this Clipslot owns one, else trigger the stop button, if we have one. </Doc></Method><Property compare="common" name="has_clip"><Doc type="Description">Returns true if this Clipslot owns a Clip.</Doc></Property><Method compare="common" name="add_has_clip_listener()"><Doc type="Format">add_has_clip_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_has_clip_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_has_clip_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_clip” has changed. </Doc></Method><Method compare="common" name="has_clip_has_listener()"><Doc type="Format">has_clip_has_listener( (ClipSlot)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool has_clip_has_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool has_clip_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_clip”. </Doc></Method><Method compare="common" name="remove_has_clip_listener()"><Doc type="Format">remove_has_clip_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_has_clip_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_has_clip_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_clip”. </Doc></Method><Property compare="common" name="has_stop_button"><Doc type="Description">Get/Set if this Clip has a stop button, which will, if fired, stop anyother Clip that is currently playing the Track we do belong to.</Doc></Property><Method compare="common" name="add_has_stop_button_listener()"><Doc type="Format">add_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_has_stop_button_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_has_stop_button_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_stop_button” has changed. </Doc></Method><Method compare="common" name="has_stop_button_has_listener()"><Doc type="Format">has_stop_button_has_listener( (ClipSlot)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool has_stop_button_has_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool has_stop_button_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_stop_button”. </Doc></Method><Method compare="common" name="remove_has_stop_button_listener()"><Doc type="Format">remove_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_has_stop_button_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_has_stop_button_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_stop_button”. </Doc></Method><Property compare="common" name="is_playing"><Doc type="Description">Returns whether the clip associated with the slot is playing.</Doc></Property><Property compare="common" name="is_recording"><Doc type="Description">Returns whether the clip associated with the slot is recording.</Doc></Property><Property compare="common" name="is_triggered"><Doc type="Description">Const access to the triggering state of the clip slot.</Doc></Property><Method compare="common" name="add_is_triggered_listener()"><Doc type="Format">add_is_triggered_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_is_triggered_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_is_triggered_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_triggered” has changed. </Doc></Method><Method compare="common" name="is_triggered_has_listener()"><Doc type="Format">is_triggered_has_listener( (ClipSlot)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool is_triggered_has_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool is_triggered_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_triggered”. </Doc></Method><Method compare="common" name="remove_is_triggered_listener()"><Doc type="Format">remove_is_triggered_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_is_triggered_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_is_triggered_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_triggered”. </Doc></Method><Property compare="common" name="playing_status"><Doc type="Description">Const access to the playing state of the clip slot.Can be either stopped, playing, or recording.</Doc></Property><Method compare="common" name="add_playing_status_listener()"><Doc type="Format">add_playing_status_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_playing_status_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_playing_status_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “playing_status” has changed. </Doc></Method><Method compare="common" name="playing_status_has_listener()"><Doc type="Format">playing_status_has_listener( (ClipSlot)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool playing_status_has_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool playing_status_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “playing_status”. </Doc></Method><Method compare="common" name="remove_playing_status_listener()"><Doc type="Format">remove_playing_status_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_playing_status_listener(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_playing_status_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “playing_status”. </Doc></Method><Method compare="common" name="set_fire_button_state()"><Doc type="Format">set_fire_button_state( (ClipSlot)arg1, (bool)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void set_fire_button_state(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;, bool)</Doc><Doc compare="added changed" type="Cpp-Signature">void set_fire_button_state(TPyHandle&lt;AGroupAndClipSlotBase&gt;, bool)</Doc><Doc type="Description">Set the clipslot’s fire button state directly. Supports all launch modes. </Doc></Method><Method compare="common" name="stop()"><Doc type="Format">stop( (ClipSlot)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void stop(class TPyHandle&lt;class AGroupAndClipSlotBase&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void stop(TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc><Doc type="Description">Stop playing the contained Clip, if there is a Clip and its currently playing. </Doc></Method><Property compare="common" name="will_record_on_start"><Doc type="Description">returns true if the clip slot will record on being fired.</Doc></Property></Class></Module><Module compare="added common" name="Device"><Class compare="added common" name="Device"><Doc type="Description">This class represents a MIDI or Audio DSP-Device in Live.</Doc><Class compare="added" name="View"><Doc type="Description">Representing the view aspects of a device.</Doc><Property name="canonical_parent"><Doc type="Description">Get the canonical parent of the View.</Doc></Property><Property name="drum_pads_scroll_position"><Doc type="Description">Access to the index of the lowest visible row of pads. Throws an exception if can_have_drum_pads is false.</Doc></Property><Method name="add_drum_pads_scroll_position_listener()"><Doc type="Format">add_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_drum_pads_scroll_position_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “drum_pads_scroll_position” has changed. </Doc></Method><Method name="drum_pads_scroll_position_has_listener()"><Doc type="Format">drum_pads_scroll_position_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool drum_pads_scroll_position_has_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “drum_pads_scroll_position”. </Doc></Method><Method name="remove_drum_pads_scroll_position_listener()"><Doc type="Format">remove_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_drum_pads_scroll_position_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “drum_pads_scroll_position”. </Doc></Method><Property name="selected_chain"><Doc type="Description">Return access to the currently selected chain. Throws an exception if can_have_chains is false.</Doc></Property><Method name="add_selected_chain_listener()"><Doc type="Format">add_selected_chain_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_selected_chain_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_chain” has changed. </Doc></Method><Method name="remove_selected_chain_listener()"><Doc type="Format">remove_selected_chain_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_selected_chain_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_chain”. </Doc></Method><Method name="selected_chain_has_listener()"><Doc type="Format">selected_chain_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool selected_chain_has_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_chain”. </Doc></Method><Property name="selected_drum_pad"><Doc type="Description">Return access to the currently selected drum pad. Throws an exception if can_have_drum_pads is false.</Doc></Property><Method name="add_selected_drum_pad_listener()"><Doc type="Format">add_selected_drum_pad_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_selected_drum_pad_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_drum_pad” has changed. </Doc></Method><Method name="remove_selected_drum_pad_listener()"><Doc type="Format">remove_selected_drum_pad_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_selected_drum_pad_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_drum_pad”. </Doc></Method><Method name="selected_drum_pad_has_listener()"><Doc type="Format">selected_drum_pad_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool selected_drum_pad_has_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_drum_pad”. </Doc></Method></Class><Property compare="common" name="can_have_chains"><Doc type="Description">Returns true if the device is a rack.</Doc></Property><Property compare="added" name="can_have_drum_pads"><Doc type="Description">Returns true if the device is a drum rack.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the Device.</Doc></Property><Property compare="common" name="chains"><Doc type="Description">Return const access to the list of chains in this device. Throws an exception if can_have_chains is false.</Doc></Property><Method compare="common" name="add_chains_listener()"><Doc type="Format">add_chains_listener( (Device)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_chains_listener(class TPyHandle&lt;class ADevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_chains_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “chains” has changed. </Doc></Method><Method compare="common" name="chains_has_listener()"><Doc type="Format">chains_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool chains_has_listener(class TPyHandle&lt;class ADevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool chains_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “chains”. </Doc></Method><Method compare="common" name="remove_chains_listener()"><Doc type="Format">remove_chains_listener( (Device)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_chains_listener(class TPyHandle&lt;class ADevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_chains_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “chains”. </Doc></Method><Property compare="added" name="class_display_name"><Doc type="Description">Return const access to the name of the device’s class name as displayed in Live’s browser and device chain</Doc></Property><Property compare="common" name="class_name"><Doc type="Description">Return const access to the name of the device’s class.</Doc></Property><Property compare="added" name="drum_pads"><Doc type="Description">Return const access to the list of drum pads in this device. Throws an exception if can_have_drum_pads is false.</Doc></Property><Method compare="added" name="add_drum_pads_listener()"><Doc type="Format">add_drum_pads_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_drum_pads_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “drum_pads” has changed. </Doc></Method><Method compare="added" name="drum_pads_has_listener()"><Doc type="Format">drum_pads_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool drum_pads_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “drum_pads”. </Doc></Method><Method compare="added" name="remove_drum_pads_listener()"><Doc type="Format">remove_drum_pads_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_drum_pads_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “drum_pads”. </Doc></Method><Method compare="added" name="get_bank_count()"><Doc type="Format">get_bank_count( (Device)arg1) → int</Doc><Doc type="Cpp-Signature">int get_bank_count(TPyHandle&lt;ADevice&gt;)</Doc><Doc type="Description">Get the number of parameter banks. This is related to hardware control surfaces. For Max devices only. </Doc></Method><Method compare="added" name="get_bank_name()"><Doc type="Format">get_bank_name( (Device)arg1, (int)arg2) → object</Doc><Doc type="Cpp-Signature">TString get_bank_name(TPyHandle&lt;ADevice&gt;, int)</Doc><Doc type="Description">Get the name of a parameter bank given by index. This is related to hardware control surfaces. For Max devices only. </Doc></Method><Method compare="added" name="get_bank_parameters()"><Doc type="Format">get_bank_parameters( (Device)arg1, (int)arg2) → list</Doc><Doc type="Cpp-Signature">boost::python::list get_bank_parameters(TPyHandle&lt;ADevice&gt;, int)</Doc><Doc type="Description">Get the indices of parameters of the given bank index. Empty slots are marked as -1. Bank index -1 refers to the best-of bank. This function is related to hardware control surfaces. For Max devices only. </Doc></Method><Property compare="added" name="has_drum_pads"><Doc type="Description">Returns true if the device is a drum rack which has drum pads. Throws an exception if can_have_drum_pads is false.</Doc></Property><Method compare="added" name="add_has_drum_pads_listener()"><Doc type="Format">add_has_drum_pads_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_has_drum_pads_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_drum_pads” has changed. </Doc></Method><Method compare="added" name="has_drum_pads_has_listener()"><Doc type="Format">has_drum_pads_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool has_drum_pads_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_drum_pads”. </Doc></Method><Method compare="added" name="remove_has_drum_pads_listener()"><Doc type="Format">remove_has_drum_pads_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_has_drum_pads_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_drum_pads”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Return access to the name of the device.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_name_listener(class TPyHandle&lt;class ADevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool name_has_listener(class TPyHandle&lt;class ADevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_name_listener(class TPyHandle&lt;class ADevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="parameters"><Doc type="Description">Const access to the list of available automatable parameters for this device.</Doc></Property><Method compare="common" name="add_parameters_listener()"><Doc type="Format">add_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_parameters_listener(class TPyHandle&lt;class ADevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “parameters” has changed. </Doc></Method><Method compare="common" name="parameters_has_listener()"><Doc type="Format">parameters_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool parameters_has_listener(class TPyHandle&lt;class ADevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool parameters_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “parameters”. </Doc></Method><Method compare="common" name="remove_parameters_listener()"><Doc type="Format">remove_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_parameters_listener(class TPyHandle&lt;class ADevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “parameters”. </Doc></Method><Property compare="common" name="return_chains"><Doc type="Description">Return const access to the list of return chains in this device. Throws an exception if can_have_chains is false.</Doc></Property><Method compare="common" name="add_return_chains_listener()"><Doc type="Format">add_return_chains_listener( (Device)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_return_chains_listener(class TPyHandle&lt;class ADevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_return_chains_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “return_chains” has changed. </Doc></Method><Method compare="common" name="remove_return_chains_listener()"><Doc type="Format">remove_return_chains_listener( (Device)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_return_chains_listener(class TPyHandle&lt;class ADevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_return_chains_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “return_chains”. </Doc></Method><Method compare="common" name="return_chains_has_listener()"><Doc type="Format">return_chains_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool return_chains_has_listener(class TPyHandle&lt;class ADevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool return_chains_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “return_chains”. </Doc></Method><Method compare="common" name="store_chosen_bank()"><Doc type="Format">store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void store_chosen_bank(class TPyHandle&lt;class ADevice&gt;, long, long)</Doc><Doc compare="added changed" type="Cpp-Signature">void store_chosen_bank(TPyHandle&lt;ADevice&gt;, int, int)</Doc><Doc type="Description">Set the selected bank in the device for persistency. </Doc></Method><Property compare="added" name="type"><Doc type="Description">Return the type of the device.</Doc></Property><Property compare="added" name="view"><Doc type="Description">Representing the view aspects of a device.</Doc></Property><Property compare="added" name="visible_drum_pads"><Doc type="Description">Return const access to the list of visible drum pads in this device. Throws an exception if can_have_drum_pads is false.</Doc></Property><Method compare="added" name="add_visible_drum_pads_listener()"><Doc type="Format">add_visible_drum_pads_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_visible_drum_pads_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “visible_drum_pads” has changed. </Doc></Method><Method compare="added" name="remove_visible_drum_pads_listener()"><Doc type="Format">remove_visible_drum_pads_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_visible_drum_pads_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “visible_drum_pads”. </Doc></Method><Method compare="added" name="visible_drum_pads_has_listener()"><Doc type="Format">visible_drum_pads_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool visible_drum_pads_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “visible_drum_pads”. </Doc></Method></Class><Class compare="added" name="DeviceType"><Doc type="Description">The type of the device.</Doc><Value name="audio_effect"><Doc type="Description">The type of the device.</Doc></Value><Value name="instrument"><Doc type="Description">The type of the device.</Doc></Value><Value name="midi_effect"><Doc type="Description">The type of the device.</Doc></Value><Value name="undefined"><Doc type="Description">The type of the device.</Doc></Value></Class></Module><Module compare="common" name="ChainMixerDevice"><Class compare="common" name="ChainMixerDevice"><Doc type="Description">This class represents a Chain’s Mixer Device in Live, which gives youaccess to the Volume, Panning, and Send properties of a Chain.</Doc><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the mixer device.</Doc></Property><Property compare="common" name="chain_activator"><Doc type="Description">Const access to the Chain’s Activator Device Parameter.</Doc></Property><Property compare="common" name="panning"><Doc type="Description">Const access to the Chain’s Panning Device Parameter.</Doc></Property><Property compare="common" name="sends"><Doc type="Description">Const access to the Chain’s list of Send Amount Device Parameters.</Doc></Property><Method compare="common" name="add_sends_listener()"><Doc type="Format">add_sends_listener( (ChainMixerDevice)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_sends_listener(class TPyHandle&lt;class ABranchMixerDevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_sends_listener(TPyHandle&lt;ABranchMixerDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “sends” has changed. </Doc></Method><Method compare="common" name="remove_sends_listener()"><Doc type="Format">remove_sends_listener( (ChainMixerDevice)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_sends_listener(class TPyHandle&lt;class ABranchMixerDevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_sends_listener(TPyHandle&lt;ABranchMixerDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “sends”. </Doc></Method><Method compare="common" name="sends_has_listener()"><Doc type="Format">sends_has_listener( (ChainMixerDevice)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool sends_has_listener(class TPyHandle&lt;class ABranchMixerDevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool sends_has_listener(TPyHandle&lt;ABranchMixerDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “sends”. </Doc></Method><Property compare="common" name="volume"><Doc type="Description">Const access to the Chain’s Volume Device Parameter.</Doc></Property></Class></Module><Module compare="common" name="MixerDevice"><Class compare="common" name="MixerDevice"><Doc type="Description">This class represents a Mixer Device in Live, which gives youaccess to the Volume and Panning properties of a Track.</Doc><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the mixer device.</Doc></Property><Property compare="common" name="crossfade_assign"><Doc type="Description">Player- and ReturnTracks only: Const access to the Track’s Crossfade Assign State.</Doc></Property><Method compare="common" name="add_crossfade_assign_listener()"><Doc type="Format">add_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_crossfade_assign_listener(class TPyHandle&lt;class ATrackDevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_crossfade_assign_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “crossfade_assign” has changed. </Doc></Method><Method compare="common" name="crossfade_assign_has_listener()"><Doc type="Format">crossfade_assign_has_listener( (MixerDevice)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool crossfade_assign_has_listener(class TPyHandle&lt;class ATrackDevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool crossfade_assign_has_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “crossfade_assign”. </Doc></Method><Method compare="common" name="remove_crossfade_assign_listener()"><Doc type="Format">remove_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_crossfade_assign_listener(class TPyHandle&lt;class ATrackDevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_crossfade_assign_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “crossfade_assign”. </Doc></Method><Sub-Class compare="common" name="crossfade_assignments"><Value compare="common" name="A" /><Value compare="common" name="B" /><Value compare="common" name="NONE" /></Sub-Class><Property compare="common" name="crossfader"><Doc type="Description">MasterTrack only: Const access to the Crossfader.</Doc></Property><Property compare="common" name="cue_volume"><Doc type="Description">MasterTrack only: Const access to the Cue Volume Parameter.</Doc></Property><Property compare="common" name="panning"><Doc type="Description">Const access to the Tracks Panning Device Parameter.</Doc></Property><Property compare="common" name="sends"><Doc type="Description">Const access to the Tracks list of Send Amount Device Parameters.</Doc></Property><Method compare="common" name="add_sends_listener()"><Doc type="Format">add_sends_listener( (MixerDevice)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_sends_listener(class TPyHandle&lt;class ATrackDevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_sends_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “sends” has changed. </Doc></Method><Method compare="common" name="remove_sends_listener()"><Doc type="Format">remove_sends_listener( (MixerDevice)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_sends_listener(class TPyHandle&lt;class ATrackDevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_sends_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “sends”. </Doc></Method><Method compare="common" name="sends_has_listener()"><Doc type="Format">sends_has_listener( (MixerDevice)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool sends_has_listener(class TPyHandle&lt;class ATrackDevice&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool sends_has_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “sends”. </Doc></Method><Property compare="common" name="song_tempo"><Doc type="Description">MasterTrack only: Const access to the Song’s Tempo.</Doc></Property><Property compare="common" name="track_activator"><Doc type="Description">Const access to the Tracks Activator Device Parameter.</Doc></Property><Property compare="common" name="volume"><Doc type="Description">Const access to the Tracks Volume Device Parameter.</Doc></Property></Class></Module><Module compare="added common" name="DeviceParameter"><Class compare="added common" name="DeviceParameter"><Doc type="Description">This class represents a (automatable) parameter within a MIDI orAudio DSP-Device.</Doc><Method compare="added" name="begin_gesture()"><Doc type="Format">begin_gesture( (DeviceParameter)arg1) → None</Doc><Doc type="Cpp-Signature">void begin_gesture(TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description">Notify the begin of a modification of the parameter, when a sequence of modifications have to be consider a consistent group — for Sexample, when recording automation. </Doc></Method><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the device parameter.</Doc></Property><Property compare="common" name="default_value"><Doc type="Description">Return the default value for this parameter.  A Default value is onlyavailable for non-quantized parameter types (see ‘is_quantized’).</Doc></Property><Method compare="added" name="end_gesture()"><Doc type="Format">end_gesture( (DeviceParameter)arg1) → None</Doc><Doc type="Cpp-Signature">void end_gesture(TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description">Notify the end of a modification of the parameter. See begin_gesture. </Doc></Method><Property compare="common" name="is_enabled"><Doc type="Description">Returns false if the parameter has been macro mapped or disabled by Max.</Doc></Property><Property compare="common" name="is_quantized"><Doc type="Description">Returns True, if this value is a boolean or integer like switch.Non quantized values are continues float values.</Doc></Property><Property compare="common" name="max"><Doc type="Description">Returns const access to the upper value of the allowed range forthis parameter</Doc></Property><Property compare="common" name="min"><Doc type="Description">Returns const access to the lower value of the allowed range forthis parameter</Doc></Property><Property compare="common" name="name"><Doc type="Description">Returns const access the name of this parameter, as visible in Livesautomation choosers.</Doc></Property><Property compare="common" name="original_name"><Doc type="Description">Returns const access the original name of this parameter, unaffected ofany renamings.</Doc></Property><Property compare="common" name="value"><Doc type="Description">Get/Set the current value (as visible in the GUI) this parameter.The value must be inside the min/max properties of this device.</Doc></Property><Method compare="common" name="add_value_listener()"><Doc type="Format">add_value_listener( (DeviceParameter)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_value_listener(class TPyHandle&lt;class ATimeable&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_value_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “value” has changed. </Doc></Method><Method compare="common" name="remove_value_listener()"><Doc type="Format">remove_value_listener( (DeviceParameter)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_value_listener(class TPyHandle&lt;class ATimeable&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_value_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “value”. </Doc></Method><Method compare="common" name="value_has_listener()"><Doc type="Format">value_has_listener( (DeviceParameter)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool value_has_listener(class TPyHandle&lt;class ATimeable&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool value_has_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “value”. </Doc></Method></Class></Module><Module compare="added" name="DrumPad"><Class name="DrumPad"><Doc type="Description">This class represents a drum group device pad in Live.</Doc><Property name="canonical_parent"><Doc type="Description">Get the canonical parent of the drum pad.</Doc></Property><Property name="chains"><Doc type="Description">Return const access to the list of chains in this drum pad.</Doc></Property><Method name="add_chains_listener()"><Doc type="Format">add_chains_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_chains_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “chains” has changed. </Doc></Method><Method name="chains_has_listener()"><Doc type="Format">chains_has_listener( (DrumPad)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool chains_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “chains”. </Doc></Method><Method name="remove_chains_listener()"><Doc type="Format">remove_chains_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_chains_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “chains”. </Doc></Method><Property name="mute"><Doc type="Description">Mute/unmute the pad.</Doc></Property><Method name="add_mute_listener()"><Doc type="Format">add_mute_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_mute_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “mute” has changed. </Doc></Method><Method name="mute_has_listener()"><Doc type="Format">mute_has_listener( (DrumPad)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool mute_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “mute”. </Doc></Method><Method name="remove_mute_listener()"><Doc type="Format">remove_mute_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_mute_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “mute”. </Doc></Method><Property name="name"><Doc type="Description">Return const access to the drum pad’s name. It depends on the contained chains.</Doc></Property><Method name="add_name_listener()"><Doc type="Format">add_name_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method name="name_has_listener()"><Doc type="Format">name_has_listener( (DrumPad)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method name="remove_name_listener()"><Doc type="Format">remove_name_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property name="note"><Doc type="Description">Get the MIDI note of the drum pad.</Doc></Property><Property name="solo"><Doc type="Description">Solo/unsolo the pad.</Doc></Property><Method name="add_solo_listener()"><Doc type="Format">add_solo_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_solo_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “solo” has changed. </Doc></Method><Method name="remove_solo_listener()"><Doc type="Format">remove_solo_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_solo_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “solo”. </Doc></Method><Method name="solo_has_listener()"><Doc type="Format">solo_has_listener( (DrumPad)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool solo_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “solo”. </Doc></Method></Class></Module><Module compare="added" name="Listener"><Class name="ListenerHandle"><Doc type="Description">This class represents a Python listener when connected to a Live property.</Doc><Method name="disconnect()"><Doc type="Format">disconnect( (ListenerHandle)arg1) → None</Doc><Doc type="Cpp-Signature">void disconnect(LPythonRemote {lvalue})</Doc><Doc type="Description">Disconnects the listener from its property </Doc></Method><Property name="name"><Doc type="Description">Prints the name of the property that this listener is connected to</Doc></Property></Class></Module><Module compare="common" name="LomObject"><Class compare="common" name="LomObject"><Doc type="Description">this is the base class for an object that is accessible via the LOM</Doc></Class></Module><Module compare="changed common" name="MidiMap"><Class compare="common" name="CCFeedbackRule"><Doc type="Description">Structure to define feedback properties of MIDI mappings.</Doc><Property compare="common" name="cc_no" /><Property compare="common" name="cc_value_map" /><Property compare="common" name="channel" /><Property compare="common" name="delay_in_ms" /></Class><Class compare="common" name="MapMode"><Value compare="common" name="absolute" /><Value compare="common" name="absolute_14_bit" /><Value compare="common" name="relative_binary_offset" /><Value compare="common" name="relative_signed_bit" /><Value compare="common" name="relative_signed_bit2" /><Value compare="common" name="relative_smooth_binary_offset" /><Value compare="common" name="relative_smooth_signed_bit" /><Value compare="common" name="relative_smooth_signed_bit2" /><Value compare="common" name="relative_smooth_two_compliment" /><Value compare="common" name="relative_two_compliment" /></Class><Class compare="common" name="PitchBendFeedbackRule"><Doc type="Description">Structure to define feedback properties of MIDI mappings.</Doc><Property compare="common" name="channel" /><Property compare="common" name="delay_in_ms" /><Property compare="common" name="value_pair_map" /></Class><Built-In compare="common" name="forward_midi_cc()"><Doc type="Format">forward_midi_cc( (int)arg1, (int)arg2, (int)arg3, (int)arg4) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool forward_midi_cc(unsigned long, unsigned long, long, long)</Doc><Doc compare="added changed" type="Cpp-Signature">bool forward_midi_cc(unsigned int, unsigned int, int, int)</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="forward_midi_note()"><Doc type="Format">forward_midi_note( (int)arg1, (int)arg2, (int)arg3, (int)arg4) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool forward_midi_note(unsigned long, unsigned long, long, long)</Doc><Doc compare="added changed" type="Cpp-Signature">bool forward_midi_note(unsigned int, unsigned int, int, int)</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="forward_midi_pitchbend()"><Doc type="Format">forward_midi_pitchbend( (int)arg1, (int)arg2, (int)arg3) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool forward_midi_pitchbend(unsigned long, unsigned long, long)</Doc><Doc compare="added changed" type="Cpp-Signature">bool forward_midi_pitchbend(unsigned int, unsigned int, int)</Doc><Doc type="Description" /></Built-In><Built-In compare="changed common" name="map_midi_cc()"><Doc compare="deleted changed" type="Format">map_midi_cc( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4, (MapMode)arg5, (bool)arg6) → bool</Doc><Doc compare="added changed" type="Format">map_midi_cc( (int)midi_map_handle, (DeviceParameter)parameter, (int)midi_channel, (int)controller_number, (MapMode)map_mode, (bool)avoid_takeover [, (float)sensitivity=1.0]) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool map_midi_cc(unsigned long, class TPyHandle&lt;class ATimeable&gt;, long, long, enum NRemoteMapperTypes::TControllerMapMode, bool)</Doc><Doc compare="added changed" type="Cpp-Signature">bool map_midi_cc(unsigned int, TPyHandle&lt;ATimeable&gt;, int, int, NRemoteMapperTypes::TControllerMapMode, bool [, float=1.0])</Doc><Doc type="Description" /></Built-In><Built-In compare="changed common" name="map_midi_cc_with_feedback_map()"><Doc compare="deleted changed" type="Format">map_midi_cc_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4, (MapMode)arg5, (CCFeedbackRule)arg6, (bool)arg7) → bool</Doc><Doc compare="added changed" type="Format">map_midi_cc_with_feedback_map( (int)midi_map_handle, (DeviceParameter)parameter, (int)midi_channel, (int)controller_number, (MapMode)map_mode, (CCFeedbackRule)feedback_rule, (bool)avoid_takeover [, (float)sensitivity=1.0]) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool map_midi_cc_with_feedback_map(unsigned long, class TPyHandle&lt;class ATimeable&gt;, long, long, enum NRemoteMapperTypes::TControllerMapMode, class NPythonMidiMap::TCCFeedbackRule, bool)</Doc><Doc compare="added changed" type="Cpp-Signature">bool map_midi_cc_with_feedback_map(unsigned int, TPyHandle&lt;ATimeable&gt;, int, int, NRemoteMapperTypes::TControllerMapMode, NPythonMidiMap::TCCFeedbackRule, bool [, float=1.0])</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="map_midi_note()"><Doc type="Format">map_midi_note( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool map_midi_note(unsigned long, class TPyHandle&lt;class ATimeable&gt;, long, long)</Doc><Doc compare="added changed" type="Cpp-Signature">bool map_midi_note(unsigned int, TPyHandle&lt;ATimeable&gt;, int, int)</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="map_midi_note_with_feedback_map()"><Doc type="Format">map_midi_note_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4, (object)arg5) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool map_midi_note_with_feedback_map(unsigned long, class TPyHandle&lt;class ATimeable&gt;, long, long, class NPythonMidiMap::TNoteFeedbackRule)</Doc><Doc compare="added changed" type="Cpp-Signature">bool map_midi_note_with_feedback_map(unsigned int, TPyHandle&lt;ATimeable&gt;, int, int, NPythonMidiMap::TNoteFeedbackRule)</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="map_midi_pitchbend()"><Doc type="Format">map_midi_pitchbend( (int)arg1, (DeviceParameter)arg2, (int)arg3, (bool)arg4) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool map_midi_pitchbend(unsigned long, class TPyHandle&lt;class ATimeable&gt;, long, bool)</Doc><Doc compare="added changed" type="Cpp-Signature">bool map_midi_pitchbend(unsigned int, TPyHandle&lt;ATimeable&gt;, int, bool)</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="map_midi_pitchbend_with_feedback_map()"><Doc type="Format">map_midi_pitchbend_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (PitchBendFeedbackRule)arg4, (bool)arg5) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool map_midi_pitchbend_with_feedback_map(unsigned long, class TPyHandle&lt;class ATimeable&gt;, long, class NPythonMidiMap::TPitchBendFeedbackRule, bool)</Doc><Doc compare="added changed" type="Cpp-Signature">bool map_midi_pitchbend_with_feedback_map(unsigned int, TPyHandle&lt;ATimeable&gt;, int, NPythonMidiMap::TPitchBendFeedbackRule, bool)</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="send_feedback_for_parameter()"><Doc type="Format">send_feedback_for_parameter( (int)arg1, (DeviceParameter)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void send_feedback_for_parameter(unsigned long, class TPyHandle&lt;class ATimeable&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void send_feedback_for_parameter(unsigned int, TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description" /></Built-In></Module><Module compare="added changed common" name="Scene"><Class compare="added changed common" name="Scene"><Doc type="Description">This class represents an series of ClipSlots in Lives Sessionview matrix.</Doc><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the scene.</Doc></Property><Property compare="common" name="clip_slots"><Doc type="Description">return a list of clipslots (see class AClipSlot) that this scene covers.</Doc></Property><Method compare="common" name="add_clip_slots_listener()"><Doc type="Format">add_clip_slots_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_clip_slots_listener(class TPyHandle&lt;class AScene&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_clip_slots_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “clip_slots” has changed. </Doc></Method><Method compare="common" name="clip_slots_has_listener()"><Doc type="Format">clip_slots_has_listener( (Scene)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool clip_slots_has_listener(class TPyHandle&lt;class AScene&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool clip_slots_has_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “clip_slots”. </Doc></Method><Method compare="common" name="remove_clip_slots_listener()"><Doc type="Format">remove_clip_slots_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_clip_slots_listener(class TPyHandle&lt;class AScene&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_clip_slots_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “clip_slots”. </Doc></Method><Property compare="common" name="color"><Doc type="Description">Get/set access to the color of the Scene (RGB).</Doc></Property><Method compare="common" name="add_color_listener()"><Doc type="Format">add_color_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_color_listener(class TPyHandle&lt;class AScene&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_color_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color” has changed. </Doc></Method><Method compare="common" name="color_has_listener()"><Doc type="Format">color_has_listener( (Scene)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool color_has_listener(class TPyHandle&lt;class AScene&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool color_has_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color”. </Doc></Method><Method compare="common" name="remove_color_listener()"><Doc type="Format">remove_color_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_color_listener(class TPyHandle&lt;class AScene&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_color_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color”. </Doc></Method><Method compare="changed common" name="fire()"><Doc compare="deleted changed" type="Format">fire( (Scene)arg1) → None</Doc><Doc compare="added changed" type="Format">fire( (Scene)arg1 [, (bool)force_legato=False [, (bool)can_select_scene_on_launch=True]]) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void fire(class TPyHandle&lt;class AScene&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void fire(TPyHandle&lt;AScene&gt; [, bool=False [, bool=True]])</Doc><Doc type="Description">Fire the scene directly. Will fire all clipslots that this scene owns and select the scene itself. </Doc></Method><Method compare="changed common" name="fire_as_selected()"><Doc compare="deleted changed" type="Format">fire_as_selected( (Scene)arg1) → None</Doc><Doc compare="added changed" type="Format">fire_as_selected( (Scene)arg1 [, (bool)force_legato=False]) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void fire_as_selected(class TPyHandle&lt;class AScene&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void fire_as_selected(TPyHandle&lt;AScene&gt; [, bool=False])</Doc><Doc type="Description">Fire the selected scene. Will fire all clipslots that this scene owns and select the next scene if necessary. </Doc></Method><Property compare="added" name="is_empty"><Doc type="Description">Returns True if all clip slots of this scene are empty.</Doc></Property><Property compare="common" name="is_triggered"><Doc type="Description">Const access to the scene’s trigger state.</Doc></Property><Method compare="common" name="add_is_triggered_listener()"><Doc type="Format">add_is_triggered_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_is_triggered_listener(class TPyHandle&lt;class AScene&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_is_triggered_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_triggered” has changed. </Doc></Method><Method compare="common" name="is_triggered_has_listener()"><Doc type="Format">is_triggered_has_listener( (Scene)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool is_triggered_has_listener(class TPyHandle&lt;class AScene&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool is_triggered_has_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_triggered”. </Doc></Method><Method compare="common" name="remove_is_triggered_listener()"><Doc type="Format">remove_is_triggered_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_is_triggered_listener(class TPyHandle&lt;class AScene&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_is_triggered_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_triggered”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Get/Set the name of the scene. Might contain the substring BPM, whichidentifies that the scene will change the tempo when fireed. To Get/Setthe temp, use the ‘tempo’ property of the scene.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_name_listener(class TPyHandle&lt;class AScene&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_name_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Scene)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool name_has_listener(class TPyHandle&lt;class AScene&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_name_listener(class TPyHandle&lt;class AScene&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Method compare="common" name="set_fire_button_state()"><Doc type="Format">set_fire_button_state( (Scene)arg1, (bool)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void set_fire_button_state(class TPyHandle&lt;class AScene&gt;, bool)</Doc><Doc compare="added changed" type="Cpp-Signature">void set_fire_button_state(TPyHandle&lt;AScene&gt;, bool)</Doc><Doc type="Description">Set the scene’s fire button state directly. Supports all launch modes. </Doc></Method><Property compare="common" name="tempo"><Doc type="Description">Get/Set the the tempo value of the scene.The Song will use the Scenes tempo as soon as the Scene is fired.Returns -1 if the Scene has no tempo propery.</Doc></Property></Class></Module><Module compare="added changed common" name="Song"><Class compare="common" name="BeatTime"><Doc type="Description">Represents a Time, splitted into Bars, Beats, SubDivision and Ticks.</Doc><Property compare="common" name="bars" /><Property compare="common" name="beats" /><Property compare="common" name="sub_division" /><Property compare="common" name="ticks" /></Class><Class compare="added" name="CaptureMode"><Doc type="Description">The capture mode that is used for capture and insert scene.</Doc><Value name="all"><Doc type="Description">The capture mode that is used for capture and insert scene.</Doc></Value><Value name="all_except_selected"><Doc type="Description">The capture mode that is used for capture and insert scene.</Doc></Value></Class><Class compare="common" name="CuePoint"><Doc type="Description">Represents a ‘Marker’ in the arrangement.</Doc><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the cue point.</Doc></Property><Method compare="common" name="jump()"><Doc type="Format">jump( (CuePoint)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void jump(class TPyHandle&lt;class ACuePoint&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void jump(TPyHandle&lt;ACuePoint&gt;)</Doc><Doc type="Description">When the Song is playing, set the playing-position quantized to this Cuepoint’s time. When not playing, simply move the start playing position. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Get/Listen to the name of this CuePoint, as visible in the arranger.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (CuePoint)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_name_listener(class TPyHandle&lt;class ACuePoint&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ACuePoint&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (CuePoint)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool name_has_listener(class TPyHandle&lt;class ACuePoint&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ACuePoint&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (CuePoint)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_name_listener(class TPyHandle&lt;class ACuePoint&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ACuePoint&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="time"><Doc type="Description">Get/Listen to the CuePoint’s time in beats.</Doc></Property><Method compare="common" name="add_time_listener()"><Doc type="Format">add_time_listener( (CuePoint)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_time_listener(class TPyHandle&lt;class ACuePoint&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_time_listener(TPyHandle&lt;ACuePoint&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “time” has changed. </Doc></Method><Method compare="common" name="remove_time_listener()"><Doc type="Format">remove_time_listener( (CuePoint)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_time_listener(class TPyHandle&lt;class ACuePoint&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_time_listener(TPyHandle&lt;ACuePoint&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “time”. </Doc></Method><Method compare="common" name="time_has_listener()"><Doc type="Format">time_has_listener( (CuePoint)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool time_has_listener(class TPyHandle&lt;class ACuePoint&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool time_has_listener(TPyHandle&lt;ACuePoint&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “time”. </Doc></Method></Class><Class compare="common" name="Quantization"><Value compare="common" name="q_2_bars" /><Value compare="common" name="q_4_bars" /><Value compare="common" name="q_8_bars" /><Value compare="common" name="q_bar" /><Value compare="common" name="q_eight" /><Value compare="common" name="q_eight_triplet" /><Value compare="common" name="q_half" /><Value compare="common" name="q_half_triplet" /><Value compare="common" name="q_no_q" /><Value compare="common" name="q_quarter" /><Value compare="common" name="q_quarter_triplet" /><Value compare="common" name="q_sixtenth" /><Value compare="common" name="q_sixtenth_triplet" /><Value compare="common" name="q_thirtytwoth" /></Class><Class compare="added common" name="RecordingQuantization"><Value compare="common" name="rec_q_eight" /><Value compare="common" name="rec_q_eight_eight_triplet" /><Value compare="common" name="rec_q_eight_triplet" /><Value compare="common" name="rec_q_no_q" /><Value compare="common" name="rec_q_quarter" /><Value compare="common" name="rec_q_sixtenth" /><Value compare="common" name="rec_q_sixtenth_sixtenth_triplet" /><Value compare="common" name="rec_q_sixtenth_triplet" /><Value compare="added" name="rec_q_thirtysecond" /></Class><Class compare="added" name="SessionRecordStatus"><Value name="off" /><Value name="on" /><Value name="transition" /></Class><Class compare="common" name="SmptTime"><Doc type="Description">Represents a Time, split into Hours, Minutes, Seconds and Frames.The frame type must be specified when calling a function that returnsa SmptTime.</Doc><Property compare="common" name="frames" /><Property compare="common" name="hours" /><Property compare="common" name="minutes" /><Property compare="common" name="seconds" /></Class><Class compare="added changed common" name="Song"><Doc type="Description">This class represents a Live set.</Doc><Class compare="common" name="View"><Doc type="Description">Representing the view aspects of a Live document: The Session and Arrangerview.</Doc><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the song view.</Doc></Property><Property compare="common" name="detail_clip"><Doc type="Description">Get/Set the Clip that is currently visible in Lives Detailview.</Doc></Property><Method compare="common" name="add_detail_clip_listener()"><Doc type="Format">add_detail_clip_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_detail_clip_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_detail_clip_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “detail_clip” has changed. </Doc></Method><Method compare="common" name="detail_clip_has_listener()"><Doc type="Format">detail_clip_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool detail_clip_has_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool detail_clip_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “detail_clip”. </Doc></Method><Method compare="common" name="remove_detail_clip_listener()"><Doc type="Format">remove_detail_clip_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_detail_clip_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_detail_clip_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “detail_clip”. </Doc></Method><Property compare="common" name="draw_mode"><Doc type="Description">Get/Set if the Envelope/Note draw mode is enabled.</Doc></Property><Method compare="common" name="add_draw_mode_listener()"><Doc type="Format">add_draw_mode_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_draw_mode_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_draw_mode_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “draw_mode” has changed. </Doc></Method><Method compare="common" name="draw_mode_has_listener()"><Doc type="Format">draw_mode_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool draw_mode_has_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool draw_mode_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “draw_mode”. </Doc></Method><Method compare="common" name="remove_draw_mode_listener()"><Doc type="Format">remove_draw_mode_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_draw_mode_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_draw_mode_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “draw_mode”. </Doc></Method><Property compare="common" name="follow_song"><Doc type="Description">Get/Set if the Arrangerview should scroll to show the playmarker.</Doc></Property><Method compare="common" name="add_follow_song_listener()"><Doc type="Format">add_follow_song_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_follow_song_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_follow_song_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “follow_song” has changed. </Doc></Method><Method compare="common" name="follow_song_has_listener()"><Doc type="Format">follow_song_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool follow_song_has_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool follow_song_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “follow_song”. </Doc></Method><Method compare="common" name="remove_follow_song_listener()"><Doc type="Format">remove_follow_song_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_follow_song_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_follow_song_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “follow_song”. </Doc></Method><Property compare="common" name="highlighted_clip_slot"><Doc type="Description">Get/Set the clip slot, defined via the highlighted track and scene in the Session.Will be None for Master- and Sendtracks.</Doc></Property><Method compare="common" name="select_device()"><Doc type="Format">select_device( (View)arg1, (Device)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void select_device(class TPyViewData&lt;class ASong&gt;, class TPyHandle&lt;class ADevice&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void select_device(TPyViewData&lt;ASong&gt;, TPyHandle&lt;ADevice&gt;)</Doc><Doc type="Description">Select the given device. </Doc></Method><Property compare="common" name="selected_parameter"><Doc type="Description">Get the currently selected device parameter.</Doc></Property><Method compare="common" name="add_selected_parameter_listener()"><Doc type="Format">add_selected_parameter_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_selected_parameter_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_selected_parameter_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_parameter” has changed. </Doc></Method><Method compare="common" name="remove_selected_parameter_listener()"><Doc type="Format">remove_selected_parameter_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_selected_parameter_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_selected_parameter_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_parameter”. </Doc></Method><Method compare="common" name="selected_parameter_has_listener()"><Doc type="Format">selected_parameter_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool selected_parameter_has_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool selected_parameter_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_parameter”. </Doc></Method><Property compare="common" name="selected_scene"><Doc type="Description">Get/Set the current selected scene in Lives Sessionview.</Doc></Property><Method compare="common" name="add_selected_scene_listener()"><Doc type="Format">add_selected_scene_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_selected_scene_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_selected_scene_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_scene” has changed. </Doc></Method><Method compare="common" name="remove_selected_scene_listener()"><Doc type="Format">remove_selected_scene_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_selected_scene_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_selected_scene_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_scene”. </Doc></Method><Method compare="common" name="selected_scene_has_listener()"><Doc type="Format">selected_scene_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool selected_scene_has_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool selected_scene_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_scene”. </Doc></Method><Property compare="common" name="selected_track"><Doc type="Description">Get/Set the current selected Track in Lives Session or Arrangerview.</Doc></Property><Method compare="common" name="add_selected_track_listener()"><Doc type="Format">add_selected_track_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_selected_track_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_selected_track_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_track” has changed. </Doc></Method><Method compare="common" name="remove_selected_track_listener()"><Doc type="Format">remove_selected_track_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_selected_track_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_selected_track_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_track”. </Doc></Method><Method compare="common" name="selected_track_has_listener()"><Doc type="Format">selected_track_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool selected_track_has_listener(class TPyViewData&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool selected_track_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_track”. </Doc></Method></Class><Property compare="common" name="appointed_device"><Doc type="Description">Access to the selected Device</Doc></Property><Method compare="common" name="add_appointed_device_listener()"><Doc type="Format">add_appointed_device_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_appointed_device_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_appointed_device_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “appointed_device” has changed. </Doc></Method><Method compare="common" name="appointed_device_has_listener()"><Doc type="Format">appointed_device_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool appointed_device_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool appointed_device_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “appointed_device”. </Doc></Method><Method compare="common" name="remove_appointed_device_listener()"><Doc type="Format">remove_appointed_device_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_appointed_device_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_appointed_device_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “appointed_device”. </Doc></Method><Property compare="added" name="arrangement_overdub"><Doc type="Description">Get/Set the global arrangement overdub state.</Doc></Property><Method compare="added" name="add_arrangement_overdub_listener()"><Doc type="Format">add_arrangement_overdub_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_arrangement_overdub_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “arrangement_overdub” has changed. </Doc></Method><Method compare="added" name="arrangement_overdub_has_listener()"><Doc type="Format">arrangement_overdub_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool arrangement_overdub_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “arrangement_overdub”. </Doc></Method><Method compare="added" name="remove_arrangement_overdub_listener()"><Doc type="Format">remove_arrangement_overdub_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_arrangement_overdub_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “arrangement_overdub”. </Doc></Method><Property compare="common" name="back_to_arranger"><Doc type="Description">Get/Set if triggering a Clip in the Session, disabled the playback ofClips in the Arranger.</Doc></Property><Method compare="common" name="add_back_to_arranger_listener()"><Doc type="Format">add_back_to_arranger_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_back_to_arranger_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_back_to_arranger_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “back_to_arranger” has changed. </Doc></Method><Method compare="common" name="back_to_arranger_has_listener()"><Doc type="Format">back_to_arranger_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool back_to_arranger_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool back_to_arranger_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “back_to_arranger”. </Doc></Method><Method compare="common" name="remove_back_to_arranger_listener()"><Doc type="Format">remove_back_to_arranger_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_back_to_arranger_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_back_to_arranger_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “back_to_arranger”. </Doc></Method><Method compare="added" name="begin_undo_step()"><Doc type="Format">begin_undo_step( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void begin_undo_step(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description" /></Method><Property compare="common" name="can_jump_to_next_cue"><Doc type="Description">Returns true when there is a cue marker right to the playing pos thatwe could jump to.</Doc></Property><Method compare="common" name="add_can_jump_to_next_cue_listener()"><Doc type="Format">add_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_can_jump_to_next_cue_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_can_jump_to_next_cue_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “can_jump_to_next_cue” has changed. </Doc></Method><Method compare="common" name="can_jump_to_next_cue_has_listener()"><Doc type="Format">can_jump_to_next_cue_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool can_jump_to_next_cue_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool can_jump_to_next_cue_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “can_jump_to_next_cue”. </Doc></Method><Method compare="common" name="remove_can_jump_to_next_cue_listener()"><Doc type="Format">remove_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_can_jump_to_next_cue_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_can_jump_to_next_cue_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “can_jump_to_next_cue”. </Doc></Method><Property compare="common" name="can_jump_to_prev_cue"><Doc type="Description">Returns true when there is a cue marker left to the playing pos thatwe could jump to.</Doc></Property><Method compare="common" name="add_can_jump_to_prev_cue_listener()"><Doc type="Format">add_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_can_jump_to_prev_cue_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_can_jump_to_prev_cue_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “can_jump_to_prev_cue” has changed. </Doc></Method><Method compare="common" name="can_jump_to_prev_cue_has_listener()"><Doc type="Format">can_jump_to_prev_cue_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool can_jump_to_prev_cue_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool can_jump_to_prev_cue_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “can_jump_to_prev_cue”. </Doc></Method><Method compare="common" name="remove_can_jump_to_prev_cue_listener()"><Doc type="Format">remove_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_can_jump_to_prev_cue_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_can_jump_to_prev_cue_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “can_jump_to_prev_cue”. </Doc></Method><Property compare="common" name="can_redo"><Doc type="Description">Returns true if there is an undone action that we can redo.</Doc></Property><Property compare="common" name="can_undo"><Doc type="Description">Returns true if there is an action that we can restore.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the song.</Doc></Property><Method compare="added" name="capture_and_insert_scene()"><Doc type="Format">capture_and_insert_scene( (Song)arg1 [, (int)CaptureMode=Song.CaptureMode.all]) → None</Doc><Doc type="Cpp-Signature">void capture_and_insert_scene(TPyHandle&lt;ASong&gt; [, int=Song.CaptureMode.all])</Doc><Doc type="Description">Capture currently playing clips and insert them as a new scene after the selected scene. Raises a runtime error if creating a new scene would exceed the limitations. </Doc></Method><Property compare="common" name="clip_trigger_quantization"><Doc type="Description">Get/Set access to the quantization settings that are used to fireClips in the Session.</Doc></Property><Method compare="common" name="add_clip_trigger_quantization_listener()"><Doc type="Format">add_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_clip_trigger_quantization_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_clip_trigger_quantization_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “clip_trigger_quantization” has changed. </Doc></Method><Method compare="common" name="clip_trigger_quantization_has_listener()"><Doc type="Format">clip_trigger_quantization_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool clip_trigger_quantization_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool clip_trigger_quantization_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “clip_trigger_quantization”. </Doc></Method><Method compare="common" name="remove_clip_trigger_quantization_listener()"><Doc type="Format">remove_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_clip_trigger_quantization_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_clip_trigger_quantization_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “clip_trigger_quantization”. </Doc></Method><Method compare="common" name="continue_playing()"><Doc type="Format">continue_playing( (Song)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void continue_playing(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void continue_playing(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Continue playing the song from the current position </Doc></Method><Method compare="added" name="create_audio_track()"><Doc type="Format">create_audio_track( (Song)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void create_audio_track(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Create a new audio track at the given index. If the index is -1, the new track is added at the end. It will create a default audio track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised. </Doc></Method><Method compare="added" name="create_midi_track()"><Doc type="Format">create_midi_track( (Song)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void create_midi_track(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Create a new midi track at the given index. If the index is -1, the new track is added at the end. It will create a default midi track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised. </Doc></Method><Method compare="added" name="create_return_track()"><Doc type="Format">create_return_track( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void create_return_track(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Create a new return track at the end. If the new track would exceed  the limitations, a limitation error is raised. </Doc></Method><Method compare="added" name="create_scene()"><Doc type="Format">create_scene( (Song)arg1, (int)arg2) → Scene</Doc><Doc type="Cpp-Signature">TWeakPtr&lt;TPyHandle&lt;AScene&gt; &gt; create_scene(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Create a new scene at the given index. If the index is -1, the new scene is added at the end. If the index is invalid or the new scene would exceed the limitations, a limitation error is raised. </Doc></Method><Property compare="common" name="cue_points"><Doc type="Description">Const access to a list of all cue points of the Live Song.</Doc></Property><Method compare="common" name="add_cue_points_listener()"><Doc type="Format">add_cue_points_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_cue_points_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_cue_points_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “cue_points” has changed. </Doc></Method><Method compare="common" name="cue_points_has_listener()"><Doc type="Format">cue_points_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool cue_points_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool cue_points_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “cue_points”. </Doc></Method><Method compare="common" name="remove_cue_points_listener()"><Doc type="Format">remove_cue_points_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_cue_points_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_cue_points_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “cue_points”. </Doc></Method><Property compare="common" name="current_song_time"><Doc type="Description">Get/Set access to the songs current playing position in ms.</Doc></Property><Method compare="common" name="add_current_song_time_listener()"><Doc type="Format">add_current_song_time_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_current_song_time_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_current_song_time_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “current_song_time” has changed. </Doc></Method><Method compare="common" name="current_song_time_has_listener()"><Doc type="Format">current_song_time_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool current_song_time_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool current_song_time_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “current_song_time”. </Doc></Method><Method compare="common" name="remove_current_song_time_listener()"><Doc type="Format">remove_current_song_time_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_current_song_time_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_current_song_time_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “current_song_time”. </Doc></Method><Method compare="added" name="delete_scene()"><Doc type="Format">delete_scene( (Song)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void delete_scene(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Delete the scene with the given index. If no scene with this index exists, an exception will be raised. </Doc></Method><Method compare="added" name="delete_track()"><Doc type="Format">delete_track( (Song)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void delete_track(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Delete the track with the given index. If no track with this index exists, an exception will be raised. </Doc></Method><Method compare="added" name="duplicate_scene()"><Doc type="Format">duplicate_scene( (Song)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void duplicate_scene(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Duplicates a scene and selects the new one. Raises a limitation error if creating a new scene would exceed the limitations. </Doc></Method><Method compare="added" name="duplicate_track()"><Doc type="Format">duplicate_track( (Song)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void duplicate_track(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Duplicates a track and selects the new one. Raises a limitation error if creating a new track would exceed the limitations. </Doc></Method><Method compare="added" name="end_undo_step()"><Doc type="Format">end_undo_step( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void end_undo_step(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description" /></Method><Property compare="common" name="exclusive_arm"><Doc type="Description">Get if Tracks should be armed exclusively by default.</Doc></Property><Method compare="added" name="add_exclusive_arm_listener()"><Doc type="Format">add_exclusive_arm_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_exclusive_arm_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “exclusive_arm” has changed. </Doc></Method><Method compare="added" name="exclusive_arm_has_listener()"><Doc type="Format">exclusive_arm_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool exclusive_arm_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “exclusive_arm”. </Doc></Method><Method compare="added" name="remove_exclusive_arm_listener()"><Doc type="Format">remove_exclusive_arm_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_exclusive_arm_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “exclusive_arm”. </Doc></Method><Property compare="common" name="exclusive_solo"><Doc type="Description">Get if Tracks should be soloed exclusively by default.</Doc></Property><Method compare="common" name="get_beats_loop_length()"><Doc type="Format">get_beats_loop_length( (Song)arg1) → BeatTime</Doc><Doc compare="deleted changed" type="Cpp-Signature">struct NPythonSong::TBeatTime get_beats_loop_length(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">NPythonSong::TBeatTime get_beats_loop_length(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Get const access to the songs loop length, using a BeatTime class with the current global set signature. </Doc></Method><Method compare="common" name="get_beats_loop_start()"><Doc type="Format">get_beats_loop_start( (Song)arg1) → BeatTime</Doc><Doc compare="deleted changed" type="Cpp-Signature">struct NPythonSong::TBeatTime get_beats_loop_start(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">NPythonSong::TBeatTime get_beats_loop_start(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Get const access to the songs loop start, using a BeatTime class with the current global set signature. </Doc></Method><Method compare="common" name="get_current_beats_song_time()"><Doc type="Format">get_current_beats_song_time( (Song)arg1) → BeatTime</Doc><Doc compare="deleted changed" type="Cpp-Signature">struct NPythonSong::TBeatTime get_current_beats_song_time(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">NPythonSong::TBeatTime get_current_beats_song_time(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Get const access to the songs current playing position, using a BeatTime class with the current global set signature. </Doc></Method><Method compare="common" name="get_current_smpte_song_time()"><Doc type="Format">get_current_smpte_song_time( (Song)arg1, (int)arg2) → SmptTime</Doc><Doc compare="deleted changed" type="Cpp-Signature">struct NPythonSong::TSmptTime get_current_smpte_song_time(class TPyHandle&lt;class ASong&gt;, long)</Doc><Doc compare="added changed" type="Cpp-Signature">NPythonSong::TSmptTime get_current_smpte_song_time(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Get const access to the songs current playing position, by specifying the SMPTE format in which you would like to receive the time. </Doc></Method><Property compare="common" name="groove_amount"><Doc type="Description">Get/Set the global groove amount, that adjust all setup groovesin all clips.</Doc></Property><Method compare="common" name="add_groove_amount_listener()"><Doc type="Format">add_groove_amount_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_groove_amount_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_groove_amount_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “groove_amount” has changed. </Doc></Method><Method compare="common" name="groove_amount_has_listener()"><Doc type="Format">groove_amount_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool groove_amount_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool groove_amount_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “groove_amount”. </Doc></Method><Method compare="common" name="remove_groove_amount_listener()"><Doc type="Format">remove_groove_amount_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_groove_amount_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_groove_amount_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “groove_amount”. </Doc></Method><Method compare="common" name="is_cue_point_selected()"><Doc type="Format">is_cue_point_selected( (Song)arg1) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool is_cue_point_selected(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">bool is_cue_point_selected(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Return true if the global playing pos is currently on a cue point. </Doc></Method><Property compare="common" name="is_playing"><Doc type="Description">Returns true if the Song is currently playing.</Doc></Property><Method compare="common" name="add_is_playing_listener()"><Doc type="Format">add_is_playing_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_is_playing_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_is_playing_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_playing” has changed. </Doc></Method><Method compare="common" name="is_playing_has_listener()"><Doc type="Format">is_playing_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool is_playing_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool is_playing_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_playing”. </Doc></Method><Method compare="common" name="remove_is_playing_listener()"><Doc type="Format">remove_is_playing_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_is_playing_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_is_playing_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_playing”. </Doc></Method><Method compare="common" name="jump_by()"><Doc type="Format">jump_by( (Song)arg1, (float)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void jump_by(class TPyHandle&lt;class ASong&gt;, double)</Doc><Doc compare="added changed" type="Cpp-Signature">void jump_by(TPyHandle&lt;ASong&gt;, double)</Doc><Doc type="Description">Set a new playing pos, relative to the current one. </Doc></Method><Method compare="common" name="jump_to_next_cue()"><Doc type="Format">jump_to_next_cue( (Song)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void jump_to_next_cue(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void jump_to_next_cue(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Jump to the next cue (marker) if possible. </Doc></Method><Method compare="common" name="jump_to_prev_cue()"><Doc type="Format">jump_to_prev_cue( (Song)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void jump_to_prev_cue(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void jump_to_prev_cue(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Jump to the prior cue (marker) if possible. </Doc></Method><Property compare="common" name="last_event_time"><Doc type="Description">Return the time of the last set event in the song. In contrary tosong_length, this will not add some extra beats that are mostly neededfor Display purposes in the Arrangerview.</Doc></Property><Property compare="common" name="loop"><Doc type="Description">Get/Set the the looping flag that en/disables the usage of the globalloop markers in the song.</Doc></Property><Method compare="common" name="add_loop_listener()"><Doc type="Format">add_loop_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_loop_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_loop_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “loop” has changed. </Doc></Method><Method compare="common" name="loop_has_listener()"><Doc type="Format">loop_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool loop_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool loop_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “loop”. </Doc></Method><Method compare="common" name="remove_loop_listener()"><Doc type="Format">remove_loop_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_loop_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_loop_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “loop”. </Doc></Method><Property compare="common" name="loop_length"><Doc type="Description">Get/Set the lenght of the global loop marker position in beats.</Doc></Property><Method compare="common" name="add_loop_length_listener()"><Doc type="Format">add_loop_length_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_loop_length_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_loop_length_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “loop_length” has changed. </Doc></Method><Method compare="common" name="loop_length_has_listener()"><Doc type="Format">loop_length_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool loop_length_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool loop_length_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “loop_length”. </Doc></Method><Method compare="common" name="remove_loop_length_listener()"><Doc type="Format">remove_loop_length_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_loop_length_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_loop_length_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “loop_length”. </Doc></Method><Property compare="common" name="loop_start"><Doc type="Description">Get/Set the start of the global loop marker position in beats.</Doc></Property><Method compare="common" name="add_loop_start_listener()"><Doc type="Format">add_loop_start_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_loop_start_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_loop_start_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “loop_start” has changed. </Doc></Method><Method compare="common" name="loop_start_has_listener()"><Doc type="Format">loop_start_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool loop_start_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool loop_start_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “loop_start”. </Doc></Method><Method compare="common" name="remove_loop_start_listener()"><Doc type="Format">remove_loop_start_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_loop_start_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_loop_start_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “loop_start”. </Doc></Method><Property compare="common" name="master_track"><Doc type="Description">Access to the Master Track (always available)</Doc></Property><Property compare="common" name="metronome"><Doc type="Description">Get/Set if the metronom is audible.</Doc></Property><Method compare="common" name="add_metronome_listener()"><Doc type="Format">add_metronome_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_metronome_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_metronome_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “metronome” has changed. </Doc></Method><Method compare="common" name="metronome_has_listener()"><Doc type="Format">metronome_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool metronome_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool metronome_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “metronome”. </Doc></Method><Method compare="common" name="remove_metronome_listener()"><Doc type="Format">remove_metronome_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_metronome_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_metronome_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “metronome”. </Doc></Method><Property compare="common" name="midi_recording_quantization"><Doc type="Description">Get/Set access to the settings that are used to quantizeMIDI recordings.</Doc></Property><Method compare="common" name="add_midi_recording_quantization_listener()"><Doc type="Format">add_midi_recording_quantization_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_midi_recording_quantization_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_midi_recording_quantization_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “midi_recording_quantization” has changed. </Doc></Method><Method compare="common" name="midi_recording_quantization_has_listener()"><Doc type="Format">midi_recording_quantization_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool midi_recording_quantization_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool midi_recording_quantization_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “midi_recording_quantization”. </Doc></Method><Method compare="common" name="remove_midi_recording_quantization_listener()"><Doc type="Format">remove_midi_recording_quantization_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_midi_recording_quantization_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_midi_recording_quantization_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “midi_recording_quantization”. </Doc></Method><Property compare="common" name="nudge_down"><Doc type="Description">Get/Set the status of the nudge down button.</Doc></Property><Method compare="common" name="add_nudge_down_listener()"><Doc type="Format">add_nudge_down_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_nudge_down_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_nudge_down_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “nudge_down” has changed. </Doc></Method><Method compare="common" name="nudge_down_has_listener()"><Doc type="Format">nudge_down_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool nudge_down_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool nudge_down_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “nudge_down”. </Doc></Method><Method compare="common" name="remove_nudge_down_listener()"><Doc type="Format">remove_nudge_down_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_nudge_down_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_nudge_down_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “nudge_down”. </Doc></Method><Property compare="common" name="nudge_up"><Doc type="Description">Get/Set the status of the nudge up button.</Doc></Property><Method compare="common" name="add_nudge_up_listener()"><Doc type="Format">add_nudge_up_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_nudge_up_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_nudge_up_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “nudge_up” has changed. </Doc></Method><Method compare="common" name="nudge_up_has_listener()"><Doc type="Format">nudge_up_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool nudge_up_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool nudge_up_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “nudge_up”. </Doc></Method><Method compare="common" name="remove_nudge_up_listener()"><Doc type="Format">remove_nudge_up_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_nudge_up_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_nudge_up_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “nudge_up”. </Doc></Method><Property compare="changed common" name="overdub"><Doc compare="deleted changed" type="Description">Get/Set the global overdub/replace state.</Doc><Doc compare="added changed" type="Description">Legacy hook for Live 8 overdub state. Now hooks tosession record.</Doc></Property><Method compare="common" name="add_overdub_listener()"><Doc type="Format">add_overdub_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_overdub_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_overdub_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “overdub” has changed. </Doc></Method><Method compare="common" name="overdub_has_listener()"><Doc type="Format">overdub_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool overdub_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool overdub_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “overdub”. </Doc></Method><Method compare="common" name="remove_overdub_listener()"><Doc type="Format">remove_overdub_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_overdub_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_overdub_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “overdub”. </Doc></Method><Method compare="common" name="play_selection()"><Doc type="Format">play_selection( (Song)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void play_selection(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void play_selection(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Start playing the current set selection, or do nothing if no selection is set. </Doc></Method><Property compare="common" name="punch_in"><Doc type="Description">Get/Set the flag that will enable recording as soon as the Song playsand hits the global loop start region.</Doc></Property><Method compare="common" name="add_punch_in_listener()"><Doc type="Format">add_punch_in_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_punch_in_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_punch_in_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “punch_in” has changed. </Doc></Method><Method compare="common" name="punch_in_has_listener()"><Doc type="Format">punch_in_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool punch_in_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool punch_in_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “punch_in”. </Doc></Method><Method compare="common" name="remove_punch_in_listener()"><Doc type="Format">remove_punch_in_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_punch_in_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_punch_in_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “punch_in”. </Doc></Method><Property compare="common" name="punch_out"><Doc type="Description">Get/Set the flag that will disable recording as soon as the Song playsand hits the global loop end region.</Doc></Property><Method compare="common" name="add_punch_out_listener()"><Doc type="Format">add_punch_out_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_punch_out_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_punch_out_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “punch_out” has changed. </Doc></Method><Method compare="common" name="punch_out_has_listener()"><Doc type="Format">punch_out_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool punch_out_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool punch_out_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “punch_out”. </Doc></Method><Method compare="common" name="remove_punch_out_listener()"><Doc type="Format">remove_punch_out_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_punch_out_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_punch_out_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “punch_out”. </Doc></Method><Method compare="added" name="re_enable_automation()"><Doc type="Format">re_enable_automation( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void re_enable_automation(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Discards overrides of automated parameters. </Doc></Method><Property compare="added" name="re_enable_automation_enabled"><Doc type="Description">Returns true if some automated parameter has been overriden</Doc></Property><Method compare="added" name="add_re_enable_automation_enabled_listener()"><Doc type="Format">add_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_re_enable_automation_enabled_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “re_enable_automation_enabled” has changed. </Doc></Method><Method compare="added" name="re_enable_automation_enabled_has_listener()"><Doc type="Format">re_enable_automation_enabled_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool re_enable_automation_enabled_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “re_enable_automation_enabled”. </Doc></Method><Method compare="added" name="remove_re_enable_automation_enabled_listener()"><Doc type="Format">remove_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_re_enable_automation_enabled_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “re_enable_automation_enabled”. </Doc></Method><Property compare="common" name="record_mode"><Doc type="Description">Get/Set the state of the global recording flag.</Doc></Property><Method compare="common" name="add_record_mode_listener()"><Doc type="Format">add_record_mode_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_record_mode_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_record_mode_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “record_mode” has changed. </Doc></Method><Method compare="common" name="record_mode_has_listener()"><Doc type="Format">record_mode_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool record_mode_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool record_mode_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “record_mode”. </Doc></Method><Method compare="common" name="remove_record_mode_listener()"><Doc type="Format">remove_record_mode_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_record_mode_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_record_mode_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “record_mode”. </Doc></Method><Method compare="common" name="redo()"><Doc type="Format">redo( (Song)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void redo(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void redo(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Redo the last action that was undone. </Doc></Method><Property compare="common" name="return_tracks"><Doc type="Description">Const access to the list of available Return Tracks.</Doc></Property><Method compare="common" name="add_return_tracks_listener()"><Doc type="Format">add_return_tracks_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_return_tracks_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_return_tracks_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “return_tracks” has changed. </Doc></Method><Method compare="common" name="remove_return_tracks_listener()"><Doc type="Format">remove_return_tracks_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_return_tracks_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_return_tracks_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “return_tracks”. </Doc></Method><Method compare="common" name="return_tracks_has_listener()"><Doc type="Format">return_tracks_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool return_tracks_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool return_tracks_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “return_tracks”. </Doc></Method><Property compare="common" name="scenes"><Doc type="Description">Const access to a list of all Scenes in the Live Song.</Doc></Property><Method compare="common" name="add_scenes_listener()"><Doc type="Format">add_scenes_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_scenes_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_scenes_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “scenes” has changed. </Doc></Method><Method compare="common" name="remove_scenes_listener()"><Doc type="Format">remove_scenes_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_scenes_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_scenes_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “scenes”. </Doc></Method><Method compare="common" name="scenes_has_listener()"><Doc type="Format">scenes_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool scenes_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool scenes_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “scenes”. </Doc></Method><Method compare="common" name="scrub_by()"><Doc type="Format">scrub_by( (Song)arg1, (float)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void scrub_by(class TPyHandle&lt;class ASong&gt;, double)</Doc><Doc compare="added changed" type="Cpp-Signature">void scrub_by(TPyHandle&lt;ASong&gt;, double)</Doc><Doc type="Description">Same as jump_by, but does not stop playback. </Doc></Method><Property compare="common" name="select_on_launch"><Doc type="Description">Get if Scenes and Clips should be selected when fired.</Doc></Property><Property compare="added" name="session_automation_record"><Doc type="Description">Returns true if automation recording is enabled.</Doc></Property><Method compare="added" name="add_session_automation_record_listener()"><Doc type="Format">add_session_automation_record_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_session_automation_record_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “session_automation_record” has changed. </Doc></Method><Method compare="added" name="remove_session_automation_record_listener()"><Doc type="Format">remove_session_automation_record_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_session_automation_record_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “session_automation_record”. </Doc></Method><Method compare="added" name="session_automation_record_has_listener()"><Doc type="Format">session_automation_record_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool session_automation_record_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “session_automation_record”. </Doc></Method><Property compare="added" name="session_record"><Doc type="Description">Get/Set the session record state.</Doc></Property><Method compare="added" name="add_session_record_listener()"><Doc type="Format">add_session_record_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_session_record_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “session_record” has changed. </Doc></Method><Method compare="added" name="remove_session_record_listener()"><Doc type="Format">remove_session_record_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_session_record_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “session_record”. </Doc></Method><Method compare="added" name="session_record_has_listener()"><Doc type="Format">session_record_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool session_record_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “session_record”. </Doc></Method><Property compare="added" name="session_record_status"><Doc type="Description">Get the session slot-recording state.</Doc></Property><Method compare="added" name="add_session_record_status_listener()"><Doc type="Format">add_session_record_status_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_session_record_status_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “session_record_status” has changed. </Doc></Method><Method compare="added" name="remove_session_record_status_listener()"><Doc type="Format">remove_session_record_status_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_session_record_status_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “session_record_status”. </Doc></Method><Method compare="added" name="session_record_status_has_listener()"><Doc type="Format">session_record_status_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool session_record_status_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “session_record_status”. </Doc></Method><Method compare="common" name="set_or_delete_cue()"><Doc type="Format">set_or_delete_cue( (Song)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void set_or_delete_cue(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void set_or_delete_cue(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">When a cue is selected, it gets deleted. If no cue is selected, a new cue is created at the current global songtime. </Doc></Method><Property compare="common" name="signature_denominator"><Doc type="Description">Get/Set access to the global signature denominator of the Song.</Doc></Property><Method compare="common" name="add_signature_denominator_listener()"><Doc type="Format">add_signature_denominator_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_signature_denominator_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_signature_denominator_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “signature_denominator” has changed. </Doc></Method><Method compare="common" name="remove_signature_denominator_listener()"><Doc type="Format">remove_signature_denominator_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_signature_denominator_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_signature_denominator_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “signature_denominator”. </Doc></Method><Method compare="common" name="signature_denominator_has_listener()"><Doc type="Format">signature_denominator_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool signature_denominator_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool signature_denominator_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “signature_denominator”. </Doc></Method><Property compare="common" name="signature_numerator"><Doc type="Description">Get/Set access to the global signature numerator of the Song.</Doc></Property><Method compare="common" name="add_signature_numerator_listener()"><Doc type="Format">add_signature_numerator_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_signature_numerator_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_signature_numerator_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “signature_numerator” has changed. </Doc></Method><Method compare="common" name="remove_signature_numerator_listener()"><Doc type="Format">remove_signature_numerator_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_signature_numerator_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_signature_numerator_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “signature_numerator”. </Doc></Method><Method compare="common" name="signature_numerator_has_listener()"><Doc type="Format">signature_numerator_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool signature_numerator_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool signature_numerator_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “signature_numerator”. </Doc></Method><Property compare="common" name="song_length"><Doc type="Description">Return the time of the last set event in the song, plus som extra beatsthat are usually added for better navigation in the arrangerview.</Doc></Property><Method compare="common" name="add_song_length_listener()"><Doc type="Format">add_song_length_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_song_length_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_song_length_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “song_length” has changed. </Doc></Method><Method compare="common" name="remove_song_length_listener()"><Doc type="Format">remove_song_length_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_song_length_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_song_length_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “song_length”. </Doc></Method><Method compare="common" name="song_length_has_listener()"><Doc type="Format">song_length_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool song_length_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool song_length_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “song_length”. </Doc></Method><Method compare="common" name="start_playing()"><Doc type="Format">start_playing( (Song)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void start_playing(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void start_playing(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Start playing from the startmarker </Doc></Method><Method compare="changed common" name="stop_all_clips()"><Doc compare="deleted changed" type="Format">stop_all_clips( (Song)arg1) → None</Doc><Doc compare="added changed" type="Format">stop_all_clips( (Song)arg1 [, (bool)Quantized=True]) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void stop_all_clips(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void stop_all_clips(TPyHandle&lt;ASong&gt; [, bool=True])</Doc><Doc type="Description">Stop all playing Clips (if any) but continue playing the Song. </Doc></Method><Method compare="common" name="stop_playing()"><Doc type="Format">stop_playing( (Song)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void stop_playing(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void stop_playing(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Stop playing the Song. </Doc></Method><Property compare="added" name="swing_amount"><Doc type="Description">Get/Set access to the amount of swing that is applied when adding or quantizing notes to MIDI clips</Doc></Property><Method compare="added" name="add_swing_amount_listener()"><Doc type="Format">add_swing_amount_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_swing_amount_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “swing_amount” has changed. </Doc></Method><Method compare="added" name="remove_swing_amount_listener()"><Doc type="Format">remove_swing_amount_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_swing_amount_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “swing_amount”. </Doc></Method><Method compare="added" name="swing_amount_has_listener()"><Doc type="Format">swing_amount_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool swing_amount_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “swing_amount”. </Doc></Method><Method compare="common" name="tap_tempo()"><Doc type="Format">tap_tempo( (Song)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void tap_tempo(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void tap_tempo(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Trigger the tap tempo function. </Doc></Method><Property compare="common" name="tempo"><Doc type="Description">Get/Set the global project tempo.</Doc></Property><Method compare="common" name="add_tempo_listener()"><Doc type="Format">add_tempo_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_tempo_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_tempo_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “tempo” has changed. </Doc></Method><Method compare="common" name="remove_tempo_listener()"><Doc type="Format">remove_tempo_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_tempo_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_tempo_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “tempo”. </Doc></Method><Method compare="common" name="tempo_has_listener()"><Doc type="Format">tempo_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool tempo_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool tempo_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “tempo”. </Doc></Method><Property compare="common" name="tracks"><Doc type="Description">Const access to a list of all Player Tracks in the Live Song, exludingthe return and Master Track (see also Song.send_tracks and Song.master_track).At least one MIDI or Audio Track is always available.</Doc></Property><Method compare="common" name="add_tracks_listener()"><Doc type="Format">add_tracks_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_tracks_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_tracks_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “tracks” has changed. </Doc></Method><Method compare="common" name="remove_tracks_listener()"><Doc type="Format">remove_tracks_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_tracks_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_tracks_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “tracks”. </Doc></Method><Method compare="common" name="tracks_has_listener()"><Doc type="Format">tracks_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool tracks_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool tracks_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “tracks”. </Doc></Method><Method compare="added" name="trigger_session_record()"><Doc type="Format">trigger_session_record( (Song)self [, (float)record_length=1.7976931348623157e+308]) → None</Doc><Doc type="Cpp-Signature">void trigger_session_record(TPyHandle&lt;ASong&gt; [, double=1.7976931348623157e+308])</Doc><Doc type="Description">Triggers a new session recording. </Doc></Method><Method compare="common" name="undo()"><Doc type="Format">undo( (Song)arg1) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void undo(class TPyHandle&lt;class ASong&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">void undo(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Undo the last action that was made. </Doc></Method><Property compare="common" name="view"><Doc type="Description">Representing the view aspects of a Live document: The Session and Arrangerview.</Doc></Property><Property compare="common" name="visible_tracks"><Doc type="Description">Const access to a list of all visible Player Tracks in the Live Song, exludingthe return and Master Track (see also Song.send_tracks and Song.master_track).At least one MIDI or Audio Track is always available.</Doc></Property><Method compare="common" name="add_visible_tracks_listener()"><Doc type="Format">add_visible_tracks_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_visible_tracks_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_visible_tracks_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “visible_tracks” has changed. </Doc></Method><Method compare="common" name="remove_visible_tracks_listener()"><Doc type="Format">remove_visible_tracks_listener( (Song)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_visible_tracks_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_visible_tracks_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “visible_tracks”. </Doc></Method><Method compare="common" name="visible_tracks_has_listener()"><Doc type="Format">visible_tracks_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool visible_tracks_has_listener(class TPyHandle&lt;class ASong&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool visible_tracks_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “visible_tracks”. </Doc></Method></Class><Class compare="common" name="TimeFormat"><Value compare="common" name="ms_time" /><Value compare="common" name="smpte_24" /><Value compare="common" name="smpte_25" /><Value compare="common" name="smpte_29" /><Value compare="common" name="smpte_30" /><Value compare="common" name="smpte_30_drop" /></Class></Module><Module compare="common" name="String" /><Module compare="added changed common" name="Track"><Class compare="common" name="DeviceContainer"><Doc type="Description">This class is a common super class of Track and Chain</Doc></Class><Class compare="added" name="DeviceInsertMode"><Value name="count" /><Value name="default" /><Value name="selected_left" /><Value name="selected_right" /></Class><Class compare="added changed common" name="Track"><Doc type="Description">This class represents a track in Live. It can be either an Audio track, a MIDI Track, a Return Track or the Master track. The Master Track and at least one Audio or MIDI track will be always present.Return Tracks are optional.</Doc><Class compare="added changed common" name="View"><Doc type="Description">Representing the view aspects of a Track.</Doc><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the track view.</Doc></Property><Property compare="added" name="device_insert_mode"><Doc type="Description">Get/Listen the device insertion mode of the track.  By default, it will insert devices at the end, but it can be changed to make it relative to current selection.</Doc></Property><Method compare="added" name="add_device_insert_mode_listener()"><Doc type="Format">add_device_insert_mode_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_device_insert_mode_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “device_insert_mode” has changed. </Doc></Method><Method compare="added" name="device_insert_mode_has_listener()"><Doc type="Format">device_insert_mode_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool device_insert_mode_has_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “device_insert_mode”. </Doc></Method><Method compare="added" name="remove_device_insert_mode_listener()"><Doc type="Format">remove_device_insert_mode_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_device_insert_mode_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “device_insert_mode”. </Doc></Method><Property compare="common" name="is_collapsed"><Doc type="Description">Get/Set/Listen if the track is shown collapsed in the arranger view.</Doc></Property><Method compare="common" name="add_is_collapsed_listener()"><Doc type="Format">add_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_is_collapsed_listener(class TPyViewData&lt;class ATrack&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_is_collapsed_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_collapsed” has changed. </Doc></Method><Method compare="common" name="is_collapsed_has_listener()"><Doc type="Format">is_collapsed_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool is_collapsed_has_listener(class TPyViewData&lt;class ATrack&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool is_collapsed_has_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_collapsed”. </Doc></Method><Method compare="common" name="remove_is_collapsed_listener()"><Doc type="Format">remove_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_is_collapsed_listener(class TPyViewData&lt;class ATrack&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_is_collapsed_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_collapsed”. </Doc></Method><Method compare="common" name="select_instrument()"><Doc type="Format">select_instrument( (View)arg1) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool select_instrument(class TPyViewData&lt;class ATrack&gt;)</Doc><Doc compare="added changed" type="Cpp-Signature">bool select_instrument(TPyViewData&lt;ATrack&gt;)</Doc><Doc type="Description">Selects the track’s instrument if it has one. </Doc></Method><Property compare="changed common" name="selected_device"><Doc compare="deleted changed" type="Description">Get/Listen to the current selected device in the track. In case of a multi/group selection, this will return the first selected device.</Doc><Doc compare="added changed" type="Description">Get/Set/Listen the insertion mode of the device.  While in insertion mode, loading new devices from the browser will place devices at the selected position.</Doc></Property><Method compare="common" name="add_selected_device_listener()"><Doc type="Format">add_selected_device_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_selected_device_listener(class TPyViewData&lt;class ATrack&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_selected_device_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_device” has changed. </Doc></Method><Method compare="common" name="remove_selected_device_listener()"><Doc type="Format">remove_selected_device_listener( (View)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_selected_device_listener(class TPyViewData&lt;class ATrack&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_selected_device_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_device”. </Doc></Method><Method compare="common" name="selected_device_has_listener()"><Doc type="Format">selected_device_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool selected_device_has_listener(class TPyViewData&lt;class ATrack&gt;, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool selected_device_has_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_device”. </Doc></Method></Class><Property compare="common" name="arm"><Doc type="Description">Arm the track for recording. Not available for Master- and Send Tracks.</Doc></Property><Method compare="common" name="add_arm_listener()"><Doc type="Format">add_arm_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_arm_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_arm_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “arm” has changed. </Doc></Method><Method compare="common" name="arm_has_listener()"><Doc type="Format">arm_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool arm_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool arm_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “arm”. </Doc></Method><Method compare="common" name="remove_arm_listener()"><Doc type="Format">remove_arm_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_arm_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_arm_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “arm”. </Doc></Method><Property compare="common" name="can_be_armed"><Doc type="Description">return True, if this Track has a valid arm property. Not all trackscan be armed (for example return Tracks or the Master Tracks).</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the track.</Doc></Property><Property compare="common" name="clip_slots"><Doc type="Description">const access to the list of clipslots (see class AClipSlot) for this track.The list will be empty for the master and sendtracks.</Doc></Property><Method compare="common" name="add_clip_slots_listener()"><Doc type="Format">add_clip_slots_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_clip_slots_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_clip_slots_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “clip_slots” has changed. </Doc></Method><Method compare="common" name="clip_slots_has_listener()"><Doc type="Format">clip_slots_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool clip_slots_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool clip_slots_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “clip_slots”. </Doc></Method><Method compare="common" name="remove_clip_slots_listener()"><Doc type="Format">remove_clip_slots_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_clip_slots_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_clip_slots_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “clip_slots”. </Doc></Method><Property compare="common" name="color"><Doc type="Description">Get/set access to the color of the Track (RGB).</Doc></Property><Method compare="common" name="add_color_listener()"><Doc type="Format">add_color_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_color_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_color_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color” has changed. </Doc></Method><Method compare="common" name="color_has_listener()"><Doc type="Format">color_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool color_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool color_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color”. </Doc></Method><Method compare="common" name="remove_color_listener()"><Doc type="Format">remove_color_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_color_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_color_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color”. </Doc></Method><Property compare="common" name="current_input_routing"><Doc type="Description">Get/Set the name of the current active input routing.When setting a new routing, the new routing must be one of the available ones.</Doc></Property><Method compare="common" name="add_current_input_routing_listener()"><Doc type="Format">add_current_input_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_current_input_routing_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_current_input_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “current_input_routing” has changed. </Doc></Method><Method compare="common" name="current_input_routing_has_listener()"><Doc type="Format">current_input_routing_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool current_input_routing_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool current_input_routing_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “current_input_routing”. </Doc></Method><Method compare="common" name="remove_current_input_routing_listener()"><Doc type="Format">remove_current_input_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_current_input_routing_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_current_input_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “current_input_routing”. </Doc></Method><Property compare="common" name="current_input_sub_routing"><Doc type="Description">Get/Set the current active input sub routing.When setting a new routing, the new routing must be one of the available ones.</Doc></Property><Method compare="common" name="add_current_input_sub_routing_listener()"><Doc type="Format">add_current_input_sub_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_current_input_sub_routing_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_current_input_sub_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “current_input_sub_routing” has changed. </Doc></Method><Method compare="common" name="current_input_sub_routing_has_listener()"><Doc type="Format">current_input_sub_routing_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool current_input_sub_routing_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool current_input_sub_routing_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “current_input_sub_routing”. </Doc></Method><Method compare="common" name="remove_current_input_sub_routing_listener()"><Doc type="Format">remove_current_input_sub_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_current_input_sub_routing_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_current_input_sub_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “current_input_sub_routing”. </Doc></Method><Property compare="common" name="current_monitoring_state"><Doc type="Description">Get/Set the track’s current monitoring state.</Doc></Property><Method compare="common" name="add_current_monitoring_state_listener()"><Doc type="Format">add_current_monitoring_state_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_current_monitoring_state_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_current_monitoring_state_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “current_monitoring_state” has changed. </Doc></Method><Method compare="common" name="current_monitoring_state_has_listener()"><Doc type="Format">current_monitoring_state_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool current_monitoring_state_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool current_monitoring_state_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “current_monitoring_state”. </Doc></Method><Method compare="common" name="remove_current_monitoring_state_listener()"><Doc type="Format">remove_current_monitoring_state_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_current_monitoring_state_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_current_monitoring_state_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “current_monitoring_state”. </Doc></Method><Property compare="common" name="current_output_routing"><Doc type="Description">Get/Set the current active output routing.When setting a new routing, the new routing must be one of the available ones.</Doc></Property><Method compare="common" name="add_current_output_routing_listener()"><Doc type="Format">add_current_output_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_current_output_routing_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_current_output_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “current_output_routing” has changed. </Doc></Method><Method compare="common" name="current_output_routing_has_listener()"><Doc type="Format">current_output_routing_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool current_output_routing_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool current_output_routing_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “current_output_routing”. </Doc></Method><Method compare="common" name="remove_current_output_routing_listener()"><Doc type="Format">remove_current_output_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_current_output_routing_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_current_output_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “current_output_routing”. </Doc></Method><Property compare="common" name="current_output_sub_routing"><Doc type="Description">Get/Set the current active output sub routing.When setting a new routing, the new routing must be one of the available ones.</Doc></Property><Method compare="common" name="add_current_output_sub_routing_listener()"><Doc type="Format">add_current_output_sub_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_current_output_sub_routing_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_current_output_sub_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “current_output_sub_routing” has changed. </Doc></Method><Method compare="common" name="current_output_sub_routing_has_listener()"><Doc type="Format">current_output_sub_routing_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool current_output_sub_routing_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool current_output_sub_routing_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “current_output_sub_routing”. </Doc></Method><Method compare="common" name="remove_current_output_sub_routing_listener()"><Doc type="Format">remove_current_output_sub_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_current_output_sub_routing_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_current_output_sub_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “current_output_sub_routing”. </Doc></Method><Method compare="added" name="delete_device()"><Doc type="Format">delete_device( (Track)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void delete_device(TTrackPyHandle, int)</Doc><Doc type="Description">Delete a device identified by the index in the ‘devices’ list. </Doc></Method><Property compare="common" name="devices"><Doc type="Description">Return const access to all available Devices that are present in the TracksDevicechain. This tuple will also include the ‘mixer_device’ that every Trackalways has.</Doc></Property><Method compare="common" name="add_devices_listener()"><Doc type="Format">add_devices_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_devices_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_devices_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “devices” has changed. </Doc></Method><Method compare="common" name="devices_has_listener()"><Doc type="Format">devices_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool devices_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool devices_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “devices”. </Doc></Method><Method compare="common" name="remove_devices_listener()"><Doc type="Format">remove_devices_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_devices_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_devices_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “devices”. </Doc></Method><Method compare="added" name="duplicate_clip_slot()"><Doc type="Format">duplicate_clip_slot( (Track)arg1, (int)arg2) → int</Doc><Doc type="Cpp-Signature">int duplicate_clip_slot(TTrackPyHandle, int)</Doc><Doc type="Description">Duplicate a clip and put it into the next free slot and return the index of the destination slot. A new scene is created if no free slot is available. If creating the new scene would exceed the limitations, a runtime error is raised. </Doc></Method><Property compare="common" name="fired_slot_index"><Doc type="Description">const access to the index of the fired (and thus blinking) clipslot in this track.This index is -1 if no slot is fired and -2 if the track’s stop button has been fired.</Doc></Property><Method compare="common" name="add_fired_slot_index_listener()"><Doc type="Format">add_fired_slot_index_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_fired_slot_index_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_fired_slot_index_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “fired_slot_index” has changed. </Doc></Method><Method compare="common" name="fired_slot_index_has_listener()"><Doc type="Format">fired_slot_index_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool fired_slot_index_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool fired_slot_index_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “fired_slot_index”. </Doc></Method><Method compare="common" name="remove_fired_slot_index_listener()"><Doc type="Format">remove_fired_slot_index_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_fired_slot_index_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_fired_slot_index_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “fired_slot_index”. </Doc></Method><Property compare="common" name="fold_state"><Doc type="Description">Get/Set whether the track is folded or not. Only available if is_foldable is True.</Doc></Property><Property compare="common" name="has_audio_input"><Doc type="Description">return True, if this Track can be feed with an Audio signal. This istrue for all Audio Tracks.</Doc></Property><Method compare="common" name="add_has_audio_input_listener()"><Doc type="Format">add_has_audio_input_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_has_audio_input_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_has_audio_input_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_audio_input” has changed. </Doc></Method><Method compare="common" name="has_audio_input_has_listener()"><Doc type="Format">has_audio_input_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool has_audio_input_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool has_audio_input_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_audio_input”. </Doc></Method><Method compare="common" name="remove_has_audio_input_listener()"><Doc type="Format">remove_has_audio_input_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_has_audio_input_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_has_audio_input_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_audio_input”. </Doc></Method><Property compare="common" name="has_audio_output"><Doc type="Description">return True, if this Track sends out an Audio signal. This istrue for all Audio Tracks, and MIDI tracks with an Instrument.</Doc></Property><Method compare="common" name="add_has_audio_output_listener()"><Doc type="Format">add_has_audio_output_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_has_audio_output_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_has_audio_output_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_audio_output” has changed. </Doc></Method><Method compare="common" name="has_audio_output_has_listener()"><Doc type="Format">has_audio_output_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool has_audio_output_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool has_audio_output_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_audio_output”. </Doc></Method><Method compare="common" name="remove_has_audio_output_listener()"><Doc type="Format">remove_has_audio_output_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_has_audio_output_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_has_audio_output_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_audio_output”. </Doc></Method><Property compare="common" name="has_midi_input"><Doc type="Description">return True, if this Track can be feed with an Audio signal. This istrue for all MIDI Tracks.</Doc></Property><Method compare="common" name="add_has_midi_input_listener()"><Doc type="Format">add_has_midi_input_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_has_midi_input_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_has_midi_input_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_midi_input” has changed. </Doc></Method><Method compare="common" name="has_midi_input_has_listener()"><Doc type="Format">has_midi_input_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool has_midi_input_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool has_midi_input_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_midi_input”. </Doc></Method><Method compare="common" name="remove_has_midi_input_listener()"><Doc type="Format">remove_has_midi_input_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_has_midi_input_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_has_midi_input_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_midi_input”. </Doc></Method><Property compare="common" name="has_midi_output"><Doc type="Description">return True, if this Track sends out MIDI events. This istrue for all MIDI Tracks with no Instruments.</Doc></Property><Method compare="common" name="add_has_midi_output_listener()"><Doc type="Format">add_has_midi_output_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_has_midi_output_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_has_midi_output_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_midi_output” has changed. </Doc></Method><Method compare="common" name="has_midi_output_has_listener()"><Doc type="Format">has_midi_output_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool has_midi_output_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool has_midi_output_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_midi_output”. </Doc></Method><Method compare="common" name="remove_has_midi_output_listener()"><Doc type="Format">remove_has_midi_output_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_has_midi_output_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_has_midi_output_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_midi_output”. </Doc></Method><Property compare="added" name="implicit_arm"><Doc type="Description">Arm the track for recording. When The track is implicitly armed, it showsin a weaker color in the live GUI and is not saved in the set.</Doc></Property><Method compare="added" name="add_implicit_arm_listener()"><Doc type="Format">add_implicit_arm_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_implicit_arm_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “implicit_arm” has changed. </Doc></Method><Method compare="added" name="implicit_arm_has_listener()"><Doc type="Format">implicit_arm_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool implicit_arm_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “implicit_arm”. </Doc></Method><Method compare="added" name="remove_implicit_arm_listener()"><Doc type="Format">remove_implicit_arm_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_implicit_arm_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “implicit_arm”. </Doc></Method><Property compare="common" name="input_meter_left"><Doc type="Description">Momentary value of left input channel meter, 0.0 to 1.0. For Audio Tracks only.</Doc></Property><Method compare="common" name="add_input_meter_left_listener()"><Doc type="Format">add_input_meter_left_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_input_meter_left_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_input_meter_left_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “input_meter_left” has changed. </Doc></Method><Method compare="common" name="input_meter_left_has_listener()"><Doc type="Format">input_meter_left_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool input_meter_left_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool input_meter_left_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “input_meter_left”. </Doc></Method><Method compare="common" name="remove_input_meter_left_listener()"><Doc type="Format">remove_input_meter_left_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_input_meter_left_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_input_meter_left_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “input_meter_left”. </Doc></Method><Property compare="common" name="input_meter_level"><Doc type="Description">Return the MIDI or Audio meter value of the Tracks input, depending on thetype of the Track input. Meter values (MIDI or Audio) are always scaledfrom 0.0 to 1.0.</Doc></Property><Method compare="common" name="add_input_meter_level_listener()"><Doc type="Format">add_input_meter_level_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_input_meter_level_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_input_meter_level_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “input_meter_level” has changed. </Doc></Method><Method compare="common" name="input_meter_level_has_listener()"><Doc type="Format">input_meter_level_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool input_meter_level_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool input_meter_level_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “input_meter_level”. </Doc></Method><Method compare="common" name="remove_input_meter_level_listener()"><Doc type="Format">remove_input_meter_level_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_input_meter_level_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_input_meter_level_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “input_meter_level”. </Doc></Method><Property compare="common" name="input_meter_right"><Doc type="Description">Momentary value of right input channel meter, 0.0 to 1.0. For Audio Tracks only.</Doc></Property><Method compare="common" name="add_input_meter_right_listener()"><Doc type="Format">add_input_meter_right_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_input_meter_right_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_input_meter_right_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “input_meter_right” has changed. </Doc></Method><Method compare="common" name="input_meter_right_has_listener()"><Doc type="Format">input_meter_right_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool input_meter_right_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool input_meter_right_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “input_meter_right”. </Doc></Method><Method compare="common" name="remove_input_meter_right_listener()"><Doc type="Format">remove_input_meter_right_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_input_meter_right_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_input_meter_right_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “input_meter_right”. </Doc></Method><Property compare="common" name="input_routings"><Doc type="Description">Const access to the list of available input routings.</Doc></Property><Property compare="common" name="input_sub_routings"><Doc type="Description">Return a list of all available input sub routings.</Doc></Property><Property compare="common" name="is_foldable"><Doc type="Description">return True if the track can be (un)folded to hide/reveal contained tracks.</Doc></Property><Property compare="common" name="is_part_of_selection"><Doc type="Description">return False if the track is not selected.</Doc></Property><Property compare="common" name="is_visible"><Doc type="Description">return False if the track is hidden within a folded group track.</Doc></Property><Method compare="common" name="jump_in_running_session_clip()"><Doc type="Format">jump_in_running_session_clip( (Track)arg1, (float)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void jump_in_running_session_clip(class TTrackPyHandle, double)</Doc><Doc compare="added changed" type="Cpp-Signature">void jump_in_running_session_clip(TTrackPyHandle, double)</Doc><Doc type="Description">Jump forward or backward in the currently running Sessionclip (if any) by the specified relative amount in beats. Does nothing if no Session Clip is currently running. </Doc></Method><Property compare="common" name="mixer_device"><Doc type="Description">Return access to the special Device that every Track has: This Device containsthe Volume, Pan, Sendamounts, and Crossfade assignment parameters.</Doc></Property><Sub-Class compare="common" name="monitoring_states"><Value compare="common" name="AUTO" /><Value compare="common" name="IN" /><Value compare="common" name="OFF" /></Sub-Class><Property compare="common" name="mute"><Doc type="Description">Mute/unmute the track.</Doc></Property><Method compare="common" name="add_mute_listener()"><Doc type="Format">add_mute_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_mute_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_mute_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “mute” has changed. </Doc></Method><Method compare="common" name="mute_has_listener()"><Doc type="Format">mute_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool mute_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool mute_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “mute”. </Doc></Method><Method compare="common" name="remove_mute_listener()"><Doc type="Format">remove_mute_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_mute_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_mute_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “mute”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Read/write access to the name of the Track, as visible in the track header.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_name_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_name_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool name_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool name_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_name_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_name_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="output_meter_left"><Doc type="Description">Momentary value of left output channel meter, 0.0 to 1.0.For tracks with audio output only.</Doc></Property><Method compare="common" name="add_output_meter_left_listener()"><Doc type="Format">add_output_meter_left_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_output_meter_left_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_output_meter_left_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “output_meter_left” has changed. </Doc></Method><Method compare="common" name="output_meter_left_has_listener()"><Doc type="Format">output_meter_left_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool output_meter_left_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool output_meter_left_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “output_meter_left”. </Doc></Method><Method compare="common" name="remove_output_meter_left_listener()"><Doc type="Format">remove_output_meter_left_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_output_meter_left_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_output_meter_left_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “output_meter_left”. </Doc></Method><Property compare="common" name="output_meter_level"><Doc type="Description">Return the MIDI or Audio meter value of the Track output (behind themixer_device), depending on the type of the Track input, this can be a MIDIor Audio meter. Meter values (MIDI or Audio) are always scaled from 0.0 to 1.0.</Doc></Property><Method compare="common" name="add_output_meter_level_listener()"><Doc type="Format">add_output_meter_level_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_output_meter_level_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_output_meter_level_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “output_meter_level” has changed. </Doc></Method><Method compare="common" name="output_meter_level_has_listener()"><Doc type="Format">output_meter_level_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool output_meter_level_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool output_meter_level_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “output_meter_level”. </Doc></Method><Method compare="common" name="remove_output_meter_level_listener()"><Doc type="Format">remove_output_meter_level_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_output_meter_level_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_output_meter_level_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “output_meter_level”. </Doc></Method><Property compare="common" name="output_meter_right"><Doc type="Description">Momentary value of right output channel meter, 0.0 to 1.0.For tracks with audio output only.</Doc></Property><Method compare="common" name="add_output_meter_right_listener()"><Doc type="Format">add_output_meter_right_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_output_meter_right_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_output_meter_right_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “output_meter_right” has changed. </Doc></Method><Method compare="common" name="output_meter_right_has_listener()"><Doc type="Format">output_meter_right_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool output_meter_right_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool output_meter_right_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “output_meter_right”. </Doc></Method><Method compare="common" name="remove_output_meter_right_listener()"><Doc type="Format">remove_output_meter_right_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_output_meter_right_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_output_meter_right_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “output_meter_right”. </Doc></Method><Property compare="common" name="output_routings"><Doc type="Description">Const access to the list of all available output routings.</Doc></Property><Property compare="common" name="output_sub_routings"><Doc type="Description">Return a list of all available output sub routings.</Doc></Property><Property compare="common" name="playing_slot_index"><Doc type="Description">const access to the index of the currently playing clip in the track.Will be -1 when no clip is playing.</Doc></Property><Method compare="common" name="add_playing_slot_index_listener()"><Doc type="Format">add_playing_slot_index_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_playing_slot_index_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_playing_slot_index_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “playing_slot_index” has changed. </Doc></Method><Method compare="common" name="playing_slot_index_has_listener()"><Doc type="Format">playing_slot_index_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool playing_slot_index_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool playing_slot_index_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “playing_slot_index”. </Doc></Method><Method compare="common" name="remove_playing_slot_index_listener()"><Doc type="Format">remove_playing_slot_index_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_playing_slot_index_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_playing_slot_index_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “playing_slot_index”. </Doc></Method><Property compare="common" name="solo"><Doc type="Description">Get/Set the solo status of the track. Note that this will not disable thesolo state of any other track. If you want exclusive solo, you have to disable the solo state of the other Tracks manually.</Doc></Property><Method compare="common" name="add_solo_listener()"><Doc type="Format">add_solo_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void add_solo_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void add_solo_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “solo” has changed. </Doc></Method><Method compare="common" name="remove_solo_listener()"><Doc type="Format">remove_solo_listener( (Track)arg1, (object)arg2) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void remove_solo_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">void remove_solo_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “solo”. </Doc></Method><Method compare="common" name="solo_has_listener()"><Doc type="Format">solo_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc compare="deleted changed" type="Cpp-Signature">bool solo_has_listener(class TTrackPyHandle, class boost::python::api::object)</Doc><Doc compare="added changed" type="Cpp-Signature">bool solo_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “solo”. </Doc></Method><Method compare="changed common" name="stop_all_clips()"><Doc compare="deleted changed" type="Format">stop_all_clips( (Track)arg1) → None</Doc><Doc compare="added changed" type="Format">stop_all_clips( (Track)arg1 [, (bool)Quantized=True]) → None</Doc><Doc compare="deleted changed" type="Cpp-Signature">void stop_all_clips(class TTrackPyHandle)</Doc><Doc compare="added changed" type="Cpp-Signature">void stop_all_clips(TTrackPyHandle [, bool=True])</Doc><Doc type="Description">Stop running and triggered clip and slots on this track. </Doc></Method><Property compare="common" name="view"><Doc type="Description">Representing the view aspects of a Track.</Doc></Property></Class></Module></Module></LiveAPI>