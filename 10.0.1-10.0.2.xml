<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="LiveAPI.xsl"?><LiveAPI compare="common" version="10.0.1-10.0.2"><Doc type="Description">Unofficial Live API documentation generated by the “API_MakeDoc” MIDI Remote Script.</Doc><Doc type="Description">This is unofficial documentation. Please do not contact Ableton with questions or problems relating to the use of this documentation.</Doc><Module compare="common" name="Live"><Module compare="common" name="Application"><Class compare="common" name="Application"><Doc type="Description">This class represents the Live application.</Doc><Class compare="common" name="View"><Doc type="Description">This class represents the view aspects of the Live application.</Doc><Sub-Class compare="common" name="NavDirection"><Value compare="common" name="down" /><Value compare="common" name="left" /><Value compare="common" name="right" /><Value compare="common" name="up" /></Sub-Class><Property compare="common" name="_live_ptr" /><Method compare="common" name="available_main_views()"><Doc type="Format">available_main_views( (View)arg1) → StringVector</Doc><Doc type="Cpp-Signature">std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt; &gt; available_main_views(TPyViewData&lt;ASongApp&gt;)</Doc><Doc type="Description">Return a list of strings with the available subcomponent views, which is to be specified, when using the rest of this classes functions. A ‘subcomponent view’ is a main view component of a document view, like the Session view, the Arranger or Detailview and so on… </Doc></Method><Property compare="common" name="browse_mode"><Doc type="Description">Return true if HotSwap mode is active for any target.</Doc></Property><Method compare="common" name="add_browse_mode_listener()"><Doc type="Format">add_browse_mode_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_browse_mode_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “browse_mode” has changed. </Doc></Method><Method compare="common" name="browse_mode_has_listener()"><Doc type="Format">browse_mode_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool browse_mode_has_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “browse_mode”. </Doc></Method><Method compare="common" name="remove_browse_mode_listener()"><Doc type="Format">remove_browse_mode_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_browse_mode_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “browse_mode”. </Doc></Method><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the application view.</Doc></Property><Method compare="common" name="focus_view()"><Doc type="Format">focus_view( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void focus_view(TPyViewData&lt;ASongApp&gt;, TString)</Doc><Doc type="Description">Show and focus one through the identifier string specified view. </Doc></Method><Property compare="common" name="focused_document_view"><Doc type="Description">Return the name of the document view (‘Session’ or ‘Arranger’)shown in the currently selected window.</Doc></Property><Method compare="common" name="add_focused_document_view_listener()"><Doc type="Format">add_focused_document_view_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_focused_document_view_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “focused_document_view” has changed. </Doc></Method><Method compare="common" name="focused_document_view_has_listener()"><Doc type="Format">focused_document_view_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool focused_document_view_has_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “focused_document_view”. </Doc></Method><Method compare="common" name="remove_focused_document_view_listener()"><Doc type="Format">remove_focused_document_view_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_focused_document_view_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “focused_document_view”. </Doc></Method><Method compare="common" name="hide_view()"><Doc type="Format">hide_view( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void hide_view(TPyViewData&lt;ASongApp&gt;, TString)</Doc><Doc type="Description">Hide one through the identifier string specified view. </Doc></Method><Method compare="common" name="is_view_visible()"><Doc type="Format">is_view_visible( (View)arg1, (object)identifier [, (bool)main_window_only=True]) → bool</Doc><Doc type="Cpp-Signature">bool is_view_visible(TPyViewData&lt;ASongApp&gt;, TString [, bool=True])</Doc><Doc type="Description">Return true if the through the identifier string specified view is currently visible. If main_window_only is set to False, this will also check in second window. Notifications from the second window are not yet supported. </Doc></Method><Method compare="common" name="add_is_view_visible_listener()"><Doc type="Format">add_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) → None</Doc><Doc type="Cpp-Signature">void add_is_view_visible_listener(TPyViewData&lt;ASongApp&gt;, TString, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_view_visible” has changed. </Doc></Method><Method compare="common" name="is_view_visible_has_listener()"><Doc type="Format">is_view_visible_has_listener( (View)arg1, (object)arg2, (object)arg3) → bool</Doc><Doc type="Cpp-Signature">bool is_view_visible_has_listener(TPyViewData&lt;ASongApp&gt;, TString, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_view_visible”. </Doc></Method><Method compare="common" name="remove_is_view_visible_listener()"><Doc type="Format">remove_is_view_visible_listener( (View)arg1, (object)arg2, (object)arg3) → None</Doc><Doc type="Cpp-Signature">void remove_is_view_visible_listener(TPyViewData&lt;ASongApp&gt;, TString, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_view_visible”. </Doc></Method><Method compare="common" name="scroll_view()"><Doc type="Format">scroll_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) → None</Doc><Doc type="Cpp-Signature">void scroll_view(TPyViewData&lt;ASongApp&gt;, int, TString, bool)</Doc><Doc type="Description">Scroll through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. </Doc></Method><Method compare="common" name="show_view()"><Doc type="Format">show_view( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void show_view(TPyViewData&lt;ASongApp&gt;, TString)</Doc><Doc type="Description">Show one through the identifier string specified view. Will throw a runtime error if this is called in Live’s initialization scope. </Doc></Method><Method compare="common" name="toggle_browse()"><Doc type="Format">toggle_browse( (View)arg1) → None</Doc><Doc type="Cpp-Signature">void toggle_browse(TPyViewData&lt;ASongApp&gt;)</Doc><Doc type="Description">Reveals the device chain, the browser and starts hot swap for the selected device. Calling this function again stops hot swap. </Doc></Method><Method compare="common" name="add_view_focus_changed_listener()"><Doc type="Format">add_view_focus_changed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_view_focus_changed_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “view_focus_changed” has changed. </Doc></Method><Method compare="common" name="remove_view_focus_changed_listener()"><Doc type="Format">remove_view_focus_changed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_view_focus_changed_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “view_focus_changed”. </Doc></Method><Method compare="common" name="view_focus_changed_has_listener()"><Doc type="Format">view_focus_changed_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool view_focus_changed_has_listener(TPyViewData&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “view_focus_changed”. </Doc></Method><Method compare="common" name="zoom_view()"><Doc type="Format">zoom_view( (View)arg1, (int)arg2, (object)arg3, (bool)arg4) → None</Doc><Doc type="Cpp-Signature">void zoom_view(TPyViewData&lt;ASongApp&gt;, int, TString, bool)</Doc><Doc type="Description">Zoom through the identifier string specified view into the given direction, if possible.  Will silently return if the specified view can not perform the requested action. </Doc></Method></Class><Property compare="common" name="_live_ptr" /><Property compare="common" name="browser"><Doc type="Description">Returns an interface to the browser.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Returns the canonical parent of the application.</Doc></Property><Property compare="common" name="control_surfaces"><Doc type="Description">Const access to a list of the control surfaces selected in preferences, in the same order.The list contains None if no control surface is active at that index.</Doc></Property><Method compare="common" name="add_control_surfaces_listener()"><Doc type="Format">add_control_surfaces_listener( (Application)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_control_surfaces_listener(TPyHandle&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “control_surfaces” has changed. </Doc></Method><Method compare="common" name="control_surfaces_has_listener()"><Doc type="Format">control_surfaces_has_listener( (Application)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool control_surfaces_has_listener(TPyHandle&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “control_surfaces”. </Doc></Method><Method compare="common" name="remove_control_surfaces_listener()"><Doc type="Format">remove_control_surfaces_listener( (Application)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_control_surfaces_listener(TPyHandle&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “control_surfaces”. </Doc></Method><Property compare="common" name="current_dialog_button_count"><Doc type="Description">Number of buttons on the current dialog.</Doc></Property><Property compare="common" name="current_dialog_message"><Doc type="Description">Text of the last dialog that appeared; Empty if all dialogs just disappeared.</Doc></Property><Method compare="common" name="get_bugfix_version()"><Doc type="Format">get_bugfix_version( (Application)arg1) → int</Doc><Doc type="Cpp-Signature">int get_bugfix_version(TPyHandle&lt;ASongApp&gt;)</Doc><Doc type="Description">Returns an integer representing the bugfix version of Live. </Doc></Method><Method compare="common" name="get_document()"><Doc type="Format">get_document( (Application)arg1) → Song</Doc><Doc type="Cpp-Signature">TWeakPtr&lt;TPyHandle&lt;ASong&gt; &gt; get_document(TPyHandle&lt;ASongApp&gt;)</Doc><Doc type="Description">Returns the current Live Set. </Doc></Method><Method compare="common" name="get_major_version()"><Doc type="Format">get_major_version( (Application)arg1) → int</Doc><Doc type="Cpp-Signature">int get_major_version(TPyHandle&lt;ASongApp&gt;)</Doc><Doc type="Description">Returns an integer representing the major version of Live. </Doc></Method><Method compare="common" name="get_minor_version()"><Doc type="Format">get_minor_version( (Application)arg1) → int</Doc><Doc type="Cpp-Signature">int get_minor_version(TPyHandle&lt;ASongApp&gt;)</Doc><Doc type="Description">Returns an integer representing the minor version of Live. </Doc></Method><Method compare="common" name="has_option()"><Doc type="Format">has_option( (Application)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool has_option(TPyHandle&lt;ASongApp&gt;, TString)</Doc><Doc type="Description">Returns True if the given entry exists in Options.txt, False otherwise. </Doc></Method><Property compare="common" name="open_dialog_count"><Doc type="Description">The number of open dialogs in Live. 0 if not dialog is open.</Doc></Property><Method compare="common" name="add_open_dialog_count_listener()"><Doc type="Format">add_open_dialog_count_listener( (Application)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_open_dialog_count_listener(TPyHandle&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “open_dialog_count” has changed. </Doc></Method><Method compare="common" name="open_dialog_count_has_listener()"><Doc type="Format">open_dialog_count_has_listener( (Application)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool open_dialog_count_has_listener(TPyHandle&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “open_dialog_count”. </Doc></Method><Method compare="common" name="remove_open_dialog_count_listener()"><Doc type="Format">remove_open_dialog_count_listener( (Application)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_open_dialog_count_listener(TPyHandle&lt;ASongApp&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “open_dialog_count”. </Doc></Method><Method compare="common" name="press_current_dialog_button()"><Doc type="Format">press_current_dialog_button( (Application)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void press_current_dialog_button(TPyHandle&lt;ASongApp&gt;, int)</Doc><Doc type="Description">Press a button, by index, on the current message box. </Doc></Method><Property compare="common" name="view"><Doc type="Description">Returns the applications view component.</Doc></Property></Class><Built-In compare="common" name="combine_apcs()"><Doc type="Format">combine_apcs() → bool</Doc><Doc type="Cpp-Signature">bool combine_apcs()</Doc><Doc type="Description">Returns true if multiple APCs should be combined. </Doc></Built-In><Built-In compare="common" name="encrypt_challenge()"><Doc type="Format">encrypt_challenge( (int)dongle1, (int)dongle2 [, (int)key_index=0]) → tuple</Doc><Doc type="Cpp-Signature">boost::python::tuple encrypt_challenge(int, int [, int=0])</Doc><Doc type="Description">Returns an encrypted challenge based on the TEA algortithm </Doc></Built-In><Built-In compare="common" name="encrypt_challenge2()"><Doc type="Format">encrypt_challenge2( (int)arg1) → int</Doc><Doc type="Cpp-Signature">int encrypt_challenge2(int)</Doc><Doc type="Description">Returns the UMAC hash for the given challenge. </Doc></Built-In><Built-In compare="common" name="get_application()"><Doc type="Format">get_application() → Application</Doc><Doc type="Cpp-Signature">TWeakPtr&lt;TPyHandle&lt;ASongApp&gt; &gt; get_application()</Doc><Doc type="Description">Returns the application instance. </Doc></Built-In><Built-In compare="common" name="get_random_int()"><Doc type="Format">get_random_int( (int)arg1, (int)arg2) → int</Doc><Doc type="Cpp-Signature">int get_random_int(int, int)</Doc><Doc type="Description">Returns a random integer from the given range. </Doc></Built-In></Module><Module compare="common" name="Base"><Class compare="common" name="FloatVector"><Doc type="Description">A simple container for returning floats from Live.</Doc><Method compare="common" name="append()"><Doc type="Format">append( (FloatVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method compare="common" name="extend()"><Doc type="Format">extend( (FloatVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::__1::vector&lt;float, std::__1::allocator&lt;float&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class><Class compare="common" name="IntVector"><Doc type="Description">A simple container for returning integers from Live.</Doc><Method compare="common" name="append()"><Doc type="Format">append( (IntVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method compare="common" name="extend()"><Doc type="Format">extend( (IntVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class><Class compare="common" name="LimitationError" /><Class compare="common" name="ObjectVector"><Doc type="Description">A simple read only container for returning python objects.</Doc><Method compare="common" name="append()"><Doc type="Format">append( (ObjectVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::__1::vector&lt;boost::python::api::object, std::__1::allocator&lt;boost::python::api::object&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method compare="common" name="extend()"><Doc type="Format">extend( (ObjectVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::__1::vector&lt;boost::python::api::object, std::__1::allocator&lt;boost::python::api::object&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class><Class compare="common" name="StringVector"><Doc type="Description">A simple container for returning strings from Live.</Doc><Method compare="common" name="append()"><Doc type="Format">append( (StringVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method compare="common" name="extend()"><Doc type="Format">extend( (StringVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::__1::vector&lt;TString, std::__1::allocator&lt;TString&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class><Class compare="common" name="Timer"><Doc type="Description">A timer that will trigger a callback after a certain inverval. The timer can be repeated and will trigger the callback every interval. Errors in the callback will stop the timer.</Doc><Method compare="common" name="restart()"><Doc type="Format">restart( (Timer)arg1) → None</Doc><Doc type="Cpp-Signature">void restart(PythonTimer {lvalue})</Doc><Doc type="Description" /></Method><Property compare="common" name="running" /><Method compare="common" name="start()"><Doc type="Format">start( (Timer)arg1) → None</Doc><Doc type="Cpp-Signature">void start(PythonTimer {lvalue})</Doc><Doc type="Description" /></Method><Method compare="common" name="stop()"><Doc type="Format">stop( (Timer)arg1) → None</Doc><Doc type="Cpp-Signature">void stop(PythonTimer {lvalue})</Doc><Doc type="Description" /></Method></Class><Class compare="common" name="Vector"><Doc type="Description">A simple read only container for returning objects from Live.</Doc><Method compare="common" name="append()"><Doc type="Format">append( (Vector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method compare="common" name="extend()"><Doc type="Format">extend( (Vector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class><Built-In compare="common" name="log()"><Doc type="Format">log( (object)arg1) → None</Doc><Doc type="Cpp-Signature">void log(TString)</Doc><Doc type="Description" /></Built-In></Module><Module compare="common" name="Browser"><Class compare="common" name="Browser"><Doc type="Description">This class represents the live browser data base.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="audio_effects"><Doc type="Description">Returns a browser item with access to all the Audio Effects content.</Doc></Property><Property compare="common" name="clips"><Doc type="Description">Returns a browser item with access to all the Clips content.</Doc></Property><Property compare="common" name="colors"><Doc type="Description">Returns a list of browser items containing the configured colors.</Doc></Property><Property compare="common" name="current_project"><Doc type="Description">Returns a browser item with access to all the Current Project content.</Doc></Property><Property compare="common" name="drums"><Doc type="Description">Returns a browser item with access to all the Drums content.</Doc></Property><Property compare="common" name="filter_type"><Doc type="Description">Bang triggered when the hotswap target has changed.</Doc></Property><Method compare="common" name="add_filter_type_listener()"><Doc type="Format">add_filter_type_listener( (Browser)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_filter_type_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “filter_type” has changed. </Doc></Method><Method compare="common" name="filter_type_has_listener()"><Doc type="Format">filter_type_has_listener( (Browser)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool filter_type_has_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “filter_type”. </Doc></Method><Method compare="common" name="remove_filter_type_listener()"><Doc type="Format">remove_filter_type_listener( (Browser)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_filter_type_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “filter_type”. </Doc></Method><Method compare="common" name="add_full_refresh_listener()"><Doc type="Format">add_full_refresh_listener( (Browser)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_full_refresh_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “full_refresh” has changed. </Doc></Method><Method compare="common" name="full_refresh_has_listener()"><Doc type="Format">full_refresh_has_listener( (Browser)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool full_refresh_has_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “full_refresh”. </Doc></Method><Method compare="common" name="remove_full_refresh_listener()"><Doc type="Format">remove_full_refresh_listener( (Browser)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_full_refresh_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “full_refresh”. </Doc></Method><Property compare="common" name="hotswap_target"><Doc type="Description">Bang triggered when the hotswap target has changed.</Doc></Property><Method compare="common" name="add_hotswap_target_listener()"><Doc type="Format">add_hotswap_target_listener( (Browser)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_hotswap_target_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “hotswap_target” has changed. </Doc></Method><Method compare="common" name="hotswap_target_has_listener()"><Doc type="Format">hotswap_target_has_listener( (Browser)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool hotswap_target_has_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “hotswap_target”. </Doc></Method><Method compare="common" name="remove_hotswap_target_listener()"><Doc type="Format">remove_hotswap_target_listener( (Browser)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_hotswap_target_listener(TPyHandle&lt;ABrowserDelegate&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “hotswap_target”. </Doc></Method><Property compare="common" name="instruments"><Doc type="Description">Returns a browser item with access to all the Instruments content.</Doc></Property><Property compare="common" name="legacy_libraries"><Doc type="Description">Returns a list of browser items containing the installed legacy libraries. The list is always empty as legacy library handling has been removed.</Doc></Property><Method compare="common" name="load_item()"><Doc type="Format">load_item( (Browser)arg1, (BrowserItem)arg2) → None</Doc><Doc type="Cpp-Signature">void load_item(TPyHandle&lt;ABrowserDelegate&gt;, NPythonBrowser::TPythonBrowserItem)</Doc><Doc type="Description">Loads the provided browser item. </Doc></Method><Property compare="common" name="max_for_live"><Doc type="Description">Returns a browser item with access to all the Max For Live content.</Doc></Property><Property compare="common" name="midi_effects"><Doc type="Description">Returns a browser item with access to all the Midi Effects content.</Doc></Property><Property compare="common" name="packs"><Doc type="Description">Returns a browser item with access to all the Packs content.</Doc></Property><Property compare="common" name="plugins"><Doc type="Description">Returns a browser item with access to all the Plugins content.</Doc></Property><Method compare="common" name="preview_item()"><Doc type="Format">preview_item( (Browser)arg1, (BrowserItem)arg2) → None</Doc><Doc type="Cpp-Signature">void preview_item(TPyHandle&lt;ABrowserDelegate&gt;, NPythonBrowser::TPythonBrowserItem)</Doc><Doc type="Description">Previews the provided browser item. </Doc></Method><Method compare="common" name="relation_to_hotswap_target()"><Doc type="Format">relation_to_hotswap_target( (Browser)arg1, (BrowserItem)arg2) → Relation</Doc><Doc type="Cpp-Signature">NBrowserUri::TRelation relation_to_hotswap_target(TPyHandle&lt;ABrowserDelegate&gt;, NPythonBrowser::TPythonBrowserItem)</Doc><Doc type="Description">Returns the relation between the given browser item and the current hotswap target </Doc></Method><Property compare="common" name="samples"><Doc type="Description">Returns a browser item with access to all the Samples content.</Doc></Property><Property compare="common" name="sounds"><Doc type="Description">Returns a browser item with access to all the Sounds content.</Doc></Property><Method compare="common" name="stop_preview()"><Doc type="Format">stop_preview( (Browser)arg1) → None</Doc><Doc type="Cpp-Signature">void stop_preview(TPyHandle&lt;ABrowserDelegate&gt;)</Doc><Doc type="Description">Stop the current preview. </Doc></Method><Property compare="common" name="user_folders"><Doc type="Description">Returns a list of browser items containing all the user folders.</Doc></Property><Property compare="common" name="user_library"><Doc type="Description">Returns a browser item with access to all the User Library content.</Doc></Property></Class><Class compare="common" name="BrowserItem"><Doc type="Description">This class represents an item of the browser hierarchy.</Doc><Property compare="common" name="children"><Doc type="Description">Const access to the descendants of this browser item.</Doc></Property><Property compare="common" name="is_device"><Doc type="Description">Indicates if the browser item represents a device.</Doc></Property><Property compare="common" name="is_folder"><Doc type="Description">Indicates if the browser item represents folder.</Doc></Property><Property compare="common" name="is_loadable"><Doc type="Description">True if item can be loaded via the Browser’s ‘load_item’ method.</Doc></Property><Property compare="common" name="is_selected"><Doc type="Description">True if the item is ancestor of or the actual selection.</Doc></Property><Property compare="common" name="iter_children"><Doc type="Description">Const iterable access to the descendants of this browser item.</Doc></Property><Property compare="common" name="name"><Doc type="Description">Const access to the canonical display name of this browser item.</Doc></Property><Property compare="common" name="source"><Doc type="Description">Specifies where does item come from — i.e. Live pack, user library…</Doc></Property><Property compare="common" name="uri"><Doc type="Description">The uri describes a unique identifier for a browser item.</Doc></Property></Class><Class compare="common" name="BrowserItemIterator"><Doc type="Description">This class iterates over children of another BrowserItem.</Doc><Method compare="common" name="next()"><Doc type="Format">next( (BrowserItemIterator)arg1) → BrowserItem</Doc><Doc type="Cpp-Signature">NPythonBrowser::TPythonBrowserItem next(NPythonBrowser::TPythonBrowserItem::TPythonBrowserItemIterator {lvalue})</Doc><Doc type="Description">Retrieve next item </Doc></Method></Class><Class compare="common" name="BrowserItemVector"><Doc type="Description">A container for returning browser items from Live.</Doc><Method compare="common" name="append()"><Doc type="Format">append( (BrowserItemVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::__1::vector&lt;NPythonBrowser::TPythonBrowserItem, std::__1::allocator&lt;NPythonBrowser::TPythonBrowserItem&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method compare="common" name="extend()"><Doc type="Format">extend( (BrowserItemVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::__1::vector&lt;NPythonBrowser::TPythonBrowserItem, std::__1::allocator&lt;NPythonBrowser::TPythonBrowserItem&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class><Class compare="common" name="FilterType"><Value compare="common" name="audio_effect_hotswap" /><Value compare="common" name="count" /><Value compare="common" name="disabled" /><Value compare="common" name="drum_pad_hotswap" /><Value compare="common" name="hotswap_off" /><Value compare="common" name="instrument_hotswap" /><Value compare="common" name="midi_effect_hotswap" /><Value compare="common" name="midi_track_devices" /><Value compare="common" name="samples" /></Class><Class compare="common" name="Relation"><Value compare="common" name="ancestor" /><Value compare="common" name="descendant" /><Value compare="common" name="equal" /><Value compare="common" name="none" /></Class></Module><Module compare="common" name="Chain"><Class compare="common" name="Chain"><Doc type="Description">This class represents a group device chain in Live.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the chain.</Doc></Property><Property compare="common" name="color"><Doc type="Description">Access the color index of the Chain.</Doc></Property><Method compare="common" name="add_color_listener()"><Doc type="Format">add_color_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_color_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color” has changed. </Doc></Method><Method compare="common" name="color_has_listener()"><Doc type="Format">color_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool color_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color”. </Doc></Method><Method compare="common" name="remove_color_listener()"><Doc type="Format">remove_color_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_color_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color”. </Doc></Method><Property compare="common" name="color_index"><Doc type="Description">Access the color index of the Chain.</Doc></Property><Method compare="common" name="add_color_index_listener()"><Doc type="Format">add_color_index_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_color_index_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color_index” has changed. </Doc></Method><Method compare="common" name="color_index_has_listener()"><Doc type="Format">color_index_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool color_index_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color_index”. </Doc></Method><Method compare="common" name="remove_color_index_listener()"><Doc type="Format">remove_color_index_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_color_index_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color_index”. </Doc></Method><Method compare="common" name="delete_device()"><Doc type="Format">delete_device( (Chain)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void delete_device(TChainPyHandle, int)</Doc><Doc type="Description">Remove a device identified by its index from the chain. Throws runtime error if bad index.  </Doc></Method><Property compare="common" name="devices"><Doc type="Description">Return const access to all available Devices that are present in the chains</Doc></Property><Method compare="common" name="add_devices_listener()"><Doc type="Format">add_devices_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_devices_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “devices” has changed. </Doc></Method><Method compare="common" name="devices_has_listener()"><Doc type="Format">devices_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool devices_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “devices”. </Doc></Method><Method compare="common" name="remove_devices_listener()"><Doc type="Format">remove_devices_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_devices_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “devices”. </Doc></Method><Property compare="common" name="has_audio_input"><Doc type="Description">return True, if this Chain can be feed with an Audio signal. This istrue for all Audio Chains.</Doc></Property><Property compare="common" name="has_audio_output"><Doc type="Description">return True, if this Chain sends out an Audio signal. This istrue for all Audio Chains, and MIDI chains with an Instrument.</Doc></Property><Property compare="common" name="has_midi_input"><Doc type="Description">return True, if this Chain can be feed with an Audio signal. This istrue for all MIDI Chains.</Doc></Property><Property compare="common" name="has_midi_output"><Doc type="Description">return True, if this Chain sends out MIDI events. This istrue for all MIDI Chains with no Instruments.</Doc></Property><Property compare="common" name="is_auto_colored"><Doc type="Description">Get/set access to the auto color flag of the Chain.If True, the Chain will always have the the same color as the containingTrack or Chain.</Doc></Property><Method compare="common" name="add_is_auto_colored_listener()"><Doc type="Format">add_is_auto_colored_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_auto_colored_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_auto_colored” has changed. </Doc></Method><Method compare="common" name="is_auto_colored_has_listener()"><Doc type="Format">is_auto_colored_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_auto_colored_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_auto_colored”. </Doc></Method><Method compare="common" name="remove_is_auto_colored_listener()"><Doc type="Format">remove_is_auto_colored_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_auto_colored_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_auto_colored”. </Doc></Method><Property compare="common" name="mixer_device"><Doc type="Description">Return access to the mixer device that holds the chain’s mixer parameters:the Volume, Pan, and Sendamounts.</Doc></Property><Property compare="common" name="mute"><Doc type="Description">Mute/unmute the chain.</Doc></Property><Method compare="common" name="add_mute_listener()"><Doc type="Format">add_mute_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_mute_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “mute” has changed. </Doc></Method><Method compare="common" name="mute_has_listener()"><Doc type="Format">mute_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool mute_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “mute”. </Doc></Method><Method compare="common" name="remove_mute_listener()"><Doc type="Format">remove_mute_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_mute_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “mute”. </Doc></Method><Property compare="common" name="muted_via_solo"><Doc type="Description">Return const access to whether this chain is muted due to some other chainbeing soloed.</Doc></Property><Method compare="common" name="add_muted_via_solo_listener()"><Doc type="Format">add_muted_via_solo_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_muted_via_solo_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “muted_via_solo” has changed. </Doc></Method><Method compare="common" name="muted_via_solo_has_listener()"><Doc type="Format">muted_via_solo_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool muted_via_solo_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “muted_via_solo”. </Doc></Method><Method compare="common" name="remove_muted_via_solo_listener()"><Doc type="Format">remove_muted_via_solo_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_muted_via_solo_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “muted_via_solo”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Read/write access to the name of the Chain, as visible in the track header.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="solo"><Doc type="Description">Get/Set the solo status of the chain. Note that this will not disable thesolo state of any other Chain in the same rack. If you want exclusive solo, you have to disable the solo state of the other Chains manually.</Doc></Property><Method compare="common" name="add_solo_listener()"><Doc type="Format">add_solo_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_solo_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “solo” has changed. </Doc></Method><Method compare="common" name="remove_solo_listener()"><Doc type="Format">remove_solo_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_solo_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “solo”. </Doc></Method><Method compare="common" name="solo_has_listener()"><Doc type="Format">solo_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool solo_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “solo”. </Doc></Method></Class></Module><Module compare="common" name="DrumChain"><Class compare="common" name="DrumChain"><Doc type="Description">This class represents a drum group device chain in Live.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the chain.</Doc></Property><Property compare="common" name="choke_group"><Doc type="Description">Access to the chain’s choke group setting.</Doc></Property><Method compare="common" name="add_choke_group_listener()"><Doc type="Format">add_choke_group_listener( (DrumChain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_choke_group_listener(TDrumChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “choke_group” has changed. </Doc></Method><Method compare="common" name="choke_group_has_listener()"><Doc type="Format">choke_group_has_listener( (DrumChain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool choke_group_has_listener(TDrumChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “choke_group”. </Doc></Method><Method compare="common" name="remove_choke_group_listener()"><Doc type="Format">remove_choke_group_listener( (DrumChain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_choke_group_listener(TDrumChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “choke_group”. </Doc></Method><Property compare="common" name="color"><Doc type="Description">Access the color index of the Chain.</Doc></Property><Method compare="common" name="add_color_listener()"><Doc type="Format">add_color_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_color_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color” has changed. </Doc></Method><Method compare="common" name="color_has_listener()"><Doc type="Format">color_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool color_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color”. </Doc></Method><Method compare="common" name="remove_color_listener()"><Doc type="Format">remove_color_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_color_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color”. </Doc></Method><Property compare="common" name="color_index"><Doc type="Description">Access the color index of the Chain.</Doc></Property><Method compare="common" name="add_color_index_listener()"><Doc type="Format">add_color_index_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_color_index_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color_index” has changed. </Doc></Method><Method compare="common" name="color_index_has_listener()"><Doc type="Format">color_index_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool color_index_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color_index”. </Doc></Method><Method compare="common" name="remove_color_index_listener()"><Doc type="Format">remove_color_index_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_color_index_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color_index”. </Doc></Method><Method compare="common" name="delete_device()"><Doc type="Format">delete_device( (Chain)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void delete_device(TChainPyHandle, int)</Doc><Doc type="Description">Remove a device identified by its index from the chain. Throws runtime error if bad index.  </Doc></Method><Property compare="common" name="devices"><Doc type="Description">Return const access to all available Devices that are present in the chains</Doc></Property><Method compare="common" name="add_devices_listener()"><Doc type="Format">add_devices_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_devices_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “devices” has changed. </Doc></Method><Method compare="common" name="devices_has_listener()"><Doc type="Format">devices_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool devices_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “devices”. </Doc></Method><Method compare="common" name="remove_devices_listener()"><Doc type="Format">remove_devices_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_devices_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “devices”. </Doc></Method><Property compare="common" name="has_audio_input"><Doc type="Description">return True, if this Chain can be feed with an Audio signal. This istrue for all Audio Chains.</Doc></Property><Property compare="common" name="has_audio_output"><Doc type="Description">return True, if this Chain sends out an Audio signal. This istrue for all Audio Chains, and MIDI chains with an Instrument.</Doc></Property><Property compare="common" name="has_midi_input"><Doc type="Description">return True, if this Chain can be feed with an Audio signal. This istrue for all MIDI Chains.</Doc></Property><Property compare="common" name="has_midi_output"><Doc type="Description">return True, if this Chain sends out MIDI events. This istrue for all MIDI Chains with no Instruments.</Doc></Property><Property compare="common" name="is_auto_colored"><Doc type="Description">Get/set access to the auto color flag of the Chain.If True, the Chain will always have the the same color as the containingTrack or Chain.</Doc></Property><Method compare="common" name="add_is_auto_colored_listener()"><Doc type="Format">add_is_auto_colored_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_auto_colored_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_auto_colored” has changed. </Doc></Method><Method compare="common" name="is_auto_colored_has_listener()"><Doc type="Format">is_auto_colored_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_auto_colored_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_auto_colored”. </Doc></Method><Method compare="common" name="remove_is_auto_colored_listener()"><Doc type="Format">remove_is_auto_colored_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_auto_colored_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_auto_colored”. </Doc></Method><Property compare="common" name="mixer_device"><Doc type="Description">Return access to the mixer device that holds the chain’s mixer parameters:the Volume, Pan, and Sendamounts.</Doc></Property><Property compare="common" name="mute"><Doc type="Description">Mute/unmute the chain.</Doc></Property><Method compare="common" name="add_mute_listener()"><Doc type="Format">add_mute_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_mute_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “mute” has changed. </Doc></Method><Method compare="common" name="mute_has_listener()"><Doc type="Format">mute_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool mute_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “mute”. </Doc></Method><Method compare="common" name="remove_mute_listener()"><Doc type="Format">remove_mute_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_mute_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “mute”. </Doc></Method><Property compare="common" name="muted_via_solo"><Doc type="Description">Return const access to whether this chain is muted due to some other chainbeing soloed.</Doc></Property><Method compare="common" name="add_muted_via_solo_listener()"><Doc type="Format">add_muted_via_solo_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_muted_via_solo_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “muted_via_solo” has changed. </Doc></Method><Method compare="common" name="muted_via_solo_has_listener()"><Doc type="Format">muted_via_solo_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool muted_via_solo_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “muted_via_solo”. </Doc></Method><Method compare="common" name="remove_muted_via_solo_listener()"><Doc type="Format">remove_muted_via_solo_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_muted_via_solo_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “muted_via_solo”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Read/write access to the name of the Chain, as visible in the track header.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="out_note"><Doc type="Description">Access to the MIDI note sent to the devices in the chain.</Doc></Property><Method compare="common" name="add_out_note_listener()"><Doc type="Format">add_out_note_listener( (DrumChain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_out_note_listener(TDrumChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “out_note” has changed. </Doc></Method><Method compare="common" name="out_note_has_listener()"><Doc type="Format">out_note_has_listener( (DrumChain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool out_note_has_listener(TDrumChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “out_note”. </Doc></Method><Method compare="common" name="remove_out_note_listener()"><Doc type="Format">remove_out_note_listener( (DrumChain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_out_note_listener(TDrumChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “out_note”. </Doc></Method><Property compare="common" name="solo"><Doc type="Description">Get/Set the solo status of the chain. Note that this will not disable thesolo state of any other Chain in the same rack. If you want exclusive solo, you have to disable the solo state of the other Chains manually.</Doc></Property><Method compare="common" name="add_solo_listener()"><Doc type="Format">add_solo_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_solo_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “solo” has changed. </Doc></Method><Method compare="common" name="remove_solo_listener()"><Doc type="Format">remove_solo_listener( (Chain)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_solo_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “solo”. </Doc></Method><Method compare="common" name="solo_has_listener()"><Doc type="Format">solo_has_listener( (Chain)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool solo_has_listener(TChainPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “solo”. </Doc></Method></Class></Module><Module compare="common" name="Clip"><Class compare="common" name="AutomationEnvelope"><Doc type="Description">Describes parameter automation per clip.</Doc><Method compare="common" name="insert_step()"><Doc type="Format">insert_step( (AutomationEnvelope)arg1, (float)arg2, (float)arg3, (float)arg4) → None</Doc><Doc type="Cpp-Signature">void insert_step(AAutomation {lvalue}, double, double, double)</Doc><Doc type="Description" /></Method><Method compare="common" name="value_at_time()"><Doc type="Format">value_at_time( (AutomationEnvelope)arg1, (float)arg2) → float</Doc><Doc type="Cpp-Signature">double value_at_time(AAutomation {lvalue}, double)</Doc><Doc type="Description" /></Method></Class><Class compare="common" name="Clip"><Doc type="Description">This class represents a Clip in Live. It can be either an AudioClip or a MIDI Clip, in an Arrangement or the Session, dependingon the Track (Slot) it lives in.</Doc><Class compare="common" name="View"><Doc type="Description">Representing the view aspects of a Clip.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the clip view.</Doc></Property><Property compare="common" name="grid_is_triplet"><Doc type="Description">Get/set wether the grid is showing in triplet mode.</Doc></Property><Property compare="common" name="grid_quantization"><Doc type="Description">Get/set clip grid quantization resolution.</Doc></Property><Method compare="common" name="hide_envelope()"><Doc type="Format">hide_envelope( (View)arg1) → None</Doc><Doc type="Cpp-Signature">void hide_envelope(TPyViewData&lt;AClip&gt;)</Doc><Doc type="Description">Hide the envelope view. </Doc></Method><Method compare="common" name="select_envelope_parameter()"><Doc type="Format">select_envelope_parameter( (View)arg1, (DeviceParameter)arg2) → None</Doc><Doc type="Cpp-Signature">void select_envelope_parameter(TPyViewData&lt;AClip&gt;, TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description">Select the the given device parameter in the envelope view. </Doc></Method><Method compare="common" name="show_envelope()"><Doc type="Format">show_envelope( (View)arg1) → None</Doc><Doc type="Cpp-Signature">void show_envelope(TPyViewData&lt;AClip&gt;)</Doc><Doc type="Description">Show the envelope view. </Doc></Method><Method compare="common" name="show_loop()"><Doc type="Format">show_loop( (View)arg1) → None</Doc><Doc type="Cpp-Signature">void show_loop(TPyViewData&lt;AClip&gt;)</Doc><Doc type="Description">Show the entire loop in the detail view. </Doc></Method></Class><Property compare="common" name="_live_ptr" /><Method compare="common" name="automation_envelope()"><Doc type="Format">automation_envelope( (Clip)arg1, (DeviceParameter)arg2) → AutomationEnvelope</Doc><Doc type="Cpp-Signature">TWeakPtr&lt;AAutomation&gt; automation_envelope(TPyHandle&lt;AClip&gt;, TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description">Return the envelope for the given parameter.Returns None for Arrangement clips.Returns None for parameters from a different track. </Doc></Method><Property compare="common" name="available_warp_modes"><Doc type="Description">Available for AudioClips only.Get/Set the available warp modes, that can be used.</Doc></Property><Method compare="common" name="beat_to_sample_time()"><Doc type="Format">beat_to_sample_time( (Clip)self, (float)beat_time) → float</Doc><Doc type="Cpp-Signature">double beat_to_sample_time(TPyHandle&lt;AClip&gt;, double)</Doc><Doc type="Description">Available for AudioClips only. Converts the given beat time to sample time. Raises an error if the sample is not warped. </Doc></Method><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the Clip.</Doc></Property><Method compare="common" name="clear_all_envelopes()"><Doc type="Format">clear_all_envelopes( (Clip)arg1) → None</Doc><Doc type="Cpp-Signature">void clear_all_envelopes(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Clears all envelopes for this clip. </Doc></Method><Method compare="common" name="clear_envelope()"><Doc type="Format">clear_envelope( (Clip)arg1, (DeviceParameter)arg2) → None</Doc><Doc type="Cpp-Signature">void clear_envelope(TPyHandle&lt;AClip&gt;, TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description">Clears the envelope of this clips given parameter. </Doc></Method><Property compare="common" name="color"><Doc type="Description">Get/set access to the color of the Clip (RGB).</Doc></Property><Method compare="common" name="add_color_listener()"><Doc type="Format">add_color_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_color_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color” has changed. </Doc></Method><Method compare="common" name="color_has_listener()"><Doc type="Format">color_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool color_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color”. </Doc></Method><Method compare="common" name="remove_color_listener()"><Doc type="Format">remove_color_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_color_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color”. </Doc></Method><Property compare="common" name="color_index"><Doc type="Description">Get/set access to the color index of the Clip.</Doc></Property><Method compare="common" name="add_color_index_listener()"><Doc type="Format">add_color_index_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_color_index_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color_index” has changed. </Doc></Method><Method compare="common" name="color_index_has_listener()"><Doc type="Format">color_index_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool color_index_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color_index”. </Doc></Method><Method compare="common" name="remove_color_index_listener()"><Doc type="Format">remove_color_index_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_color_index_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color_index”. </Doc></Method><Method compare="common" name="crop()"><Doc type="Format">crop( (Clip)arg1) → None</Doc><Doc type="Cpp-Signature">void crop(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Crops the clip. The region that is cropped depends on whether the clip is looped or not. If looped, the region outside of the loop is removed. If not looped, the region outside the start and end markers is removed. </Doc></Method><Method compare="common" name="deselect_all_notes()"><Doc type="Format">deselect_all_notes( (Clip)arg1) → None</Doc><Doc type="Cpp-Signature">void deselect_all_notes(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">De-selects all notes present in the clip. </Doc></Method><Method compare="common" name="duplicate_loop()"><Doc type="Format">duplicate_loop( (Clip)arg1) → None</Doc><Doc type="Cpp-Signature">void duplicate_loop(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Make the loop two times longer and duplicates notes and envelopes. Duplicates the clip start/end range if the clip is not looped. </Doc></Method><Method compare="common" name="duplicate_region()"><Doc type="Format">duplicate_region( (Clip)self, (float)region_start, (float)region_length, (float)destination_time [, (int)pitch=-1 [, (int)transposition_amount=0]]) → None</Doc><Doc type="Cpp-Signature">void duplicate_region(TPyHandle&lt;AClip&gt;, double, double, double [, int=-1 [, int=0]])</Doc><Doc type="Description">Duplicate the notes in the specified region to the destination_time. Only notes of the specified pitch are duplicated or all if pitch is -1. If the transposition_amount is not 0, the notes in the region will be transposed by the transpose_amount of semitones.Raises an error on audio clips. </Doc></Method><Property compare="common" name="end_marker"><Doc type="Description">Get/Set the Clips end marker pos in beats/seconds (unit depends on warping).</Doc></Property><Method compare="common" name="add_end_marker_listener()"><Doc type="Format">add_end_marker_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_end_marker_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “end_marker” has changed. </Doc></Method><Method compare="common" name="end_marker_has_listener()"><Doc type="Format">end_marker_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool end_marker_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “end_marker”. </Doc></Method><Method compare="common" name="remove_end_marker_listener()"><Doc type="Format">remove_end_marker_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_end_marker_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “end_marker”. </Doc></Method><Property compare="common" name="end_time"><Doc type="Description">Get the clip’s end time.</Doc></Property><Method compare="common" name="add_end_time_listener()"><Doc type="Format">add_end_time_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_end_time_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “end_time” has changed. </Doc></Method><Method compare="common" name="end_time_has_listener()"><Doc type="Format">end_time_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool end_time_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “end_time”. </Doc></Method><Method compare="common" name="remove_end_time_listener()"><Doc type="Format">remove_end_time_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_end_time_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “end_time”. </Doc></Method><Property compare="common" name="file_path"><Doc type="Description">Get the path of the file represented by the Audio Clip.</Doc></Property><Method compare="common" name="add_file_path_listener()"><Doc type="Format">add_file_path_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_file_path_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “file_path” has changed. </Doc></Method><Method compare="common" name="file_path_has_listener()"><Doc type="Format">file_path_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool file_path_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “file_path”. </Doc></Method><Method compare="common" name="remove_file_path_listener()"><Doc type="Format">remove_file_path_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_file_path_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “file_path”. </Doc></Method><Method compare="common" name="fire()"><Doc type="Format">fire( (Clip)arg1) → None</Doc><Doc type="Cpp-Signature">void fire(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">(Re)Start playing this Clip. </Doc></Method><Property compare="common" name="gain"><Doc type="Description">Available for AudioClips only.Read/write access to the gain setting of theAudio Clip</Doc></Property><Method compare="common" name="add_gain_listener()"><Doc type="Format">add_gain_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_gain_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “gain” has changed. </Doc></Method><Method compare="common" name="gain_has_listener()"><Doc type="Format">gain_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool gain_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “gain”. </Doc></Method><Method compare="common" name="remove_gain_listener()"><Doc type="Format">remove_gain_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_gain_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “gain”. </Doc></Method><Property compare="common" name="gain_display_string"><Doc type="Description">Return a string with the gain as dB value</Doc></Property><Method compare="common" name="get_notes()"><Doc type="Format">get_notes( (Clip)self, (float)from_time, (int)from_pitch, (float)time_span, (int)pitch_span) → tuple</Doc><Doc type="Cpp-Signature">boost::python::tuple get_notes(TPyHandle&lt;AClip&gt;, double, int, double, int)</Doc><Doc type="Description">Returns a tuple of tuples where each inner tuple represents a note starting in the given pitch- and time range. The inner tuple contains pitch, time, duration, velocity, and mute state. </Doc></Method><Method compare="common" name="get_selected_notes()"><Doc type="Format">get_selected_notes( (Clip)arg1) → tuple</Doc><Doc type="Cpp-Signature">boost::python::tuple get_selected_notes(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Returns a tuple of tuples where each inner tuple represents a selected note. The inner tuple contains pitch, time, duration, velocity, and mute state. </Doc></Method><Property compare="common" name="has_envelopes"><Doc type="Description">Will notify if the clip gets his first envelope or the last envelope is removed.</Doc></Property><Method compare="common" name="add_has_envelopes_listener()"><Doc type="Format">add_has_envelopes_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_has_envelopes_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_envelopes” has changed. </Doc></Method><Method compare="common" name="has_envelopes_has_listener()"><Doc type="Format">has_envelopes_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool has_envelopes_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_envelopes”. </Doc></Method><Method compare="common" name="remove_has_envelopes_listener()"><Doc type="Format">remove_has_envelopes_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_has_envelopes_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_envelopes”. </Doc></Method><Property compare="common" name="is_arrangement_clip"><Doc type="Description">return true if this Clip is an Arrangement Clip.A Clip can be either a Session or Arrangement Clip.</Doc></Property><Property compare="common" name="is_audio_clip"><Doc type="Description">Return true if this Clip is an Audio Clip.A Clip can be either an Audioclip or a MIDI Clip.</Doc></Property><Property compare="common" name="is_midi_clip"><Doc type="Description">return true if this Clip is a MIDI Clip.A Clip can be either an Audioclip or a MIDI Clip.</Doc></Property><Property compare="common" name="is_overdubbing"><Doc type="Description">returns true if the Clip is recording overdubs</Doc></Property><Method compare="common" name="add_is_overdubbing_listener()"><Doc type="Format">add_is_overdubbing_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_overdubbing_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_overdubbing” has changed. </Doc></Method><Method compare="common" name="is_overdubbing_has_listener()"><Doc type="Format">is_overdubbing_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_overdubbing_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_overdubbing”. </Doc></Method><Method compare="common" name="remove_is_overdubbing_listener()"><Doc type="Format">remove_is_overdubbing_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_overdubbing_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_overdubbing”. </Doc></Method><Property compare="common" name="is_playing"><Doc type="Description">Get/Set if this Clip is currently playing. If the Clips trigger modeis set to a quantization value, the Clip will not start playing immediately.If you need to know wether the Clip was triggered, use the is_triggered property.</Doc></Property><Property compare="common" name="is_recording"><Doc type="Description">returns true if the Clip was triggered to record or is recording.</Doc></Property><Method compare="common" name="add_is_recording_listener()"><Doc type="Format">add_is_recording_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_recording_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_recording” has changed. </Doc></Method><Method compare="common" name="is_recording_has_listener()"><Doc type="Format">is_recording_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_recording_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_recording”. </Doc></Method><Method compare="common" name="remove_is_recording_listener()"><Doc type="Format">remove_is_recording_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_recording_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_recording”. </Doc></Method><Property compare="common" name="is_triggered"><Doc type="Description">returns true if the Clip was triggered or is playing.</Doc></Property><Property compare="common" name="length"><Doc type="Description">Get to the Clips length in beats/seconds (unit depends on warping).</Doc></Property><Property compare="common" name="loop_end"><Doc type="Description">Get/Set the loop end pos of this Clip in beats/seconds (unit depends on warping).</Doc></Property><Method compare="common" name="add_loop_end_listener()"><Doc type="Format">add_loop_end_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_loop_end_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “loop_end” has changed. </Doc></Method><Method compare="common" name="loop_end_has_listener()"><Doc type="Format">loop_end_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool loop_end_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “loop_end”. </Doc></Method><Method compare="common" name="remove_loop_end_listener()"><Doc type="Format">remove_loop_end_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_loop_end_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “loop_end”. </Doc></Method><Method compare="common" name="add_loop_jump_listener()"><Doc type="Format">add_loop_jump_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_loop_jump_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “loop_jump” has changed. </Doc></Method><Method compare="common" name="loop_jump_has_listener()"><Doc type="Format">loop_jump_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool loop_jump_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “loop_jump”. </Doc></Method><Method compare="common" name="remove_loop_jump_listener()"><Doc type="Format">remove_loop_jump_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_loop_jump_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “loop_jump”. </Doc></Method><Property compare="common" name="loop_start"><Doc type="Description">Get/Set the Clips loopstart pos in beats/seconds (unit depends on warping).</Doc></Property><Method compare="common" name="add_loop_start_listener()"><Doc type="Format">add_loop_start_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_loop_start_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “loop_start” has changed. </Doc></Method><Method compare="common" name="loop_start_has_listener()"><Doc type="Format">loop_start_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool loop_start_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “loop_start”. </Doc></Method><Method compare="common" name="remove_loop_start_listener()"><Doc type="Format">remove_loop_start_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_loop_start_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “loop_start”. </Doc></Method><Property compare="common" name="looping"><Doc type="Description">Get/Set the Clips ‘loop is enabled’ flag.Only Warped Audio Clips or MIDI Clip can be looped.</Doc></Property><Method compare="common" name="add_looping_listener()"><Doc type="Format">add_looping_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_looping_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “looping” has changed. </Doc></Method><Method compare="common" name="looping_has_listener()"><Doc type="Format">looping_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool looping_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “looping”. </Doc></Method><Method compare="common" name="remove_looping_listener()"><Doc type="Format">remove_looping_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_looping_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “looping”. </Doc></Method><Method compare="common" name="move_playing_pos()"><Doc type="Format">move_playing_pos( (Clip)arg1, (float)arg2) → None</Doc><Doc type="Cpp-Signature">void move_playing_pos(TPyHandle&lt;AClip&gt;, double)</Doc><Doc type="Description">Jump forward or backward by the specified relative amount in beats. Will do nothing, if the Clip is not playing. </Doc></Method><Property compare="common" name="muted"><Doc type="Description">Read/write access to the mute state of the Clip.</Doc></Property><Method compare="common" name="add_muted_listener()"><Doc type="Format">add_muted_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_muted_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “muted” has changed. </Doc></Method><Method compare="common" name="muted_has_listener()"><Doc type="Format">muted_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool muted_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “muted”. </Doc></Method><Method compare="common" name="remove_muted_listener()"><Doc type="Format">remove_muted_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_muted_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “muted”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Read/write access to the name of the Clip.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Method compare="common" name="add_notes_listener()"><Doc type="Format">add_notes_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_notes_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “notes” has changed. </Doc></Method><Method compare="common" name="notes_has_listener()"><Doc type="Format">notes_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool notes_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “notes”. </Doc></Method><Method compare="common" name="remove_notes_listener()"><Doc type="Format">remove_notes_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_notes_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “notes”. </Doc></Method><Property compare="common" name="pitch_coarse"><Doc type="Description">Available for AudioClips only.Read/write access to the pitch (in halftones) setting of theAudio Clip, ranging from -48 to 48</Doc></Property><Method compare="common" name="add_pitch_coarse_listener()"><Doc type="Format">add_pitch_coarse_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_pitch_coarse_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “pitch_coarse” has changed. </Doc></Method><Method compare="common" name="pitch_coarse_has_listener()"><Doc type="Format">pitch_coarse_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool pitch_coarse_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “pitch_coarse”. </Doc></Method><Method compare="common" name="remove_pitch_coarse_listener()"><Doc type="Format">remove_pitch_coarse_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_pitch_coarse_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “pitch_coarse”. </Doc></Method><Property compare="common" name="pitch_fine"><Doc type="Description">Available for AudioClips only.Read/write access to the pitch fine setting of theAudio Clip, ranging from -500 to 500</Doc></Property><Method compare="common" name="add_pitch_fine_listener()"><Doc type="Format">add_pitch_fine_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_pitch_fine_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “pitch_fine” has changed. </Doc></Method><Method compare="common" name="pitch_fine_has_listener()"><Doc type="Format">pitch_fine_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool pitch_fine_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “pitch_fine”. </Doc></Method><Method compare="common" name="remove_pitch_fine_listener()"><Doc type="Format">remove_pitch_fine_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_pitch_fine_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “pitch_fine”. </Doc></Method><Property compare="common" name="playing_position"><Doc type="Description">Constant access to the current playing position of the clip.The returned value is the position in beats for midi and warped audio clips, or in seconds for unwarped audio clips. Stopped clips will return 0.</Doc></Property><Method compare="common" name="add_playing_position_listener()"><Doc type="Format">add_playing_position_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_playing_position_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “playing_position” has changed. </Doc></Method><Method compare="common" name="playing_position_has_listener()"><Doc type="Format">playing_position_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool playing_position_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “playing_position”. </Doc></Method><Method compare="common" name="remove_playing_position_listener()"><Doc type="Format">remove_playing_position_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_playing_position_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “playing_position”. </Doc></Method><Method compare="common" name="add_playing_status_listener()"><Doc type="Format">add_playing_status_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_playing_status_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “playing_status” has changed. </Doc></Method><Method compare="common" name="playing_status_has_listener()"><Doc type="Format">playing_status_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool playing_status_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “playing_status”. </Doc></Method><Method compare="common" name="remove_playing_status_listener()"><Doc type="Format">remove_playing_status_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_playing_status_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “playing_status”. </Doc></Method><Property compare="common" name="position"><Doc type="Description">Get/Set the loop position of this Clip in beats/seconds (unit depends on warping).</Doc></Property><Method compare="common" name="add_position_listener()"><Doc type="Format">add_position_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_position_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “position” has changed. </Doc></Method><Method compare="common" name="position_has_listener()"><Doc type="Format">position_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool position_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “position”. </Doc></Method><Method compare="common" name="remove_position_listener()"><Doc type="Format">remove_position_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_position_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “position”. </Doc></Method><Method compare="common" name="quantize()"><Doc type="Format">quantize( (Clip)arg1, (int)arg2, (float)arg3) → None</Doc><Doc type="Cpp-Signature">void quantize(TPyHandle&lt;AClip&gt;, int, float)</Doc><Doc type="Description">Quantize all notes in a clip or align warp markers. </Doc></Method><Method compare="common" name="quantize_pitch()"><Doc type="Format">quantize_pitch( (Clip)arg1, (int)arg2, (int)arg3, (float)arg4) → None</Doc><Doc type="Cpp-Signature">void quantize_pitch(TPyHandle&lt;AClip&gt;, int, int, float)</Doc><Doc type="Description">Quantize all the notes of a given pitch.  Raises an error on audio clips. </Doc></Method><Property compare="common" name="ram_mode"><Doc type="Description">Available for AudioClips only.Read/write access to the Ram mode setting of the Audio Clip</Doc></Property><Method compare="common" name="add_ram_mode_listener()"><Doc type="Format">add_ram_mode_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_ram_mode_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “ram_mode” has changed. </Doc></Method><Method compare="common" name="ram_mode_has_listener()"><Doc type="Format">ram_mode_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool ram_mode_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “ram_mode”. </Doc></Method><Method compare="common" name="remove_ram_mode_listener()"><Doc type="Format">remove_ram_mode_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_ram_mode_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “ram_mode”. </Doc></Method><Method compare="common" name="remove_notes()"><Doc type="Format">remove_notes( (Clip)arg1, (float)arg2, (int)arg3, (float)arg4, (int)arg5) → None</Doc><Doc type="Cpp-Signature">void remove_notes(TPyHandle&lt;AClip&gt;, double, int, double, int)</Doc><Doc type="Description">Delete all notes starting in the given pitch- and time range. </Doc></Method><Method compare="common" name="replace_selected_notes()"><Doc type="Format">replace_selected_notes( (Clip)arg1, (tuple)arg2) → None</Doc><Doc type="Cpp-Signature">void replace_selected_notes(TPyHandle&lt;AClip&gt;, boost::python::tuple)</Doc><Doc type="Description">Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_selected_notes. The notes described that way will then be used to replace the old selection. </Doc></Method><Property compare="common" name="sample_length"><Doc type="Description">Available for AudioClips only.Get the sample length in sample time or -1 if there is no sample available.</Doc></Property><Method compare="common" name="sample_to_beat_time()"><Doc type="Format">sample_to_beat_time( (Clip)self, (float)sample_time) → float</Doc><Doc type="Cpp-Signature">double sample_to_beat_time(TPyHandle&lt;AClip&gt;, double)</Doc><Doc type="Description">Available for AudioClips only. Converts the given sample time to beat time. Raises an error if the sample is not warped. </Doc></Method><Method compare="common" name="scrub()"><Doc type="Format">scrub( (Clip)self, (float)scrub_position) → None</Doc><Doc type="Cpp-Signature">void scrub(TPyHandle&lt;AClip&gt;, double)</Doc><Doc type="Description">Scrubs inside a clip. scrub_position defines the position in beats that the scrub will start from. The scrub will continue until stop_scrub is called. Global quantization applies to the scrub’s position and length. </Doc></Method><Method compare="common" name="seconds_to_sample_time()"><Doc type="Format">seconds_to_sample_time( (Clip)self, (float)seconds) → float</Doc><Doc type="Cpp-Signature">double seconds_to_sample_time(TPyHandle&lt;AClip&gt;, double)</Doc><Doc type="Description">Available for AudioClips only. Converts the given seconds to sample time. Raises an error if the sample is warped. </Doc></Method><Method compare="common" name="select_all_notes()"><Doc type="Format">select_all_notes( (Clip)arg1) → None</Doc><Doc type="Cpp-Signature">void select_all_notes(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Selects all notes present in the clip. </Doc></Method><Method compare="common" name="set_fire_button_state()"><Doc type="Format">set_fire_button_state( (Clip)arg1, (bool)arg2) → None</Doc><Doc type="Cpp-Signature">void set_fire_button_state(TPyHandle&lt;AClip&gt;, bool)</Doc><Doc type="Description">Set the clip’s fire button state directly. Supports all launch modes. </Doc></Method><Method compare="common" name="set_notes()"><Doc type="Format">set_notes( (Clip)arg1, (tuple)arg2) → None</Doc><Doc type="Cpp-Signature">void set_notes(TPyHandle&lt;AClip&gt;, boost::python::tuple)</Doc><Doc type="Description">Called with a tuple of tuples where each inner tuple represents a note in the same format as returned by get_notes. The notes described that way will then be added to the clip. </Doc></Method><Property compare="common" name="signature_denominator"><Doc type="Description">Get/Set access to the global signature denominator of the Clip.</Doc></Property><Method compare="common" name="add_signature_denominator_listener()"><Doc type="Format">add_signature_denominator_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_signature_denominator_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “signature_denominator” has changed. </Doc></Method><Method compare="common" name="remove_signature_denominator_listener()"><Doc type="Format">remove_signature_denominator_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_signature_denominator_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “signature_denominator”. </Doc></Method><Method compare="common" name="signature_denominator_has_listener()"><Doc type="Format">signature_denominator_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool signature_denominator_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “signature_denominator”. </Doc></Method><Property compare="common" name="signature_numerator"><Doc type="Description">Get/Set access to the global signature numerator of the Clip.</Doc></Property><Method compare="common" name="add_signature_numerator_listener()"><Doc type="Format">add_signature_numerator_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_signature_numerator_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “signature_numerator” has changed. </Doc></Method><Method compare="common" name="remove_signature_numerator_listener()"><Doc type="Format">remove_signature_numerator_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_signature_numerator_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “signature_numerator”. </Doc></Method><Method compare="common" name="signature_numerator_has_listener()"><Doc type="Format">signature_numerator_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool signature_numerator_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “signature_numerator”. </Doc></Method><Property compare="common" name="start_marker"><Doc type="Description">Get/Set the Clips start marker pos in beats/seconds (unit depends on warping).</Doc></Property><Method compare="common" name="add_start_marker_listener()"><Doc type="Format">add_start_marker_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_start_marker_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “start_marker” has changed. </Doc></Method><Method compare="common" name="remove_start_marker_listener()"><Doc type="Format">remove_start_marker_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_start_marker_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “start_marker”. </Doc></Method><Method compare="common" name="start_marker_has_listener()"><Doc type="Format">start_marker_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool start_marker_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “start_marker”. </Doc></Method><Property compare="common" name="start_time"><Doc type="Description">Get the clip’s start time offset.</Doc></Property><Method compare="common" name="stop()"><Doc type="Format">stop( (Clip)arg1) → None</Doc><Doc type="Cpp-Signature">void stop(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Stop playing this Clip. </Doc></Method><Method compare="common" name="stop_scrub()"><Doc type="Format">stop_scrub( (Clip)arg1) → None</Doc><Doc type="Cpp-Signature">void stop_scrub(TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Stops the current scrub. </Doc></Method><Property compare="common" name="view"><Doc type="Description">Get the view of the Clip.</Doc></Property><Method compare="common" name="add_warp_markers_listener()"><Doc type="Format">add_warp_markers_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_warp_markers_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “warp_markers” has changed. </Doc></Method><Method compare="common" name="remove_warp_markers_listener()"><Doc type="Format">remove_warp_markers_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_warp_markers_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “warp_markers”. </Doc></Method><Method compare="common" name="warp_markers_has_listener()"><Doc type="Format">warp_markers_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool warp_markers_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “warp_markers”. </Doc></Method><Property compare="common" name="warp_mode"><Doc type="Description">Available for AudioClips only.Get/Set the warp mode for this audio clip.</Doc></Property><Method compare="common" name="add_warp_mode_listener()"><Doc type="Format">add_warp_mode_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_warp_mode_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “warp_mode” has changed. </Doc></Method><Method compare="common" name="remove_warp_mode_listener()"><Doc type="Format">remove_warp_mode_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_warp_mode_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “warp_mode”. </Doc></Method><Method compare="common" name="warp_mode_has_listener()"><Doc type="Format">warp_mode_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool warp_mode_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “warp_mode”. </Doc></Method><Property compare="common" name="warping"><Doc type="Description">Available for AudioClips only.Get/Set if this Clip is timestreched.</Doc></Property><Method compare="common" name="add_warping_listener()"><Doc type="Format">add_warping_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_warping_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “warping” has changed. </Doc></Method><Method compare="common" name="remove_warping_listener()"><Doc type="Format">remove_warping_listener( (Clip)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_warping_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “warping”. </Doc></Method><Method compare="common" name="warping_has_listener()"><Doc type="Format">warping_has_listener( (Clip)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool warping_has_listener(TPyHandle&lt;AClip&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “warping”. </Doc></Method><Property compare="common" name="will_record_on_start"><Doc type="Description">returns true if the Clip will record on being started.</Doc></Property></Class><Class compare="common" name="GridQuantization"><Value compare="common" name="count" /><Value compare="common" name="g_2_bars" /><Value compare="common" name="g_4_bars" /><Value compare="common" name="g_8_bars" /><Value compare="common" name="g_bar" /><Value compare="common" name="g_eighth" /><Value compare="common" name="g_half" /><Value compare="common" name="g_quarter" /><Value compare="common" name="g_sixteenth" /><Value compare="common" name="g_thirtysecond" /><Value compare="common" name="no_grid" /></Class><Class compare="common" name="WarpMode"><Value compare="common" name="beats" /><Value compare="common" name="complex" /><Value compare="common" name="complex_pro" /><Value compare="common" name="count" /><Value compare="common" name="repitch" /><Value compare="common" name="rex" /><Value compare="common" name="texture" /><Value compare="common" name="tones" /></Class></Module><Module compare="common" name="ClipSlot"><Class compare="common" name="ClipSlot"><Doc type="Description">This class represents an entry in Lives Session view matrix.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the ClipSlot.</Doc></Property><Property compare="common" name="clip"><Doc type="Description">Returns the Clip which this clipslots currently owns. Might be None.</Doc></Property><Property compare="common" name="color"><Doc type="Description">Returns the canonical color for the clip slot or None if it does not exist.</Doc></Property><Method compare="common" name="add_color_listener()"><Doc type="Format">add_color_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_color_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color” has changed. </Doc></Method><Method compare="common" name="color_has_listener()"><Doc type="Format">color_has_listener( (ClipSlot)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool color_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color”. </Doc></Method><Method compare="common" name="remove_color_listener()"><Doc type="Format">remove_color_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_color_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color”. </Doc></Method><Property compare="common" name="color_index"><Doc type="Description">Returns the canonical color index for the clip slot or None if it does not exist.</Doc></Property><Method compare="common" name="add_color_index_listener()"><Doc type="Format">add_color_index_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_color_index_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color_index” has changed. </Doc></Method><Method compare="common" name="color_index_has_listener()"><Doc type="Format">color_index_has_listener( (ClipSlot)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool color_index_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color_index”. </Doc></Method><Method compare="common" name="remove_color_index_listener()"><Doc type="Format">remove_color_index_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_color_index_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color_index”. </Doc></Method><Property compare="common" name="controls_other_clips"><Doc type="Description">Returns true if firing this slot will fire clips in other slots.Can only be true for slots in group tracks.</Doc></Property><Method compare="common" name="add_controls_other_clips_listener()"><Doc type="Format">add_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_controls_other_clips_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “controls_other_clips” has changed. </Doc></Method><Method compare="common" name="controls_other_clips_has_listener()"><Doc type="Format">controls_other_clips_has_listener( (ClipSlot)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool controls_other_clips_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “controls_other_clips”. </Doc></Method><Method compare="common" name="remove_controls_other_clips_listener()"><Doc type="Format">remove_controls_other_clips_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_controls_other_clips_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “controls_other_clips”. </Doc></Method><Method compare="common" name="create_clip()"><Doc type="Format">create_clip( (ClipSlot)arg1, (float)arg2) → None</Doc><Doc type="Cpp-Signature">void create_clip(TPyHandle&lt;AGroupAndClipSlotBase&gt;, double)</Doc><Doc type="Description">Creates an empty clip with the given length in the slot. Throws an error when called on non-empty slots or slots in non-MIDI tracks. </Doc></Method><Method compare="common" name="delete_clip()"><Doc type="Format">delete_clip( (ClipSlot)arg1) → None</Doc><Doc type="Cpp-Signature">void delete_clip(TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc><Doc type="Description">Removes the clip contained in the slot. Raises an exception if the slot was empty. </Doc></Method><Method compare="common" name="duplicate_clip_to()"><Doc type="Format">duplicate_clip_to( (ClipSlot)arg1, (ClipSlot)arg2) → None</Doc><Doc type="Cpp-Signature">void duplicate_clip_to(TPyHandle&lt;AGroupAndClipSlotBase&gt;, TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc><Doc type="Description">Duplicates the slot’s clip to the passed in target slot. Overrides the target’s clip if it’s not empty. Raises an exception if the (source) slot itself is empty, or if source and target have different track types (audio vs. MIDI). Also raises if the source or target slot is in a group track (so called group slot). </Doc></Method><Method compare="common" name="fire()"><Doc type="Format">fire( (ClipSlot)arg1) → None</Doc><Doc type="Cpp-Signature">void fire(TPyHandle&lt;AGroupAndClipSlotBase&gt;)fire( (ClipSlot)self [, (float)record_length=1.7976931348623157e+308 [, (int)launch_quantization=-2147483648 [, (bool)force_legato=False]]]) → None : If ‘record_length’ is passed, the clip will be refired after the given recording length.  Raises an error if the slot owns a clip. ‘launch_quantization’ determines the quantization of global transport that is applied overriding the value in the song. ‘force_legato’ will make the clip play inmediatelly. The playhead will be moved to keep the clip synchronized. </Doc><Doc type="Description">Fire a Clip if this Clipslot owns one, else trigger the stop button, if we have one. </Doc></Method><Property compare="common" name="has_clip"><Doc type="Description">Returns true if this Clipslot owns a Clip.</Doc></Property><Method compare="common" name="add_has_clip_listener()"><Doc type="Format">add_has_clip_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_has_clip_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_clip” has changed. </Doc></Method><Method compare="common" name="has_clip_has_listener()"><Doc type="Format">has_clip_has_listener( (ClipSlot)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool has_clip_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_clip”. </Doc></Method><Method compare="common" name="remove_has_clip_listener()"><Doc type="Format">remove_has_clip_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_has_clip_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_clip”. </Doc></Method><Property compare="common" name="has_stop_button"><Doc type="Description">Get/Set if this Clip has a stop button, which will, if fired, stop anyother Clip that is currently playing the Track we do belong to.</Doc></Property><Method compare="common" name="add_has_stop_button_listener()"><Doc type="Format">add_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_has_stop_button_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_stop_button” has changed. </Doc></Method><Method compare="common" name="has_stop_button_has_listener()"><Doc type="Format">has_stop_button_has_listener( (ClipSlot)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool has_stop_button_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_stop_button”. </Doc></Method><Method compare="common" name="remove_has_stop_button_listener()"><Doc type="Format">remove_has_stop_button_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_has_stop_button_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_stop_button”. </Doc></Method><Property compare="common" name="is_group_slot"><Doc type="Description">Returns whether this clip slot is a group track slot (group slot).</Doc></Property><Property compare="common" name="is_playing"><Doc type="Description">Returns whether the clip associated with the slot is playing.</Doc></Property><Property compare="common" name="is_recording"><Doc type="Description">Returns whether the clip associated with the slot is recording.</Doc></Property><Property compare="common" name="is_triggered"><Doc type="Description">Const access to the triggering state of the clip slot.</Doc></Property><Method compare="common" name="add_is_triggered_listener()"><Doc type="Format">add_is_triggered_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_triggered_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_triggered” has changed. </Doc></Method><Method compare="common" name="is_triggered_has_listener()"><Doc type="Format">is_triggered_has_listener( (ClipSlot)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_triggered_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_triggered”. </Doc></Method><Method compare="common" name="remove_is_triggered_listener()"><Doc type="Format">remove_is_triggered_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_triggered_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_triggered”. </Doc></Method><Property compare="common" name="playing_status"><Doc type="Description">Const access to the playing state of the clip slot.Can be either stopped, playing, or recording.</Doc></Property><Method compare="common" name="add_playing_status_listener()"><Doc type="Format">add_playing_status_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_playing_status_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “playing_status” has changed. </Doc></Method><Method compare="common" name="playing_status_has_listener()"><Doc type="Format">playing_status_has_listener( (ClipSlot)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool playing_status_has_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “playing_status”. </Doc></Method><Method compare="common" name="remove_playing_status_listener()"><Doc type="Format">remove_playing_status_listener( (ClipSlot)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_playing_status_listener(TPyHandle&lt;AGroupAndClipSlotBase&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “playing_status”. </Doc></Method><Method compare="common" name="set_fire_button_state()"><Doc type="Format">set_fire_button_state( (ClipSlot)arg1, (bool)arg2) → None</Doc><Doc type="Cpp-Signature">void set_fire_button_state(TPyHandle&lt;AGroupAndClipSlotBase&gt;, bool)</Doc><Doc type="Description">Set the clipslot’s fire button state directly. Supports all launch modes. </Doc></Method><Method compare="common" name="stop()"><Doc type="Format">stop( (ClipSlot)arg1) → None</Doc><Doc type="Cpp-Signature">void stop(TPyHandle&lt;AGroupAndClipSlotBase&gt;)</Doc><Doc type="Description">Stop playing the contained Clip, if there is a Clip and its currently playing. </Doc></Method><Property compare="common" name="will_record_on_start"><Doc type="Description">returns true if the clip slot will record on being fired.</Doc></Property></Class></Module><Module compare="common" name="Conversions"><Class compare="common" name="AudioToMidiType"><Value compare="common" name="drums_to_midi" /><Value compare="common" name="harmony_to_midi" /><Value compare="common" name="melody_to_midi" /></Class><Built-In compare="common" name="audio_to_midi_clip()"><Doc type="Format">audio_to_midi_clip( (Song)song, (Clip)audio_clip, (int)audio_to_midi_type) → None</Doc><Doc type="Cpp-Signature">void audio_to_midi_clip(TPyHandle&lt;ASong&gt;, TPyHandle&lt;AClip&gt;, int)</Doc><Doc type="Description">Creates a MIDI clip in a new MIDI track with the notes extracted from the given audio_clip. The `audio_to_midi_type` decides which algorithm is used in the process. Raises error when called with an inconvertible clip or invalid `audio_to_midi_type`. </Doc></Built-In><Built-In compare="common" name="create_drum_rack_from_audio_clip()"><Doc type="Format">create_drum_rack_from_audio_clip( (Song)song, (Clip)audio_clip) → None</Doc><Doc type="Cpp-Signature">void create_drum_rack_from_audio_clip(TPyHandle&lt;ASong&gt;, TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Creates a new track with a drum rack with a simpler on the first pad with the specified audio clip. </Doc></Built-In><Built-In compare="common" name="create_midi_track_from_drum_pad()"><Doc type="Format">create_midi_track_from_drum_pad( (Song)song, (DrumPad)drum_pad) → None</Doc><Doc type="Cpp-Signature">void create_midi_track_from_drum_pad(TPyHandle&lt;ASong&gt;, TPyHandle&lt;ADrumGroupDevicePad&gt;)</Doc><Doc type="Description">Creates a new Midi track containing the specified Drum Pad’s device chain. </Doc></Built-In><Built-In compare="common" name="create_midi_track_with_simpler()"><Doc type="Format">create_midi_track_with_simpler( (Song)song, (Clip)audio_clip) → None</Doc><Doc type="Cpp-Signature">void create_midi_track_with_simpler(TPyHandle&lt;ASong&gt;, TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Creates a new Midi track with a simpler including the specified audio clip. </Doc></Built-In><Built-In compare="common" name="is_convertible_to_midi()"><Doc type="Format">is_convertible_to_midi( (Song)song, (Clip)audio_clip) → bool</Doc><Doc type="Cpp-Signature">bool is_convertible_to_midi(TPyHandle&lt;ASong&gt;, TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Returns whether `audio_clip` can be converted to MIDI. Raises error when called with a MIDI clip </Doc></Built-In><Built-In compare="common" name="move_devices_on_track_to_new_drum_rack_pad()"><Doc type="Format">move_devices_on_track_to_new_drum_rack_pad( (Song)song, (int)track_index) → LomObject</Doc><Doc type="Cpp-Signature">TWeakPtr&lt;TPyHandleBase&gt; move_devices_on_track_to_new_drum_rack_pad(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Moves the entire device chain of the track according to the track index onto the C1 (note 36) drum pad of a new drum rack in a new track.If the track associated with the track index does not contain any devices nothing changes (i.e. a new track and new drum rack are not created). </Doc></Built-In><Built-In compare="common" name="sliced_simpler_to_drum_rack()"><Doc type="Format">sliced_simpler_to_drum_rack( (Song)song, (SimplerDevice)simpler) → None</Doc><Doc type="Cpp-Signature">void sliced_simpler_to_drum_rack(TPyHandle&lt;ASong&gt;, TSimplerDevicePyHandle)</Doc><Doc type="Description">Converts the Simpler into a Drum Rack, assigning each slice to a drum pad. Calling it on a non-sliced simpler raises an error. </Doc></Built-In></Module><Module compare="common" name="Device"><Class compare="common" name="Device"><Doc type="Description">This class represents a MIDI or Audio DSP-Device in Live.</Doc><Class compare="common" name="View"><Doc type="Description">Representing the view aspects of a device.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the View.</Doc></Property><Property compare="common" name="is_collapsed"><Doc type="Description">Get/Set/Listen if the device is shown collapsed in the device chain.</Doc></Property><Method compare="common" name="add_is_collapsed_listener()"><Doc type="Format">add_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_collapsed” has changed. </Doc></Method><Method compare="common" name="is_collapsed_has_listener()"><Doc type="Format">is_collapsed_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_collapsed”. </Doc></Method><Method compare="common" name="remove_is_collapsed_listener()"><Doc type="Format">remove_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_collapsed”. </Doc></Method></Class><Method compare="common" name="_get_parameters()"><Doc type="Format">_get_parameters( (Device)arg1) → Vector</Doc><Doc type="Cpp-Signature">std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; _get_parameters(TPyHandle&lt;ADevice&gt;)</Doc><Doc type="Description" /></Method><Property compare="common" name="_live_ptr" /><Property compare="common" name="can_have_chains"><Doc type="Description">Returns true if the device is a rack.</Doc></Property><Property compare="common" name="can_have_drum_pads"><Doc type="Description">Returns true if the device is a drum rack.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the Device.</Doc></Property><Property compare="common" name="class_display_name"><Doc type="Description">Return const access to the name of the device’s class name as displayed in Live’s browser and device chain</Doc></Property><Property compare="common" name="class_name"><Doc type="Description">Return const access to the name of the device’s class.</Doc></Property><Property compare="common" name="is_active"><Doc type="Description">Return const access to whether this device is active. This will be false bothwhen the device is off and when it’s inside a rack device which is off.</Doc></Property><Method compare="common" name="add_is_active_listener()"><Doc type="Format">add_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_active” has changed. </Doc></Method><Method compare="common" name="is_active_has_listener()"><Doc type="Format">is_active_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_active_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_active”. </Doc></Method><Method compare="common" name="remove_is_active_listener()"><Doc type="Format">remove_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_active”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Return access to the name of the device.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="parameters"><Doc type="Description">Const access to the list of available automatable parameters for this device.</Doc></Property><Method compare="common" name="add_parameters_listener()"><Doc type="Format">add_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “parameters” has changed. </Doc></Method><Method compare="common" name="parameters_has_listener()"><Doc type="Format">parameters_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool parameters_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “parameters”. </Doc></Method><Method compare="common" name="remove_parameters_listener()"><Doc type="Format">remove_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “parameters”. </Doc></Method><Method compare="common" name="store_chosen_bank()"><Doc type="Format">store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) → None</Doc><Doc type="Cpp-Signature">void store_chosen_bank(TPyHandle&lt;ADevice&gt;, int, int)</Doc><Doc type="Description">Set the selected bank in the device for persistency. </Doc></Method><Property compare="common" name="type"><Doc type="Description">Return the type of the device.</Doc></Property><Property compare="common" name="view"><Doc type="Description">Representing the view aspects of a device.</Doc></Property></Class><Class compare="common" name="DeviceType"><Doc type="Description">The type of the device.</Doc><Value compare="common" name="audio_effect"><Doc type="Description">The type of the device.</Doc></Value><Value compare="common" name="instrument"><Doc type="Description">The type of the device.</Doc></Value><Value compare="common" name="midi_effect"><Doc type="Description">The type of the device.</Doc></Value><Value compare="common" name="undefined"><Doc type="Description">The type of the device.</Doc></Value></Class></Module><Module compare="common" name="ChainMixerDevice"><Class compare="common" name="ChainMixerDevice"><Doc type="Description">This class represents a Chain’s Mixer Device in Live, which gives youaccess to the Volume, Panning, and Send properties of a Chain.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the mixer device.</Doc></Property><Property compare="common" name="chain_activator"><Doc type="Description">Const access to the Chain’s Activator Device Parameter.</Doc></Property><Property compare="common" name="panning"><Doc type="Description">Const access to the Chain’s Panning Device Parameter.</Doc></Property><Property compare="common" name="sends"><Doc type="Description">Const access to the Chain’s list of Send Amount Device Parameters.</Doc></Property><Method compare="common" name="add_sends_listener()"><Doc type="Format">add_sends_listener( (ChainMixerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_sends_listener(TPyHandle&lt;ABranchMixerDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “sends” has changed. </Doc></Method><Method compare="common" name="remove_sends_listener()"><Doc type="Format">remove_sends_listener( (ChainMixerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_sends_listener(TPyHandle&lt;ABranchMixerDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “sends”. </Doc></Method><Method compare="common" name="sends_has_listener()"><Doc type="Format">sends_has_listener( (ChainMixerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool sends_has_listener(TPyHandle&lt;ABranchMixerDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “sends”. </Doc></Method><Property compare="common" name="volume"><Doc type="Description">Const access to the Chain’s Volume Device Parameter.</Doc></Property></Class></Module><Module compare="common" name="CompressorDevice"><Class compare="common" name="CompressorDevice"><Doc type="Description">This class represents a Compressor device.</Doc><Class compare="common" name="View"><Doc type="Description">Representing the view aspects of a Compressor device.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the View.</Doc></Property><Property compare="common" name="is_collapsed"><Doc type="Description">Get/Set/Listen if the device is shown collapsed in the device chain.</Doc></Property><Method compare="common" name="add_is_collapsed_listener()"><Doc type="Format">add_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_collapsed” has changed. </Doc></Method><Method compare="common" name="is_collapsed_has_listener()"><Doc type="Format">is_collapsed_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_collapsed”. </Doc></Method><Method compare="common" name="remove_is_collapsed_listener()"><Doc type="Format">remove_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_collapsed”. </Doc></Method></Class><Method compare="common" name="_get_parameters()"><Doc type="Format">_get_parameters( (Device)arg1) → Vector</Doc><Doc type="Cpp-Signature">std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; _get_parameters(TPyHandle&lt;ADevice&gt;)</Doc><Doc type="Description" /></Method><Property compare="common" name="_live_ptr" /><Property compare="common" name="available_input_routing_channels"><Doc type="Description">Return a list of source channels for input routing in the sidechain.</Doc></Property><Method compare="common" name="add_available_input_routing_channels_listener()"><Doc type="Format">add_available_input_routing_channels_listener( (CompressorDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_available_input_routing_channels_listener(TCompressorDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “available_input_routing_channels” has changed. </Doc></Method><Method compare="common" name="available_input_routing_channels_has_listener()"><Doc type="Format">available_input_routing_channels_has_listener( (CompressorDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool available_input_routing_channels_has_listener(TCompressorDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “available_input_routing_channels”. </Doc></Method><Method compare="common" name="remove_available_input_routing_channels_listener()"><Doc type="Format">remove_available_input_routing_channels_listener( (CompressorDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_available_input_routing_channels_listener(TCompressorDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “available_input_routing_channels”. </Doc></Method><Property compare="common" name="available_input_routing_types"><Doc type="Description">Return a list of source types for input routing in the sidechain.</Doc></Property><Method compare="common" name="add_available_input_routing_types_listener()"><Doc type="Format">add_available_input_routing_types_listener( (CompressorDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_available_input_routing_types_listener(TCompressorDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “available_input_routing_types” has changed. </Doc></Method><Method compare="common" name="available_input_routing_types_has_listener()"><Doc type="Format">available_input_routing_types_has_listener( (CompressorDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool available_input_routing_types_has_listener(TCompressorDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “available_input_routing_types”. </Doc></Method><Method compare="common" name="remove_available_input_routing_types_listener()"><Doc type="Format">remove_available_input_routing_types_listener( (CompressorDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_available_input_routing_types_listener(TCompressorDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “available_input_routing_types”. </Doc></Method><Property compare="common" name="can_have_chains"><Doc type="Description">Returns true if the device is a rack.</Doc></Property><Property compare="common" name="can_have_drum_pads"><Doc type="Description">Returns true if the device is a drum rack.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the Device.</Doc></Property><Property compare="common" name="class_display_name"><Doc type="Description">Return const access to the name of the device’s class name as displayed in Live’s browser and device chain</Doc></Property><Property compare="common" name="class_name"><Doc type="Description">Return const access to the name of the device’s class.</Doc></Property><Property compare="common" name="input_routing_channel"><Doc type="Description">Get and set the current source channel for input routing in the sidechain.Raises ValueError if the channel isn’t one of the current values inavailable_input_routing_channels.</Doc></Property><Method compare="common" name="add_input_routing_channel_listener()"><Doc type="Format">add_input_routing_channel_listener( (CompressorDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_input_routing_channel_listener(TCompressorDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “input_routing_channel” has changed. </Doc></Method><Method compare="common" name="input_routing_channel_has_listener()"><Doc type="Format">input_routing_channel_has_listener( (CompressorDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool input_routing_channel_has_listener(TCompressorDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “input_routing_channel”. </Doc></Method><Method compare="common" name="remove_input_routing_channel_listener()"><Doc type="Format">remove_input_routing_channel_listener( (CompressorDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_input_routing_channel_listener(TCompressorDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “input_routing_channel”. </Doc></Method><Property compare="common" name="input_routing_type"><Doc type="Description">Get and set the current source type for input routing in the sidechain.Raises ValueError if the type isn’t one of the current values inavailable_input_routing_types.</Doc></Property><Method compare="common" name="add_input_routing_type_listener()"><Doc type="Format">add_input_routing_type_listener( (CompressorDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_input_routing_type_listener(TCompressorDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “input_routing_type” has changed. </Doc></Method><Method compare="common" name="input_routing_type_has_listener()"><Doc type="Format">input_routing_type_has_listener( (CompressorDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool input_routing_type_has_listener(TCompressorDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “input_routing_type”. </Doc></Method><Method compare="common" name="remove_input_routing_type_listener()"><Doc type="Format">remove_input_routing_type_listener( (CompressorDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_input_routing_type_listener(TCompressorDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “input_routing_type”. </Doc></Method><Property compare="common" name="is_active"><Doc type="Description">Return const access to whether this device is active. This will be false bothwhen the device is off and when it’s inside a rack device which is off.</Doc></Property><Method compare="common" name="add_is_active_listener()"><Doc type="Format">add_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_active” has changed. </Doc></Method><Method compare="common" name="is_active_has_listener()"><Doc type="Format">is_active_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_active_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_active”. </Doc></Method><Method compare="common" name="remove_is_active_listener()"><Doc type="Format">remove_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_active”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Return access to the name of the device.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="parameters"><Doc type="Description">Const access to the list of available automatable parameters for this device.</Doc></Property><Method compare="common" name="add_parameters_listener()"><Doc type="Format">add_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “parameters” has changed. </Doc></Method><Method compare="common" name="parameters_has_listener()"><Doc type="Format">parameters_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool parameters_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “parameters”. </Doc></Method><Method compare="common" name="remove_parameters_listener()"><Doc type="Format">remove_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “parameters”. </Doc></Method><Method compare="common" name="store_chosen_bank()"><Doc type="Format">store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) → None</Doc><Doc type="Cpp-Signature">void store_chosen_bank(TPyHandle&lt;ADevice&gt;, int, int)</Doc><Doc type="Description">Set the selected bank in the device for persistency. </Doc></Method><Property compare="common" name="type"><Doc type="Description">Return the type of the device.</Doc></Property><Property compare="common" name="view"><Doc type="Description">Representing the view aspects of a device.</Doc></Property></Class></Module><Module compare="common" name="Eq8Device"><Class compare="common" name="EditMode"><Value compare="common" name="a" /><Value compare="common" name="b" /></Class><Class compare="common" name="Eq8Device"><Doc type="Description">This class represents an Eq8 device.</Doc><Class compare="common" name="View"><Doc type="Description">Representing the view aspects of an Eq8 device.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the View.</Doc></Property><Property compare="common" name="is_collapsed"><Doc type="Description">Get/Set/Listen if the device is shown collapsed in the device chain.</Doc></Property><Method compare="common" name="add_is_collapsed_listener()"><Doc type="Format">add_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_collapsed” has changed. </Doc></Method><Method compare="common" name="is_collapsed_has_listener()"><Doc type="Format">is_collapsed_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_collapsed”. </Doc></Method><Method compare="common" name="remove_is_collapsed_listener()"><Doc type="Format">remove_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_collapsed”. </Doc></Method><Property compare="common" name="selected_band"><Doc type="Description">Access to the selected filter band.</Doc></Property><Method compare="common" name="add_selected_band_listener()"><Doc type="Format">add_selected_band_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_selected_band_listener(TEq8DevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_band” has changed. </Doc></Method><Method compare="common" name="remove_selected_band_listener()"><Doc type="Format">remove_selected_band_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_selected_band_listener(TEq8DevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_band”. </Doc></Method><Method compare="common" name="selected_band_has_listener()"><Doc type="Format">selected_band_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool selected_band_has_listener(TEq8DevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_band”. </Doc></Method></Class><Method compare="common" name="_get_parameters()"><Doc type="Format">_get_parameters( (Device)arg1) → Vector</Doc><Doc type="Cpp-Signature">std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; _get_parameters(TPyHandle&lt;ADevice&gt;)</Doc><Doc type="Description" /></Method><Property compare="common" name="_live_ptr" /><Property compare="common" name="can_have_chains"><Doc type="Description">Returns true if the device is a rack.</Doc></Property><Property compare="common" name="can_have_drum_pads"><Doc type="Description">Returns true if the device is a drum rack.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the Device.</Doc></Property><Property compare="common" name="class_display_name"><Doc type="Description">Return const access to the name of the device’s class name as displayed in Live’s browser and device chain</Doc></Property><Property compare="common" name="class_name"><Doc type="Description">Return const access to the name of the device’s class.</Doc></Property><Property compare="common" name="edit_mode"><Doc type="Description">Access to Eq8's edit mode.</Doc></Property><Method compare="common" name="add_edit_mode_listener()"><Doc type="Format">add_edit_mode_listener( (Eq8Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_edit_mode_listener(TEq8DevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “edit_mode” has changed. </Doc></Method><Method compare="common" name="edit_mode_has_listener()"><Doc type="Format">edit_mode_has_listener( (Eq8Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool edit_mode_has_listener(TEq8DevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “edit_mode”. </Doc></Method><Method compare="common" name="remove_edit_mode_listener()"><Doc type="Format">remove_edit_mode_listener( (Eq8Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_edit_mode_listener(TEq8DevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “edit_mode”. </Doc></Method><Property compare="common" name="global_mode"><Doc type="Description">Access to Eq8's global mode.</Doc></Property><Method compare="common" name="add_global_mode_listener()"><Doc type="Format">add_global_mode_listener( (Eq8Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_global_mode_listener(TEq8DevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “global_mode” has changed. </Doc></Method><Method compare="common" name="global_mode_has_listener()"><Doc type="Format">global_mode_has_listener( (Eq8Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool global_mode_has_listener(TEq8DevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “global_mode”. </Doc></Method><Method compare="common" name="remove_global_mode_listener()"><Doc type="Format">remove_global_mode_listener( (Eq8Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_global_mode_listener(TEq8DevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “global_mode”. </Doc></Method><Property compare="common" name="is_active"><Doc type="Description">Return const access to whether this device is active. This will be false bothwhen the device is off and when it’s inside a rack device which is off.</Doc></Property><Method compare="common" name="add_is_active_listener()"><Doc type="Format">add_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_active” has changed. </Doc></Method><Method compare="common" name="is_active_has_listener()"><Doc type="Format">is_active_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_active_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_active”. </Doc></Method><Method compare="common" name="remove_is_active_listener()"><Doc type="Format">remove_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_active”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Return access to the name of the device.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="oversample"><Doc type="Description">Access to Eq8's oversample value.</Doc></Property><Method compare="common" name="add_oversample_listener()"><Doc type="Format">add_oversample_listener( (Eq8Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_oversample_listener(TEq8DevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “oversample” has changed. </Doc></Method><Method compare="common" name="oversample_has_listener()"><Doc type="Format">oversample_has_listener( (Eq8Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool oversample_has_listener(TEq8DevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “oversample”. </Doc></Method><Method compare="common" name="remove_oversample_listener()"><Doc type="Format">remove_oversample_listener( (Eq8Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_oversample_listener(TEq8DevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “oversample”. </Doc></Method><Property compare="common" name="parameters"><Doc type="Description">Const access to the list of available automatable parameters for this device.</Doc></Property><Method compare="common" name="add_parameters_listener()"><Doc type="Format">add_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “parameters” has changed. </Doc></Method><Method compare="common" name="parameters_has_listener()"><Doc type="Format">parameters_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool parameters_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “parameters”. </Doc></Method><Method compare="common" name="remove_parameters_listener()"><Doc type="Format">remove_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “parameters”. </Doc></Method><Method compare="common" name="store_chosen_bank()"><Doc type="Format">store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) → None</Doc><Doc type="Cpp-Signature">void store_chosen_bank(TPyHandle&lt;ADevice&gt;, int, int)</Doc><Doc type="Description">Set the selected bank in the device for persistency. </Doc></Method><Property compare="common" name="type"><Doc type="Description">Return the type of the device.</Doc></Property><Property compare="common" name="view"><Doc type="Description">Representing the view aspects of a device.</Doc></Property></Class><Class compare="common" name="GlobalMode"><Value compare="common" name="left_right" /><Value compare="common" name="mid_side" /><Value compare="common" name="stereo" /></Class></Module><Module compare="common" name="MaxDevice"><Class compare="common" name="MaxDevice"><Doc type="Description">This class represents a Max for Live device.</Doc><Class compare="common" name="View"><Doc type="Description">Representing the view aspects of a device.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the View.</Doc></Property><Property compare="common" name="is_collapsed"><Doc type="Description">Get/Set/Listen if the device is shown collapsed in the device chain.</Doc></Property><Method compare="common" name="add_is_collapsed_listener()"><Doc type="Format">add_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_collapsed” has changed. </Doc></Method><Method compare="common" name="is_collapsed_has_listener()"><Doc type="Format">is_collapsed_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_collapsed”. </Doc></Method><Method compare="common" name="remove_is_collapsed_listener()"><Doc type="Format">remove_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_collapsed”. </Doc></Method></Class><Method compare="common" name="_get_parameters()"><Doc type="Format">_get_parameters( (Device)arg1) → Vector</Doc><Doc type="Cpp-Signature">std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; _get_parameters(TPyHandle&lt;ADevice&gt;)</Doc><Doc type="Description" /></Method><Property compare="common" name="_live_ptr" /><Property compare="common" name="audio_inputs"><Doc type="Description">Const access to a list of all audio inputs of the device.</Doc></Property><Method compare="common" name="add_audio_inputs_listener()"><Doc type="Format">add_audio_inputs_listener( (MaxDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_audio_inputs_listener(TMaxDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “audio_inputs” has changed. </Doc></Method><Method compare="common" name="audio_inputs_has_listener()"><Doc type="Format">audio_inputs_has_listener( (MaxDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool audio_inputs_has_listener(TMaxDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “audio_inputs”. </Doc></Method><Method compare="common" name="remove_audio_inputs_listener()"><Doc type="Format">remove_audio_inputs_listener( (MaxDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_audio_inputs_listener(TMaxDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “audio_inputs”. </Doc></Method><Property compare="common" name="audio_outputs"><Doc type="Description">Const access to a list of all audio outputs of the device.</Doc></Property><Method compare="common" name="add_audio_outputs_listener()"><Doc type="Format">add_audio_outputs_listener( (MaxDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_audio_outputs_listener(TMaxDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “audio_outputs” has changed. </Doc></Method><Method compare="common" name="audio_outputs_has_listener()"><Doc type="Format">audio_outputs_has_listener( (MaxDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool audio_outputs_has_listener(TMaxDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “audio_outputs”. </Doc></Method><Method compare="common" name="remove_audio_outputs_listener()"><Doc type="Format">remove_audio_outputs_listener( (MaxDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_audio_outputs_listener(TMaxDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “audio_outputs”. </Doc></Method><Method compare="common" name="add_bank_parameters_changed_listener()"><Doc type="Format">add_bank_parameters_changed_listener( (MaxDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_bank_parameters_changed_listener(TMaxDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “bank_parameters_changed” has changed. </Doc></Method><Method compare="common" name="bank_parameters_changed_has_listener()"><Doc type="Format">bank_parameters_changed_has_listener( (MaxDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool bank_parameters_changed_has_listener(TMaxDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “bank_parameters_changed”. </Doc></Method><Method compare="common" name="remove_bank_parameters_changed_listener()"><Doc type="Format">remove_bank_parameters_changed_listener( (MaxDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_bank_parameters_changed_listener(TMaxDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “bank_parameters_changed”. </Doc></Method><Property compare="common" name="can_have_chains"><Doc type="Description">Returns true if the device is a rack.</Doc></Property><Property compare="common" name="can_have_drum_pads"><Doc type="Description">Returns true if the device is a drum rack.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the Device.</Doc></Property><Property compare="common" name="class_display_name"><Doc type="Description">Return const access to the name of the device’s class name as displayed in Live’s browser and device chain</Doc></Property><Property compare="common" name="class_name"><Doc type="Description">Return const access to the name of the device’s class.</Doc></Property><Method compare="common" name="get_bank_count()"><Doc type="Format">get_bank_count( (MaxDevice)arg1) → int</Doc><Doc type="Cpp-Signature">int get_bank_count(TMaxDevicePyHandle)</Doc><Doc type="Description">Get the number of parameter banks. This is related to hardware control surfaces. </Doc></Method><Method compare="common" name="get_bank_name()"><Doc type="Format">get_bank_name( (MaxDevice)arg1, (int)arg2) → unicode</Doc><Doc type="Cpp-Signature">TString get_bank_name(TMaxDevicePyHandle, int)</Doc><Doc type="Description">Get the name of a parameter bank given by index. This is related to hardware control surfaces. </Doc></Method><Method compare="common" name="get_bank_parameters()"><Doc type="Format">get_bank_parameters( (MaxDevice)arg1, (int)arg2) → list</Doc><Doc type="Cpp-Signature">boost::python::list get_bank_parameters(TMaxDevicePyHandle, int)</Doc><Doc type="Description">Get the indices of parameters of the given bank index. Empty slots are marked as -1. Bank index -1 refers to the best-of bank. This function is related to hardware control surfaces. </Doc></Method><Method compare="common" name="get_value_item_icons()"><Doc type="Format">get_value_item_icons( (MaxDevice)arg1, (DeviceParameter)arg2) → list</Doc><Doc type="Cpp-Signature">boost::python::list get_value_item_icons(TMaxDevicePyHandle, TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description">Get a list of icon identifier strings for a list parameter’s values.An empty string is given where no icon should be displayed.An empty list is given when no icons should be displayed.This is related to hardware control surfaces. </Doc></Method><Property compare="common" name="is_active"><Doc type="Description">Return const access to whether this device is active. This will be false bothwhen the device is off and when it’s inside a rack device which is off.</Doc></Property><Method compare="common" name="add_is_active_listener()"><Doc type="Format">add_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_active” has changed. </Doc></Method><Method compare="common" name="is_active_has_listener()"><Doc type="Format">is_active_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_active_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_active”. </Doc></Method><Method compare="common" name="remove_is_active_listener()"><Doc type="Format">remove_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_active”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Return access to the name of the device.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="parameters"><Doc type="Description">Const access to the list of available automatable parameters for this device.</Doc></Property><Method compare="common" name="add_parameters_listener()"><Doc type="Format">add_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “parameters” has changed. </Doc></Method><Method compare="common" name="parameters_has_listener()"><Doc type="Format">parameters_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool parameters_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “parameters”. </Doc></Method><Method compare="common" name="remove_parameters_listener()"><Doc type="Format">remove_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “parameters”. </Doc></Method><Method compare="common" name="store_chosen_bank()"><Doc type="Format">store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) → None</Doc><Doc type="Cpp-Signature">void store_chosen_bank(TPyHandle&lt;ADevice&gt;, int, int)</Doc><Doc type="Description">Set the selected bank in the device for persistency. </Doc></Method><Property compare="common" name="type"><Doc type="Description">Return the type of the device.</Doc></Property><Property compare="common" name="view"><Doc type="Description">Representing the view aspects of a device.</Doc></Property></Class></Module><Module compare="common" name="MixerDevice"><Class compare="common" name="MixerDevice"><Doc type="Description">This class represents a Mixer Device in Live, which gives youaccess to the Volume and Panning properties of a Track.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the mixer device.</Doc></Property><Property compare="common" name="crossfade_assign"><Doc type="Description">Player- and ReturnTracks only: Access to the Track’s Crossfade Assign State.</Doc></Property><Method compare="common" name="add_crossfade_assign_listener()"><Doc type="Format">add_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_crossfade_assign_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “crossfade_assign” has changed. </Doc></Method><Method compare="common" name="crossfade_assign_has_listener()"><Doc type="Format">crossfade_assign_has_listener( (MixerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool crossfade_assign_has_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “crossfade_assign”. </Doc></Method><Method compare="common" name="remove_crossfade_assign_listener()"><Doc type="Format">remove_crossfade_assign_listener( (MixerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_crossfade_assign_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “crossfade_assign”. </Doc></Method><Sub-Class compare="common" name="crossfade_assignments"><Value compare="common" name="A" /><Value compare="common" name="B" /><Value compare="common" name="NONE" /></Sub-Class><Property compare="common" name="crossfader"><Doc type="Description">MasterTrack only: Const access to the Crossfader.</Doc></Property><Property compare="common" name="cue_volume"><Doc type="Description">MasterTrack only: Const access to the Cue Volume Parameter.</Doc></Property><Property compare="common" name="left_split_stereo"><Doc type="Description">Const access to the Track’s Left Split Stereo Panning Device Parameter.</Doc></Property><Property compare="common" name="panning"><Doc type="Description">Const access to the Tracks Panning Device Parameter.</Doc></Property><Property compare="common" name="panning_mode"><Doc type="Description">Access to the Track’s Panning Mode.</Doc></Property><Method compare="common" name="add_panning_mode_listener()"><Doc type="Format">add_panning_mode_listener( (MixerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_panning_mode_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “panning_mode” has changed. </Doc></Method><Method compare="common" name="panning_mode_has_listener()"><Doc type="Format">panning_mode_has_listener( (MixerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool panning_mode_has_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “panning_mode”. </Doc></Method><Method compare="common" name="remove_panning_mode_listener()"><Doc type="Format">remove_panning_mode_listener( (MixerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_panning_mode_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “panning_mode”. </Doc></Method><Sub-Class compare="common" name="panning_modes"><Value compare="common" name="stereo" /><Value compare="common" name="stereo_split" /></Sub-Class><Property compare="common" name="right_split_stereo"><Doc type="Description">Const access to the Track’s Right Split Stereo Panning Device Parameter.</Doc></Property><Property compare="common" name="sends"><Doc type="Description">Const access to the Tracks list of Send Amount Device Parameters.</Doc></Property><Method compare="common" name="add_sends_listener()"><Doc type="Format">add_sends_listener( (MixerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_sends_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “sends” has changed. </Doc></Method><Method compare="common" name="remove_sends_listener()"><Doc type="Format">remove_sends_listener( (MixerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_sends_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “sends”. </Doc></Method><Method compare="common" name="sends_has_listener()"><Doc type="Format">sends_has_listener( (MixerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool sends_has_listener(TPyHandle&lt;ATrackDevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “sends”. </Doc></Method><Property compare="common" name="song_tempo"><Doc type="Description">MasterTrack only: Const access to the Song’s Tempo.</Doc></Property><Property compare="common" name="track_activator"><Doc type="Description">Const access to the Tracks Activator Device Parameter.</Doc></Property><Property compare="common" name="volume"><Doc type="Description">Const access to the Tracks Volume Device Parameter.</Doc></Property></Class></Module><Module compare="common" name="PluginDevice"><Class compare="common" name="PluginDevice"><Doc type="Description">This class represents a plugin device.</Doc><Class compare="common" name="View"><Doc type="Description">Representing the view aspects of a device.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the View.</Doc></Property><Property compare="common" name="is_collapsed"><Doc type="Description">Get/Set/Listen if the device is shown collapsed in the device chain.</Doc></Property><Method compare="common" name="add_is_collapsed_listener()"><Doc type="Format">add_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_collapsed” has changed. </Doc></Method><Method compare="common" name="is_collapsed_has_listener()"><Doc type="Format">is_collapsed_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_collapsed”. </Doc></Method><Method compare="common" name="remove_is_collapsed_listener()"><Doc type="Format">remove_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_collapsed”. </Doc></Method></Class><Method compare="common" name="_get_parameters()"><Doc type="Format">_get_parameters( (Device)arg1) → Vector</Doc><Doc type="Cpp-Signature">std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; _get_parameters(TPyHandle&lt;ADevice&gt;)</Doc><Doc type="Description" /></Method><Property compare="common" name="_live_ptr" /><Property compare="common" name="can_have_chains"><Doc type="Description">Returns true if the device is a rack.</Doc></Property><Property compare="common" name="can_have_drum_pads"><Doc type="Description">Returns true if the device is a drum rack.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the Device.</Doc></Property><Property compare="common" name="class_display_name"><Doc type="Description">Return const access to the name of the device’s class name as displayed in Live’s browser and device chain</Doc></Property><Property compare="common" name="class_name"><Doc type="Description">Return const access to the name of the device’s class.</Doc></Property><Property compare="common" name="is_active"><Doc type="Description">Return const access to whether this device is active. This will be false bothwhen the device is off and when it’s inside a rack device which is off.</Doc></Property><Method compare="common" name="add_is_active_listener()"><Doc type="Format">add_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_active” has changed. </Doc></Method><Method compare="common" name="is_active_has_listener()"><Doc type="Format">is_active_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_active_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_active”. </Doc></Method><Method compare="common" name="remove_is_active_listener()"><Doc type="Format">remove_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_active”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Return access to the name of the device.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="parameters"><Doc type="Description">Const access to the list of available automatable parameters for this device.</Doc></Property><Method compare="common" name="add_parameters_listener()"><Doc type="Format">add_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “parameters” has changed. </Doc></Method><Method compare="common" name="parameters_has_listener()"><Doc type="Format">parameters_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool parameters_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “parameters”. </Doc></Method><Method compare="common" name="remove_parameters_listener()"><Doc type="Format">remove_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “parameters”. </Doc></Method><Property compare="common" name="presets"><Doc type="Description">Get the list of presets the plugin offers.</Doc></Property><Method compare="common" name="add_presets_listener()"><Doc type="Format">add_presets_listener( (PluginDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_presets_listener(TPluginDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “presets” has changed. </Doc></Method><Method compare="common" name="presets_has_listener()"><Doc type="Format">presets_has_listener( (PluginDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool presets_has_listener(TPluginDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “presets”. </Doc></Method><Method compare="common" name="remove_presets_listener()"><Doc type="Format">remove_presets_listener( (PluginDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_presets_listener(TPluginDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “presets”. </Doc></Method><Property compare="common" name="selected_preset_index"><Doc type="Description">Access to the index of the currently selected preset.</Doc></Property><Method compare="common" name="add_selected_preset_index_listener()"><Doc type="Format">add_selected_preset_index_listener( (PluginDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_selected_preset_index_listener(TPluginDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_preset_index” has changed. </Doc></Method><Method compare="common" name="remove_selected_preset_index_listener()"><Doc type="Format">remove_selected_preset_index_listener( (PluginDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_selected_preset_index_listener(TPluginDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_preset_index”. </Doc></Method><Method compare="common" name="selected_preset_index_has_listener()"><Doc type="Format">selected_preset_index_has_listener( (PluginDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool selected_preset_index_has_listener(TPluginDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_preset_index”. </Doc></Method><Method compare="common" name="store_chosen_bank()"><Doc type="Format">store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) → None</Doc><Doc type="Cpp-Signature">void store_chosen_bank(TPyHandle&lt;ADevice&gt;, int, int)</Doc><Doc type="Description">Set the selected bank in the device for persistency. </Doc></Method><Property compare="common" name="type"><Doc type="Description">Return the type of the device.</Doc></Property><Property compare="common" name="view"><Doc type="Description">Representing the view aspects of a device.</Doc></Property></Class></Module><Module compare="common" name="RackDevice"><Class compare="common" name="RackDevice"><Doc type="Description">This class represents a Rack device.</Doc><Class compare="common" name="View"><Doc type="Description">Representing the view aspects of a rack device.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the View.</Doc></Property><Property compare="common" name="drum_pads_scroll_position"><Doc type="Description">Access to the index of the lowest visible row of pads. Throws an exception if can_have_drum_pads is false.</Doc></Property><Method compare="common" name="add_drum_pads_scroll_position_listener()"><Doc type="Format">add_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_drum_pads_scroll_position_listener(TRackDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “drum_pads_scroll_position” has changed. </Doc></Method><Method compare="common" name="drum_pads_scroll_position_has_listener()"><Doc type="Format">drum_pads_scroll_position_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool drum_pads_scroll_position_has_listener(TRackDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “drum_pads_scroll_position”. </Doc></Method><Method compare="common" name="remove_drum_pads_scroll_position_listener()"><Doc type="Format">remove_drum_pads_scroll_position_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_drum_pads_scroll_position_listener(TRackDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “drum_pads_scroll_position”. </Doc></Method><Property compare="common" name="is_collapsed"><Doc type="Description">Get/Set/Listen if the device is shown collapsed in the device chain.</Doc></Property><Method compare="common" name="add_is_collapsed_listener()"><Doc type="Format">add_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_collapsed” has changed. </Doc></Method><Method compare="common" name="is_collapsed_has_listener()"><Doc type="Format">is_collapsed_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_collapsed”. </Doc></Method><Method compare="common" name="remove_is_collapsed_listener()"><Doc type="Format">remove_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_collapsed”. </Doc></Method><Property compare="common" name="is_showing_chain_devices"><Doc type="Description">Return whether the devices in the currently selected chain are visible. Throws an exception if can_have_chains is false.</Doc></Property><Method compare="common" name="add_is_showing_chain_devices_listener()"><Doc type="Format">add_is_showing_chain_devices_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_showing_chain_devices_listener(TRackDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_showing_chain_devices” has changed. </Doc></Method><Method compare="common" name="is_showing_chain_devices_has_listener()"><Doc type="Format">is_showing_chain_devices_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_showing_chain_devices_has_listener(TRackDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_showing_chain_devices”. </Doc></Method><Method compare="common" name="remove_is_showing_chain_devices_listener()"><Doc type="Format">remove_is_showing_chain_devices_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_showing_chain_devices_listener(TRackDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_showing_chain_devices”. </Doc></Method><Property compare="common" name="selected_chain"><Doc type="Description">Return access to the currently selected chain.</Doc></Property><Method compare="common" name="add_selected_chain_listener()"><Doc type="Format">add_selected_chain_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_selected_chain_listener(TRackDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_chain” has changed. </Doc></Method><Method compare="common" name="remove_selected_chain_listener()"><Doc type="Format">remove_selected_chain_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_selected_chain_listener(TRackDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_chain”. </Doc></Method><Method compare="common" name="selected_chain_has_listener()"><Doc type="Format">selected_chain_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool selected_chain_has_listener(TRackDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_chain”. </Doc></Method><Property compare="common" name="selected_drum_pad"><Doc type="Description">Return access to the currently selected drum pad. Throws an exception if can_have_drum_pads is false.</Doc></Property><Method compare="common" name="add_selected_drum_pad_listener()"><Doc type="Format">add_selected_drum_pad_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_selected_drum_pad_listener(TRackDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_drum_pad” has changed. </Doc></Method><Method compare="common" name="remove_selected_drum_pad_listener()"><Doc type="Format">remove_selected_drum_pad_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_selected_drum_pad_listener(TRackDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_drum_pad”. </Doc></Method><Method compare="common" name="selected_drum_pad_has_listener()"><Doc type="Format">selected_drum_pad_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool selected_drum_pad_has_listener(TRackDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_drum_pad”. </Doc></Method></Class><Method compare="common" name="_get_parameters()"><Doc type="Format">_get_parameters( (Device)arg1) → Vector</Doc><Doc type="Cpp-Signature">std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; _get_parameters(TPyHandle&lt;ADevice&gt;)</Doc><Doc type="Description" /></Method><Property compare="common" name="_live_ptr" /><Property compare="common" name="can_have_chains"><Doc type="Description">Returns true if the device is a rack.</Doc></Property><Property compare="common" name="can_have_drum_pads"><Doc type="Description">Returns true if the device is a drum rack.</Doc></Property><Property compare="common" name="can_show_chains"><Doc type="Description">return True, if this Rack contains a rack instrument device that is capable of showing its chains in session view.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the Device.</Doc></Property><Property compare="common" name="chains"><Doc type="Description">Return const access to the list of chains in this device. Throws an exception if can_have_chains is false.</Doc></Property><Method compare="common" name="add_chains_listener()"><Doc type="Format">add_chains_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_chains_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “chains” has changed. </Doc></Method><Method compare="common" name="chains_has_listener()"><Doc type="Format">chains_has_listener( (RackDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool chains_has_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “chains”. </Doc></Method><Method compare="common" name="remove_chains_listener()"><Doc type="Format">remove_chains_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_chains_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “chains”. </Doc></Method><Property compare="common" name="class_display_name"><Doc type="Description">Return const access to the name of the device’s class name as displayed in Live’s browser and device chain</Doc></Property><Property compare="common" name="class_name"><Doc type="Description">Return const access to the name of the device’s class.</Doc></Property><Method compare="common" name="copy_pad()"><Doc type="Format">copy_pad( (RackDevice)arg1, (int)arg2, (int)arg3) → None</Doc><Doc type="Cpp-Signature">void copy_pad(TRackDevicePyHandle, int, int)</Doc><Doc type="Description">Copies all contents of a drum pad from a source pad into a destination pad. copy_pad(source_index, destination_index) where source_index and destination_index correspond to the note number/index of the drum pad in a drum rack. Throws an exception when the source pad is empty, or when the source or destination indices are not between 0 - 127. </Doc></Method><Property compare="common" name="drum_pads"><Doc type="Description">Return const access to the list of drum pads in this device. Throws an exception if can_have_drum_pads is false.</Doc></Property><Method compare="common" name="add_drum_pads_listener()"><Doc type="Format">add_drum_pads_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_drum_pads_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “drum_pads” has changed. </Doc></Method><Method compare="common" name="drum_pads_has_listener()"><Doc type="Format">drum_pads_has_listener( (RackDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool drum_pads_has_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “drum_pads”. </Doc></Method><Method compare="common" name="remove_drum_pads_listener()"><Doc type="Format">remove_drum_pads_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_drum_pads_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “drum_pads”. </Doc></Method><Property compare="common" name="has_drum_pads"><Doc type="Description">Returns true if the device is a drum rack which has drum pads. Throws an exception if can_have_drum_pads is false.</Doc></Property><Method compare="common" name="add_has_drum_pads_listener()"><Doc type="Format">add_has_drum_pads_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_has_drum_pads_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_drum_pads” has changed. </Doc></Method><Method compare="common" name="has_drum_pads_has_listener()"><Doc type="Format">has_drum_pads_has_listener( (RackDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool has_drum_pads_has_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_drum_pads”. </Doc></Method><Method compare="common" name="remove_has_drum_pads_listener()"><Doc type="Format">remove_has_drum_pads_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_has_drum_pads_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_drum_pads”. </Doc></Method><Property compare="common" name="has_macro_mappings"><Doc type="Description">Returns true if any of the rack’s macros are mapped to a parameter.</Doc></Property><Method compare="common" name="add_has_macro_mappings_listener()"><Doc type="Format">add_has_macro_mappings_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_has_macro_mappings_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_macro_mappings” has changed. </Doc></Method><Method compare="common" name="has_macro_mappings_has_listener()"><Doc type="Format">has_macro_mappings_has_listener( (RackDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool has_macro_mappings_has_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_macro_mappings”. </Doc></Method><Method compare="common" name="remove_has_macro_mappings_listener()"><Doc type="Format">remove_has_macro_mappings_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_has_macro_mappings_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_macro_mappings”. </Doc></Method><Property compare="common" name="is_active"><Doc type="Description">Return const access to whether this device is active. This will be false bothwhen the device is off and when it’s inside a rack device which is off.</Doc></Property><Method compare="common" name="add_is_active_listener()"><Doc type="Format">add_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_active” has changed. </Doc></Method><Method compare="common" name="is_active_has_listener()"><Doc type="Format">is_active_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_active_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_active”. </Doc></Method><Method compare="common" name="remove_is_active_listener()"><Doc type="Format">remove_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_active”. </Doc></Method><Property compare="common" name="is_showing_chains"><Doc type="Description">Returns True, if it is showing chains.</Doc></Property><Method compare="common" name="add_is_showing_chains_listener()"><Doc type="Format">add_is_showing_chains_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_showing_chains_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_showing_chains” has changed. </Doc></Method><Method compare="common" name="is_showing_chains_has_listener()"><Doc type="Format">is_showing_chains_has_listener( (RackDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_showing_chains_has_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_showing_chains”. </Doc></Method><Method compare="common" name="remove_is_showing_chains_listener()"><Doc type="Format">remove_is_showing_chains_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_showing_chains_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_showing_chains”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Return access to the name of the device.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="parameters"><Doc type="Description">Const access to the list of available automatable parameters for this device.</Doc></Property><Method compare="common" name="add_parameters_listener()"><Doc type="Format">add_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “parameters” has changed. </Doc></Method><Method compare="common" name="parameters_has_listener()"><Doc type="Format">parameters_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool parameters_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “parameters”. </Doc></Method><Method compare="common" name="remove_parameters_listener()"><Doc type="Format">remove_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “parameters”. </Doc></Method><Property compare="common" name="return_chains"><Doc type="Description">Return const access to the list of return chains in this device. Throws an exception if can_have_chains is false.</Doc></Property><Method compare="common" name="add_return_chains_listener()"><Doc type="Format">add_return_chains_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_return_chains_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “return_chains” has changed. </Doc></Method><Method compare="common" name="remove_return_chains_listener()"><Doc type="Format">remove_return_chains_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_return_chains_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “return_chains”. </Doc></Method><Method compare="common" name="return_chains_has_listener()"><Doc type="Format">return_chains_has_listener( (RackDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool return_chains_has_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “return_chains”. </Doc></Method><Method compare="common" name="store_chosen_bank()"><Doc type="Format">store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) → None</Doc><Doc type="Cpp-Signature">void store_chosen_bank(TPyHandle&lt;ADevice&gt;, int, int)</Doc><Doc type="Description">Set the selected bank in the device for persistency. </Doc></Method><Property compare="common" name="type"><Doc type="Description">Return the type of the device.</Doc></Property><Property compare="common" name="view"><Doc type="Description">Representing the view aspects of a device.</Doc></Property><Property compare="common" name="visible_drum_pads"><Doc type="Description">Return const access to the list of visible drum pads in this device. Throws an exception if can_have_drum_pads is false.</Doc></Property><Method compare="common" name="add_visible_drum_pads_listener()"><Doc type="Format">add_visible_drum_pads_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_visible_drum_pads_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “visible_drum_pads” has changed. </Doc></Method><Method compare="common" name="remove_visible_drum_pads_listener()"><Doc type="Format">remove_visible_drum_pads_listener( (RackDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_visible_drum_pads_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “visible_drum_pads”. </Doc></Method><Method compare="common" name="visible_drum_pads_has_listener()"><Doc type="Format">visible_drum_pads_has_listener( (RackDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool visible_drum_pads_has_listener(TRackDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “visible_drum_pads”. </Doc></Method></Class></Module><Module compare="common" name="SimplerDevice"><Class compare="common" name="PlaybackMode"><Value compare="common" name="classic" /><Value compare="common" name="one_shot" /><Value compare="common" name="slicing" /></Class><Class compare="common" name="SimplerDevice"><Doc type="Description">This class represents a Simpler device.</Doc><Class compare="common" name="View"><Doc type="Description">Representing the view aspects of a simpler device.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the View.</Doc></Property><Property compare="common" name="is_collapsed"><Doc type="Description">Get/Set/Listen if the device is shown collapsed in the device chain.</Doc></Property><Method compare="common" name="add_is_collapsed_listener()"><Doc type="Format">add_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_collapsed” has changed. </Doc></Method><Method compare="common" name="is_collapsed_has_listener()"><Doc type="Format">is_collapsed_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_collapsed”. </Doc></Method><Method compare="common" name="remove_is_collapsed_listener()"><Doc type="Format">remove_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_collapsed”. </Doc></Method><Property compare="common" name="sample_end"><Doc type="Description">Access to the modulated samples end position in samples. Returns -1 in case there is no sample loaded.</Doc></Property><Method compare="common" name="add_sample_end_listener()"><Doc type="Format">add_sample_end_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_sample_end_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “sample_end” has changed. </Doc></Method><Method compare="common" name="remove_sample_end_listener()"><Doc type="Format">remove_sample_end_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_sample_end_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “sample_end”. </Doc></Method><Method compare="common" name="sample_end_has_listener()"><Doc type="Format">sample_end_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool sample_end_has_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “sample_end”. </Doc></Method><Property compare="common" name="sample_env_fade_in"><Doc type="Description">Access to the envelope fade-in time in samples. Returned value is only in use when Simpler is in one-shot mode. Returns -1 in case there is no sample loaded.</Doc></Property><Method compare="common" name="add_sample_env_fade_in_listener()"><Doc type="Format">add_sample_env_fade_in_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_sample_env_fade_in_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “sample_env_fade_in” has changed. </Doc></Method><Method compare="common" name="remove_sample_env_fade_in_listener()"><Doc type="Format">remove_sample_env_fade_in_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_sample_env_fade_in_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “sample_env_fade_in”. </Doc></Method><Method compare="common" name="sample_env_fade_in_has_listener()"><Doc type="Format">sample_env_fade_in_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool sample_env_fade_in_has_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “sample_env_fade_in”. </Doc></Method><Property compare="common" name="sample_env_fade_out"><Doc type="Description">Access to the envelope fade-out time in samples. Returned value is only in use when Simpler is in one-shot mode. Returns -1 in case there is no sample loaded.</Doc></Property><Method compare="common" name="add_sample_env_fade_out_listener()"><Doc type="Format">add_sample_env_fade_out_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_sample_env_fade_out_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “sample_env_fade_out” has changed. </Doc></Method><Method compare="common" name="remove_sample_env_fade_out_listener()"><Doc type="Format">remove_sample_env_fade_out_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_sample_env_fade_out_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “sample_env_fade_out”. </Doc></Method><Method compare="common" name="sample_env_fade_out_has_listener()"><Doc type="Format">sample_env_fade_out_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool sample_env_fade_out_has_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “sample_env_fade_out”. </Doc></Method><Property compare="common" name="sample_loop_end"><Doc type="Description">Access to the modulated samples loop end position in samples. Returns -1 in case there is no sample loaded.</Doc></Property><Method compare="common" name="add_sample_loop_end_listener()"><Doc type="Format">add_sample_loop_end_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_sample_loop_end_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “sample_loop_end” has changed. </Doc></Method><Method compare="common" name="remove_sample_loop_end_listener()"><Doc type="Format">remove_sample_loop_end_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_sample_loop_end_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “sample_loop_end”. </Doc></Method><Method compare="common" name="sample_loop_end_has_listener()"><Doc type="Format">sample_loop_end_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool sample_loop_end_has_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “sample_loop_end”. </Doc></Method><Property compare="common" name="sample_loop_fade"><Doc type="Description">Access to the modulated samples loop fade position in samples. Returns -1 in case there is no sample loaded.</Doc></Property><Method compare="common" name="add_sample_loop_fade_listener()"><Doc type="Format">add_sample_loop_fade_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_sample_loop_fade_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “sample_loop_fade” has changed. </Doc></Method><Method compare="common" name="remove_sample_loop_fade_listener()"><Doc type="Format">remove_sample_loop_fade_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_sample_loop_fade_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “sample_loop_fade”. </Doc></Method><Method compare="common" name="sample_loop_fade_has_listener()"><Doc type="Format">sample_loop_fade_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool sample_loop_fade_has_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “sample_loop_fade”. </Doc></Method><Property compare="common" name="sample_loop_start"><Doc type="Description">Access to the modulated samples loop start position in samples. Returns -1 in case there is no sample loaded.</Doc></Property><Method compare="common" name="add_sample_loop_start_listener()"><Doc type="Format">add_sample_loop_start_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_sample_loop_start_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “sample_loop_start” has changed. </Doc></Method><Method compare="common" name="remove_sample_loop_start_listener()"><Doc type="Format">remove_sample_loop_start_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_sample_loop_start_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “sample_loop_start”. </Doc></Method><Method compare="common" name="sample_loop_start_has_listener()"><Doc type="Format">sample_loop_start_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool sample_loop_start_has_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “sample_loop_start”. </Doc></Method><Property compare="common" name="sample_start"><Doc type="Description">Access to the modulated samples start position in samples. Returns -1 in case there is no sample loaded.</Doc></Property><Method compare="common" name="add_sample_start_listener()"><Doc type="Format">add_sample_start_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_sample_start_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “sample_start” has changed. </Doc></Method><Method compare="common" name="remove_sample_start_listener()"><Doc type="Format">remove_sample_start_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_sample_start_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “sample_start”. </Doc></Method><Method compare="common" name="sample_start_has_listener()"><Doc type="Format">sample_start_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool sample_start_has_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “sample_start”. </Doc></Method><Property compare="common" name="selected_slice"><Doc type="Description">Access to the selected slice.</Doc></Property><Method compare="common" name="add_selected_slice_listener()"><Doc type="Format">add_selected_slice_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_selected_slice_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_slice” has changed. </Doc></Method><Method compare="common" name="remove_selected_slice_listener()"><Doc type="Format">remove_selected_slice_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_selected_slice_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_slice”. </Doc></Method><Method compare="common" name="selected_slice_has_listener()"><Doc type="Format">selected_slice_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool selected_slice_has_listener(TSimplerDevicePyViewData, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_slice”. </Doc></Method></Class><Method compare="common" name="_get_parameters()"><Doc type="Format">_get_parameters( (Device)arg1) → Vector</Doc><Doc type="Cpp-Signature">std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; _get_parameters(TPyHandle&lt;ADevice&gt;)</Doc><Doc type="Description" /></Method><Property compare="common" name="_live_ptr" /><Property compare="common" name="can_have_chains"><Doc type="Description">Returns true if the device is a rack.</Doc></Property><Property compare="common" name="can_have_drum_pads"><Doc type="Description">Returns true if the device is a drum rack.</Doc></Property><Property compare="common" name="can_warp_as"><Doc type="Description">Returns true if warp_as is available.</Doc></Property><Method compare="common" name="add_can_warp_as_listener()"><Doc type="Format">add_can_warp_as_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_can_warp_as_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “can_warp_as” has changed. </Doc></Method><Method compare="common" name="can_warp_as_has_listener()"><Doc type="Format">can_warp_as_has_listener( (SimplerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool can_warp_as_has_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “can_warp_as”. </Doc></Method><Method compare="common" name="remove_can_warp_as_listener()"><Doc type="Format">remove_can_warp_as_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_can_warp_as_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “can_warp_as”. </Doc></Method><Property compare="common" name="can_warp_double"><Doc type="Description">Returns true if warp_double is available.</Doc></Property><Method compare="common" name="add_can_warp_double_listener()"><Doc type="Format">add_can_warp_double_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_can_warp_double_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “can_warp_double” has changed. </Doc></Method><Method compare="common" name="can_warp_double_has_listener()"><Doc type="Format">can_warp_double_has_listener( (SimplerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool can_warp_double_has_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “can_warp_double”. </Doc></Method><Method compare="common" name="remove_can_warp_double_listener()"><Doc type="Format">remove_can_warp_double_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_can_warp_double_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “can_warp_double”. </Doc></Method><Property compare="common" name="can_warp_half"><Doc type="Description">Returns true if warp_half is available.</Doc></Property><Method compare="common" name="add_can_warp_half_listener()"><Doc type="Format">add_can_warp_half_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_can_warp_half_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “can_warp_half” has changed. </Doc></Method><Method compare="common" name="can_warp_half_has_listener()"><Doc type="Format">can_warp_half_has_listener( (SimplerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool can_warp_half_has_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “can_warp_half”. </Doc></Method><Method compare="common" name="remove_can_warp_half_listener()"><Doc type="Format">remove_can_warp_half_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_can_warp_half_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “can_warp_half”. </Doc></Method><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the Device.</Doc></Property><Property compare="common" name="class_display_name"><Doc type="Description">Return const access to the name of the device’s class name as displayed in Live’s browser and device chain</Doc></Property><Property compare="common" name="class_name"><Doc type="Description">Return const access to the name of the device’s class.</Doc></Property><Method compare="common" name="crop()"><Doc type="Format">crop( (SimplerDevice)self) → None</Doc><Doc type="Cpp-Signature">void crop(TSimplerDevicePyHandle)</Doc><Doc type="Description">Crop the loaded sample to the active area between start- and end marker. Calling this method on an empty simpler raises an error. </Doc></Method><Method compare="common" name="guess_playback_length()"><Doc type="Format">guess_playback_length( (SimplerDevice)self) → float</Doc><Doc type="Cpp-Signature">double guess_playback_length(TSimplerDevicePyHandle)</Doc><Doc type="Description">Return an estimated beat time for the playback length between start- and end-marker. Calling this method on an empty simpler raises an error. </Doc></Method><Property compare="common" name="is_active"><Doc type="Description">Return const access to whether this device is active. This will be false bothwhen the device is off and when it’s inside a rack device which is off.</Doc></Property><Method compare="common" name="add_is_active_listener()"><Doc type="Format">add_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_active” has changed. </Doc></Method><Method compare="common" name="is_active_has_listener()"><Doc type="Format">is_active_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_active_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_active”. </Doc></Method><Method compare="common" name="remove_is_active_listener()"><Doc type="Format">remove_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_active”. </Doc></Method><Property compare="common" name="multi_sample_mode"><Doc type="Description">Returns whether Simpler is in mulit-sample mode.</Doc></Property><Method compare="common" name="add_multi_sample_mode_listener()"><Doc type="Format">add_multi_sample_mode_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_multi_sample_mode_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “multi_sample_mode” has changed. </Doc></Method><Method compare="common" name="multi_sample_mode_has_listener()"><Doc type="Format">multi_sample_mode_has_listener( (SimplerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool multi_sample_mode_has_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “multi_sample_mode”. </Doc></Method><Method compare="common" name="remove_multi_sample_mode_listener()"><Doc type="Format">remove_multi_sample_mode_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_multi_sample_mode_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “multi_sample_mode”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Return access to the name of the device.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="pad_slicing"><Doc type="Description">When set to true, slices can be added in slicing mode by playing notes .that are not assigned to slices, yet.</Doc></Property><Method compare="common" name="add_pad_slicing_listener()"><Doc type="Format">add_pad_slicing_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_pad_slicing_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “pad_slicing” has changed. </Doc></Method><Method compare="common" name="pad_slicing_has_listener()"><Doc type="Format">pad_slicing_has_listener( (SimplerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool pad_slicing_has_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “pad_slicing”. </Doc></Method><Method compare="common" name="remove_pad_slicing_listener()"><Doc type="Format">remove_pad_slicing_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_pad_slicing_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “pad_slicing”. </Doc></Method><Property compare="common" name="parameters"><Doc type="Description">Const access to the list of available automatable parameters for this device.</Doc></Property><Method compare="common" name="add_parameters_listener()"><Doc type="Format">add_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “parameters” has changed. </Doc></Method><Method compare="common" name="parameters_has_listener()"><Doc type="Format">parameters_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool parameters_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “parameters”. </Doc></Method><Method compare="common" name="remove_parameters_listener()"><Doc type="Format">remove_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “parameters”. </Doc></Method><Property compare="common" name="playback_mode"><Doc type="Description">Access to Simpler’s playback mode.</Doc></Property><Method compare="common" name="add_playback_mode_listener()"><Doc type="Format">add_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_playback_mode_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “playback_mode” has changed. </Doc></Method><Method compare="common" name="playback_mode_has_listener()"><Doc type="Format">playback_mode_has_listener( (SimplerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool playback_mode_has_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “playback_mode”. </Doc></Method><Method compare="common" name="remove_playback_mode_listener()"><Doc type="Format">remove_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_playback_mode_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “playback_mode”. </Doc></Method><Property compare="common" name="playing_position"><Doc type="Description">Constant access to the current playing position in the sample.The returned value is the normalized position between sample start and end.</Doc></Property><Method compare="common" name="add_playing_position_listener()"><Doc type="Format">add_playing_position_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_playing_position_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “playing_position” has changed. </Doc></Method><Method compare="common" name="playing_position_has_listener()"><Doc type="Format">playing_position_has_listener( (SimplerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool playing_position_has_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “playing_position”. </Doc></Method><Method compare="common" name="remove_playing_position_listener()"><Doc type="Format">remove_playing_position_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_playing_position_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “playing_position”. </Doc></Method><Property compare="common" name="playing_position_enabled"><Doc type="Description">Returns whether Simpler is showing the playing position.The returned value is True while the sample is played back</Doc></Property><Method compare="common" name="add_playing_position_enabled_listener()"><Doc type="Format">add_playing_position_enabled_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_playing_position_enabled_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “playing_position_enabled” has changed. </Doc></Method><Method compare="common" name="playing_position_enabled_has_listener()"><Doc type="Format">playing_position_enabled_has_listener( (SimplerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool playing_position_enabled_has_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “playing_position_enabled”. </Doc></Method><Method compare="common" name="remove_playing_position_enabled_listener()"><Doc type="Format">remove_playing_position_enabled_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_playing_position_enabled_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “playing_position_enabled”. </Doc></Method><Property compare="common" name="retrigger"><Doc type="Description">Access to Simpler’s retrigger mode.</Doc></Property><Method compare="common" name="add_retrigger_listener()"><Doc type="Format">add_retrigger_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_retrigger_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “retrigger” has changed. </Doc></Method><Method compare="common" name="remove_retrigger_listener()"><Doc type="Format">remove_retrigger_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_retrigger_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “retrigger”. </Doc></Method><Method compare="common" name="retrigger_has_listener()"><Doc type="Format">retrigger_has_listener( (SimplerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool retrigger_has_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “retrigger”. </Doc></Method><Method compare="common" name="reverse()"><Doc type="Format">reverse( (SimplerDevice)self) → None</Doc><Doc type="Cpp-Signature">void reverse(TSimplerDevicePyHandle)</Doc><Doc type="Description">Reverse the loaded sample. Calling this method on an empty simpler raises an error. </Doc></Method><Property compare="common" name="sample"><Doc type="Description">Get the loaded Sample.</Doc></Property><Method compare="common" name="add_sample_listener()"><Doc type="Format">add_sample_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_sample_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “sample” has changed. </Doc></Method><Method compare="common" name="remove_sample_listener()"><Doc type="Format">remove_sample_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_sample_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “sample”. </Doc></Method><Method compare="common" name="sample_has_listener()"><Doc type="Format">sample_has_listener( (SimplerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool sample_has_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “sample”. </Doc></Method><Property compare="common" name="slicing_playback_mode"><Doc type="Description">Access to Simpler’s slicing playback mode.</Doc></Property><Method compare="common" name="add_slicing_playback_mode_listener()"><Doc type="Format">add_slicing_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_slicing_playback_mode_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “slicing_playback_mode” has changed. </Doc></Method><Method compare="common" name="remove_slicing_playback_mode_listener()"><Doc type="Format">remove_slicing_playback_mode_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_slicing_playback_mode_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “slicing_playback_mode”. </Doc></Method><Method compare="common" name="slicing_playback_mode_has_listener()"><Doc type="Format">slicing_playback_mode_has_listener( (SimplerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool slicing_playback_mode_has_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “slicing_playback_mode”. </Doc></Method><Method compare="common" name="store_chosen_bank()"><Doc type="Format">store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) → None</Doc><Doc type="Cpp-Signature">void store_chosen_bank(TPyHandle&lt;ADevice&gt;, int, int)</Doc><Doc type="Description">Set the selected bank in the device for persistency. </Doc></Method><Property compare="common" name="type"><Doc type="Description">Return the type of the device.</Doc></Property><Property compare="common" name="view"><Doc type="Description">Representing the view aspects of a device.</Doc></Property><Property compare="common" name="voices"><Doc type="Description">Access to the number of voices in Simpler.</Doc></Property><Method compare="common" name="add_voices_listener()"><Doc type="Format">add_voices_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_voices_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “voices” has changed. </Doc></Method><Method compare="common" name="remove_voices_listener()"><Doc type="Format">remove_voices_listener( (SimplerDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_voices_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “voices”. </Doc></Method><Method compare="common" name="voices_has_listener()"><Doc type="Format">voices_has_listener( (SimplerDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool voices_has_listener(TSimplerDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “voices”. </Doc></Method><Method compare="common" name="warp_as()"><Doc type="Format">warp_as( (SimplerDevice)self, (float)beat_time) → None</Doc><Doc type="Cpp-Signature">void warp_as(TSimplerDevicePyHandle, double)</Doc><Doc type="Description">Warp the playback region between start- and end-marker as the given length. Calling this method on an empty simpler raises an error. </Doc></Method><Method compare="common" name="warp_double()"><Doc type="Format">warp_double( (SimplerDevice)self) → None</Doc><Doc type="Cpp-Signature">void warp_double(TSimplerDevicePyHandle)</Doc><Doc type="Description">Doubles the tempo for region between start- and end-marker. </Doc></Method><Method compare="common" name="warp_half()"><Doc type="Format">warp_half( (SimplerDevice)self) → None</Doc><Doc type="Cpp-Signature">void warp_half(TSimplerDevicePyHandle)</Doc><Doc type="Description">Halves the tempo for region between start- and end-marker. </Doc></Method></Class><Class compare="common" name="SlicingPlaybackMode"><Value compare="common" name="mono" /><Value compare="common" name="poly" /><Value compare="common" name="thru" /></Class><Built-In compare="common" name="get_available_voice_numbers()"><Doc type="Format">get_available_voice_numbers() → IntVector</Doc><Doc type="Cpp-Signature">std::__1::vector&lt;int, std::__1::allocator&lt;int&gt; &gt; get_available_voice_numbers()</Doc><Doc type="Description">Get a vector of valid Simpler voice numbers. </Doc></Built-In></Module><Module compare="common" name="WavetableDevice"><Class compare="common" name="EffectMode"><Value compare="common" name="frequency_modulation" /><Value compare="common" name="none" /><Value compare="common" name="sync_and_pulse_width" /><Value compare="common" name="warp_and_fold" /></Class><Class compare="common" name="FilterRouting"><Value compare="common" name="parallel" /><Value compare="common" name="serial" /><Value compare="common" name="split" /></Class><Class compare="common" name="ModulationSource"><Value compare="common" name="amp_envelope" /><Value compare="common" name="envelope_2" /><Value compare="common" name="envelope_3" /><Value compare="common" name="lfo_1" /><Value compare="common" name="lfo_2" /><Value compare="common" name="midi_channel_pressure" /><Value compare="common" name="midi_mod_wheel" /><Value compare="common" name="midi_note" /><Value compare="common" name="midi_pitch_bend" /><Value compare="common" name="midi_velocity" /></Class><Class compare="common" name="UnisonMode"><Value compare="common" name="classic" /><Value compare="common" name="fast_shimmer" /><Value compare="common" name="none" /><Value compare="common" name="phase_sync" /><Value compare="common" name="position_spread" /><Value compare="common" name="random_note" /><Value compare="common" name="slow_shimmer" /></Class><Class compare="common" name="VoiceCount"><Value compare="common" name="eight" /><Value compare="common" name="five" /><Value compare="common" name="four" /><Value compare="common" name="seven" /><Value compare="common" name="six" /><Value compare="common" name="three" /><Value compare="common" name="two" /></Class><Class compare="common" name="Voicing"><Value compare="common" name="mono" /><Value compare="common" name="poly" /></Class><Class compare="common" name="WavetableDevice"><Doc type="Description">This class represents a Wavetable device.</Doc><Class compare="common" name="View"><Doc type="Description">Representing the view aspects of a Wavetable device.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the View.</Doc></Property><Property compare="common" name="is_collapsed"><Doc type="Description">Get/Set/Listen if the device is shown collapsed in the device chain.</Doc></Property><Method compare="common" name="add_is_collapsed_listener()"><Doc type="Format">add_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_collapsed” has changed. </Doc></Method><Method compare="common" name="is_collapsed_has_listener()"><Doc type="Format">is_collapsed_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_collapsed_has_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_collapsed”. </Doc></Method><Method compare="common" name="remove_is_collapsed_listener()"><Doc type="Format">remove_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_collapsed_listener(TPyViewData&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_collapsed”. </Doc></Method></Class><Method compare="common" name="_get_parameters()"><Doc type="Format">_get_parameters( (Device)arg1) → Vector</Doc><Doc type="Cpp-Signature">std::__1::vector&lt;TWeakPtr&lt;TPyHandleBase&gt;, std::__1::allocator&lt;TWeakPtr&lt;TPyHandleBase&gt; &gt; &gt; _get_parameters(TPyHandle&lt;ADevice&gt;)</Doc><Doc type="Description" /></Method><Property compare="common" name="_live_ptr" /><Method compare="common" name="add_parameter_to_modulation_matrix()"><Doc type="Format">add_parameter_to_modulation_matrix( (WavetableDevice)self, (DeviceParameter)parameter) → int</Doc><Doc type="Cpp-Signature">int add_parameter_to_modulation_matrix(TWavetableDevicePyHandle, TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description">Add a non-pitch parameter to the modulation matrix. </Doc></Method><Property compare="common" name="can_have_chains"><Doc type="Description">Returns true if the device is a rack.</Doc></Property><Property compare="common" name="can_have_drum_pads"><Doc type="Description">Returns true if the device is a drum rack.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the Device.</Doc></Property><Property compare="common" name="class_display_name"><Doc type="Description">Return const access to the name of the device’s class name as displayed in Live’s browser and device chain</Doc></Property><Property compare="common" name="class_name"><Doc type="Description">Return const access to the name of the device’s class.</Doc></Property><Property compare="common" name="filter_routing"><Doc type="Description">Return the current filter routing.</Doc></Property><Method compare="common" name="add_filter_routing_listener()"><Doc type="Format">add_filter_routing_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_filter_routing_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “filter_routing” has changed. </Doc></Method><Method compare="common" name="filter_routing_has_listener()"><Doc type="Format">filter_routing_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool filter_routing_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “filter_routing”. </Doc></Method><Method compare="common" name="remove_filter_routing_listener()"><Doc type="Format">remove_filter_routing_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_filter_routing_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “filter_routing”. </Doc></Method><Method compare="common" name="get_modulation_target_parameter_name()"><Doc type="Format">get_modulation_target_parameter_name( (WavetableDevice)self, (int)target_index) → unicode</Doc><Doc type="Cpp-Signature">TString get_modulation_target_parameter_name(TWavetableDevicePyHandle, int)</Doc><Doc type="Description">Get the parameter name of the modulation target at the given index. </Doc></Method><Method compare="common" name="get_modulation_value()"><Doc type="Format">get_modulation_value( (WavetableDevice)self, (int)target_index, (int)source) → float</Doc><Doc type="Cpp-Signature">float get_modulation_value(TWavetableDevicePyHandle, int, int)</Doc><Doc type="Description">Get the value of a modulation amount for the given target-source connection. </Doc></Method><Property compare="common" name="is_active"><Doc type="Description">Return const access to whether this device is active. This will be false bothwhen the device is off and when it’s inside a rack device which is off.</Doc></Property><Method compare="common" name="add_is_active_listener()"><Doc type="Format">add_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_active” has changed. </Doc></Method><Method compare="common" name="is_active_has_listener()"><Doc type="Format">is_active_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_active_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_active”. </Doc></Method><Method compare="common" name="remove_is_active_listener()"><Doc type="Format">remove_is_active_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_active_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_active”. </Doc></Method><Method compare="common" name="is_parameter_modulatable()"><Doc type="Format">is_parameter_modulatable( (WavetableDevice)self, (DeviceParameter)parameter) → bool</Doc><Doc type="Cpp-Signature">bool is_parameter_modulatable(TWavetableDevicePyHandle, TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description">Indicate whether the parameter is modulatable. Note that pitch parameters only exist in python and must be handled there. </Doc></Method><Method compare="common" name="add_modulation_matrix_changed_listener()"><Doc type="Format">add_modulation_matrix_changed_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_modulation_matrix_changed_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “modulation_matrix_changed” has changed. </Doc></Method><Method compare="common" name="modulation_matrix_changed_has_listener()"><Doc type="Format">modulation_matrix_changed_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool modulation_matrix_changed_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “modulation_matrix_changed”. </Doc></Method><Method compare="common" name="remove_modulation_matrix_changed_listener()"><Doc type="Format">remove_modulation_matrix_changed_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_modulation_matrix_changed_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “modulation_matrix_changed”. </Doc></Method><Property compare="common" name="mono_poly"><Doc type="Description">Return the current voicing mode.</Doc></Property><Method compare="common" name="add_mono_poly_listener()"><Doc type="Format">add_mono_poly_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_mono_poly_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “mono_poly” has changed. </Doc></Method><Method compare="common" name="mono_poly_has_listener()"><Doc type="Format">mono_poly_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool mono_poly_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “mono_poly”. </Doc></Method><Method compare="common" name="remove_mono_poly_listener()"><Doc type="Format">remove_mono_poly_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_mono_poly_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “mono_poly”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Return access to the name of the device.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="oscillator_1_effect_mode"><Doc type="Description">Return the current effect mode of the oscillator 1.</Doc></Property><Method compare="common" name="add_oscillator_1_effect_mode_listener()"><Doc type="Format">add_oscillator_1_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_oscillator_1_effect_mode_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “oscillator_1_effect_mode” has changed. </Doc></Method><Method compare="common" name="oscillator_1_effect_mode_has_listener()"><Doc type="Format">oscillator_1_effect_mode_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool oscillator_1_effect_mode_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “oscillator_1_effect_mode”. </Doc></Method><Method compare="common" name="remove_oscillator_1_effect_mode_listener()"><Doc type="Format">remove_oscillator_1_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_oscillator_1_effect_mode_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “oscillator_1_effect_mode”. </Doc></Method><Property compare="common" name="oscillator_1_wavetable_category"><Doc type="Description">Return the current wavetable category of the oscillator 1.</Doc></Property><Method compare="common" name="add_oscillator_1_wavetable_category_listener()"><Doc type="Format">add_oscillator_1_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_oscillator_1_wavetable_category_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “oscillator_1_wavetable_category” has changed. </Doc></Method><Method compare="common" name="oscillator_1_wavetable_category_has_listener()"><Doc type="Format">oscillator_1_wavetable_category_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool oscillator_1_wavetable_category_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “oscillator_1_wavetable_category”. </Doc></Method><Method compare="common" name="remove_oscillator_1_wavetable_category_listener()"><Doc type="Format">remove_oscillator_1_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_oscillator_1_wavetable_category_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “oscillator_1_wavetable_category”. </Doc></Method><Property compare="common" name="oscillator_1_wavetable_index"><Doc type="Description">Return the current wavetable index of the oscillator 1.</Doc></Property><Method compare="common" name="add_oscillator_1_wavetable_index_listener()"><Doc type="Format">add_oscillator_1_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_oscillator_1_wavetable_index_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “oscillator_1_wavetable_index” has changed. </Doc></Method><Method compare="common" name="oscillator_1_wavetable_index_has_listener()"><Doc type="Format">oscillator_1_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool oscillator_1_wavetable_index_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “oscillator_1_wavetable_index”. </Doc></Method><Method compare="common" name="remove_oscillator_1_wavetable_index_listener()"><Doc type="Format">remove_oscillator_1_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_oscillator_1_wavetable_index_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “oscillator_1_wavetable_index”. </Doc></Method><Property compare="common" name="oscillator_1_wavetables"><Doc type="Description">Get a vector of oscillator 1's wavetable names.</Doc></Property><Method compare="common" name="add_oscillator_1_wavetables_listener()"><Doc type="Format">add_oscillator_1_wavetables_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_oscillator_1_wavetables_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “oscillator_1_wavetables” has changed. </Doc></Method><Method compare="common" name="oscillator_1_wavetables_has_listener()"><Doc type="Format">oscillator_1_wavetables_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool oscillator_1_wavetables_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “oscillator_1_wavetables”. </Doc></Method><Method compare="common" name="remove_oscillator_1_wavetables_listener()"><Doc type="Format">remove_oscillator_1_wavetables_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_oscillator_1_wavetables_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “oscillator_1_wavetables”. </Doc></Method><Property compare="common" name="oscillator_2_effect_mode"><Doc type="Description">Return the current effect mode of the oscillator 2.</Doc></Property><Method compare="common" name="add_oscillator_2_effect_mode_listener()"><Doc type="Format">add_oscillator_2_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_oscillator_2_effect_mode_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “oscillator_2_effect_mode” has changed. </Doc></Method><Method compare="common" name="oscillator_2_effect_mode_has_listener()"><Doc type="Format">oscillator_2_effect_mode_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool oscillator_2_effect_mode_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “oscillator_2_effect_mode”. </Doc></Method><Method compare="common" name="remove_oscillator_2_effect_mode_listener()"><Doc type="Format">remove_oscillator_2_effect_mode_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_oscillator_2_effect_mode_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “oscillator_2_effect_mode”. </Doc></Method><Property compare="common" name="oscillator_2_wavetable_category"><Doc type="Description">Return the current wavetable category of the oscillator 2.</Doc></Property><Method compare="common" name="add_oscillator_2_wavetable_category_listener()"><Doc type="Format">add_oscillator_2_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_oscillator_2_wavetable_category_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “oscillator_2_wavetable_category” has changed. </Doc></Method><Method compare="common" name="oscillator_2_wavetable_category_has_listener()"><Doc type="Format">oscillator_2_wavetable_category_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool oscillator_2_wavetable_category_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “oscillator_2_wavetable_category”. </Doc></Method><Method compare="common" name="remove_oscillator_2_wavetable_category_listener()"><Doc type="Format">remove_oscillator_2_wavetable_category_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_oscillator_2_wavetable_category_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “oscillator_2_wavetable_category”. </Doc></Method><Property compare="common" name="oscillator_2_wavetable_index"><Doc type="Description">Return the current wavetable index of the oscillator 2.</Doc></Property><Method compare="common" name="add_oscillator_2_wavetable_index_listener()"><Doc type="Format">add_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle, boost::python::api::object)add_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) → None : Add a listener function or method, which will be called as soon as the property “oscillator_2_wavetable_index” has changed. </Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “oscillator_2_wavetable_index” has changed. </Doc></Method><Method compare="common" name="oscillator_2_wavetable_index_has_listener()"><Doc type="Format">oscillator_2_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool oscillator_2_wavetable_index_has_listener(TWavetableDevicePyHandle, boost::python::api::object)oscillator_2_wavetable_index_has_listener( (WavetableDevice)arg1, (object)arg2) → bool : Returns true, if the given listener function or method is connected to the property “oscillator_2_wavetable_index”. </Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “oscillator_2_wavetable_index”. </Doc></Method><Method compare="common" name="remove_oscillator_2_wavetable_index_listener()"><Doc type="Format">remove_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_oscillator_2_wavetable_index_listener(TWavetableDevicePyHandle, boost::python::api::object)remove_oscillator_2_wavetable_index_listener( (WavetableDevice)arg1, (object)arg2) → None : Remove a previously set listener function or method from property “oscillator_2_wavetable_index”. </Doc><Doc type="Description">Remove a previously set listener function or method from property “oscillator_2_wavetable_index”. </Doc></Method><Property compare="common" name="oscillator_2_wavetables"><Doc type="Description">Get a vector of oscillator 2's wavetable names.</Doc></Property><Method compare="common" name="add_oscillator_2_wavetables_listener()"><Doc type="Format">add_oscillator_2_wavetables_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_oscillator_2_wavetables_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “oscillator_2_wavetables” has changed. </Doc></Method><Method compare="common" name="oscillator_2_wavetables_has_listener()"><Doc type="Format">oscillator_2_wavetables_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool oscillator_2_wavetables_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “oscillator_2_wavetables”. </Doc></Method><Method compare="common" name="remove_oscillator_2_wavetables_listener()"><Doc type="Format">remove_oscillator_2_wavetables_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_oscillator_2_wavetables_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “oscillator_2_wavetables”. </Doc></Method><Property compare="common" name="oscillator_wavetable_categories"><Doc type="Description">Get a vector of the available wavetable categories.</Doc></Property><Property compare="common" name="parameters"><Doc type="Description">Const access to the list of available automatable parameters for this device.</Doc></Property><Method compare="common" name="add_parameters_listener()"><Doc type="Format">add_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “parameters” has changed. </Doc></Method><Method compare="common" name="parameters_has_listener()"><Doc type="Format">parameters_has_listener( (Device)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool parameters_has_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “parameters”. </Doc></Method><Method compare="common" name="remove_parameters_listener()"><Doc type="Format">remove_parameters_listener( (Device)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_parameters_listener(TPyHandle&lt;ADevice&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “parameters”. </Doc></Method><Property compare="common" name="poly_voices"><Doc type="Description">Return the current number of polyphonic voices. Uses the VoiceCount enumeration.</Doc></Property><Method compare="common" name="add_poly_voices_listener()"><Doc type="Format">add_poly_voices_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_poly_voices_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “poly_voices” has changed. </Doc></Method><Method compare="common" name="poly_voices_has_listener()"><Doc type="Format">poly_voices_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool poly_voices_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “poly_voices”. </Doc></Method><Method compare="common" name="remove_poly_voices_listener()"><Doc type="Format">remove_poly_voices_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_poly_voices_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “poly_voices”. </Doc></Method><Method compare="common" name="set_modulation_value()"><Doc type="Format">set_modulation_value( (WavetableDevice)self, (int)target_index, (int)source, (float)value) → None</Doc><Doc type="Cpp-Signature">void set_modulation_value(TWavetableDevicePyHandle, int, int, float)</Doc><Doc type="Description">Set the value of a modulation amount for the given target-source connection. </Doc></Method><Method compare="common" name="store_chosen_bank()"><Doc type="Format">store_chosen_bank( (Device)arg1, (int)arg2, (int)arg3) → None</Doc><Doc type="Cpp-Signature">void store_chosen_bank(TPyHandle&lt;ADevice&gt;, int, int)</Doc><Doc type="Description">Set the selected bank in the device for persistency. </Doc></Method><Property compare="common" name="type"><Doc type="Description">Return the type of the device.</Doc></Property><Property compare="common" name="unison_mode"><Doc type="Description">Return the current unison mode.</Doc></Property><Method compare="common" name="add_unison_mode_listener()"><Doc type="Format">add_unison_mode_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_unison_mode_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “unison_mode” has changed. </Doc></Method><Method compare="common" name="remove_unison_mode_listener()"><Doc type="Format">remove_unison_mode_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_unison_mode_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “unison_mode”. </Doc></Method><Method compare="common" name="unison_mode_has_listener()"><Doc type="Format">unison_mode_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool unison_mode_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “unison_mode”. </Doc></Method><Property compare="common" name="unison_voice_count"><Doc type="Description">Return the current number of unison voices.</Doc></Property><Method compare="common" name="add_unison_voice_count_listener()"><Doc type="Format">add_unison_voice_count_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_unison_voice_count_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “unison_voice_count” has changed. </Doc></Method><Method compare="common" name="remove_unison_voice_count_listener()"><Doc type="Format">remove_unison_voice_count_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_unison_voice_count_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “unison_voice_count”. </Doc></Method><Method compare="common" name="unison_voice_count_has_listener()"><Doc type="Format">unison_voice_count_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool unison_voice_count_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “unison_voice_count”. </Doc></Method><Property compare="common" name="view"><Doc type="Description">Representing the view aspects of a device.</Doc></Property><Property compare="common" name="visible_modulation_target_names"><Doc type="Description">Get the names of all the visible modulation targets.</Doc></Property><Method compare="common" name="add_visible_modulation_target_names_listener()"><Doc type="Format">add_visible_modulation_target_names_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_visible_modulation_target_names_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “visible_modulation_target_names” has changed. </Doc></Method><Method compare="common" name="remove_visible_modulation_target_names_listener()"><Doc type="Format">remove_visible_modulation_target_names_listener( (WavetableDevice)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_visible_modulation_target_names_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “visible_modulation_target_names”. </Doc></Method><Method compare="common" name="visible_modulation_target_names_has_listener()"><Doc type="Format">visible_modulation_target_names_has_listener( (WavetableDevice)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool visible_modulation_target_names_has_listener(TWavetableDevicePyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “visible_modulation_target_names”. </Doc></Method></Class></Module><Module compare="common" name="DeviceIO"><Class compare="common" name="DeviceIO"><Doc type="Description">This class represents a specific input or output bus of a device.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="available_routing_channels"><Doc type="Description">Return a list of channels for this IO endpoint.</Doc></Property><Method compare="common" name="add_available_routing_channels_listener()"><Doc type="Format">add_available_routing_channels_listener( (DeviceIO)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_available_routing_channels_listener(TPyHandle&lt;AMxDRoutable&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “available_routing_channels” has changed. </Doc></Method><Method compare="common" name="available_routing_channels_has_listener()"><Doc type="Format">available_routing_channels_has_listener( (DeviceIO)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool available_routing_channels_has_listener(TPyHandle&lt;AMxDRoutable&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “available_routing_channels”. </Doc></Method><Method compare="common" name="remove_available_routing_channels_listener()"><Doc type="Format">remove_available_routing_channels_listener( (DeviceIO)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_available_routing_channels_listener(TPyHandle&lt;AMxDRoutable&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “available_routing_channels”. </Doc></Method><Property compare="common" name="available_routing_types"><Doc type="Description">Return a list of available routing types for this IO endpoint.</Doc></Property><Method compare="common" name="add_available_routing_types_listener()"><Doc type="Format">add_available_routing_types_listener( (DeviceIO)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_available_routing_types_listener(TPyHandle&lt;AMxDRoutable&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “available_routing_types” has changed. </Doc></Method><Method compare="common" name="available_routing_types_has_listener()"><Doc type="Format">available_routing_types_has_listener( (DeviceIO)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool available_routing_types_has_listener(TPyHandle&lt;AMxDRoutable&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “available_routing_types”. </Doc></Method><Method compare="common" name="remove_available_routing_types_listener()"><Doc type="Format">remove_available_routing_types_listener( (DeviceIO)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_available_routing_types_listener(TPyHandle&lt;AMxDRoutable&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “available_routing_types”. </Doc></Method><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the device IO.</Doc></Property><Property compare="common" name="routing_channel"><Doc type="Description">Get and set the current routing channel.Raises ValueError if the channel isn’t one of the current values inavailable_routing_channels.</Doc></Property><Method compare="common" name="add_routing_channel_listener()"><Doc type="Format">add_routing_channel_listener( (DeviceIO)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_routing_channel_listener(TPyHandle&lt;AMxDRoutable&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “routing_channel” has changed. </Doc></Method><Method compare="common" name="remove_routing_channel_listener()"><Doc type="Format">remove_routing_channel_listener( (DeviceIO)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_routing_channel_listener(TPyHandle&lt;AMxDRoutable&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “routing_channel”. </Doc></Method><Method compare="common" name="routing_channel_has_listener()"><Doc type="Format">routing_channel_has_listener( (DeviceIO)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool routing_channel_has_listener(TPyHandle&lt;AMxDRoutable&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “routing_channel”. </Doc></Method><Property compare="common" name="routing_type"><Doc type="Description">Get and set the current routing type.Raises ValueError if the type isn’t one of the current values inavailable_routing_types.</Doc></Property><Method compare="common" name="add_routing_type_listener()"><Doc type="Format">add_routing_type_listener( (DeviceIO)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_routing_type_listener(TPyHandle&lt;AMxDRoutable&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “routing_type” has changed. </Doc></Method><Method compare="common" name="remove_routing_type_listener()"><Doc type="Format">remove_routing_type_listener( (DeviceIO)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_routing_type_listener(TPyHandle&lt;AMxDRoutable&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “routing_type”. </Doc></Method><Method compare="common" name="routing_type_has_listener()"><Doc type="Format">routing_type_has_listener( (DeviceIO)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool routing_type_has_listener(TPyHandle&lt;AMxDRoutable&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “routing_type”. </Doc></Method></Class></Module><Module compare="common" name="DeviceParameter"><Class compare="common" name="AutomationState"><Value compare="common" name="none" /><Value compare="common" name="overridden" /><Value compare="common" name="playing" /></Class><Class compare="common" name="DeviceParameter"><Doc type="Description">This class represents a (automatable) parameter within a MIDI orAudio DSP-Device.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="automation_state"><Doc type="Description">Returns state of type AutomationState.</Doc></Property><Method compare="common" name="add_automation_state_listener()"><Doc type="Format">add_automation_state_listener( (DeviceParameter)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_automation_state_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “automation_state” has changed. </Doc></Method><Method compare="common" name="automation_state_has_listener()"><Doc type="Format">automation_state_has_listener( (DeviceParameter)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool automation_state_has_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “automation_state”. </Doc></Method><Method compare="common" name="remove_automation_state_listener()"><Doc type="Format">remove_automation_state_listener( (DeviceParameter)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_automation_state_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “automation_state”. </Doc></Method><Method compare="common" name="begin_gesture()"><Doc type="Format">begin_gesture( (DeviceParameter)arg1) → None</Doc><Doc type="Cpp-Signature">void begin_gesture(TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description">Notify the begin of a modification of the parameter, when a sequence of modifications have to be consider a consistent group — for Sexample, when recording automation. </Doc></Method><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the device parameter.</Doc></Property><Property compare="common" name="default_value"><Doc type="Description">Return the default value for this parameter.  A Default value is onlyavailable for non-quantized parameter types (see ‘is_quantized’).</Doc></Property><Method compare="common" name="end_gesture()"><Doc type="Format">end_gesture( (DeviceParameter)arg1) → None</Doc><Doc type="Cpp-Signature">void end_gesture(TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description">Notify the end of a modification of the parameter. See begin_gesture. </Doc></Method><Property compare="common" name="is_enabled"><Doc type="Description">Returns false if the parameter has been macro mapped or disabled by Max.</Doc></Property><Property compare="common" name="is_quantized"><Doc type="Description">Returns True, if this value is a boolean or integer like switch.Non quantized values are continues float values.</Doc></Property><Property compare="common" name="max"><Doc type="Description">Returns const access to the upper value of the allowed range forthis parameter</Doc></Property><Property compare="common" name="min"><Doc type="Description">Returns const access to the lower value of the allowed range forthis parameter</Doc></Property><Property compare="common" name="name"><Doc type="Description">Returns const access the name of this parameter, as visible in Livesautomation choosers.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (DeviceParameter)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (DeviceParameter)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (DeviceParameter)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="original_name"><Doc type="Description">Returns const access the original name of this parameter, unaffected ofany renamings.</Doc></Property><Method compare="common" name="re_enable_automation()"><Doc type="Format">re_enable_automation( (DeviceParameter)arg1) → None</Doc><Doc type="Cpp-Signature">void re_enable_automation(TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description">Reenable automation for this parameter. </Doc></Method><Property compare="common" name="state"><Doc type="Description">Returns the state of the parameter:- enabled - the parameter’s value can be changed, - irrelevant - the parameter is enabled, but value changes will not take any effect until it gets enabled, - disabled - the parameter’s value cannot be changed.</Doc></Property><Method compare="common" name="add_state_listener()"><Doc type="Format">add_state_listener( (DeviceParameter)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_state_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “state” has changed. </Doc></Method><Method compare="common" name="remove_state_listener()"><Doc type="Format">remove_state_listener( (DeviceParameter)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_state_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “state”. </Doc></Method><Method compare="common" name="state_has_listener()"><Doc type="Format">state_has_listener( (DeviceParameter)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool state_has_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “state”. </Doc></Method><Method compare="common" name="str_for_value()"><Doc type="Format">str_for_value( (DeviceParameter)arg1, (float)arg2) → unicode</Doc><Doc type="Cpp-Signature">TString str_for_value(TPyHandle&lt;ATimeable&gt;, float)</Doc><Doc type="Description">Return a string representation of the given value. To be used for display purposes only.  This value can include characters like ‘db’ or ‘hz’, depending on the type of the parameter. </Doc></Method><Property compare="common" name="value"><Doc type="Description">Get/Set the current value (as visible in the GUI) this parameter.The value must be inside the min/max properties of this device.</Doc></Property><Method compare="common" name="add_value_listener()"><Doc type="Format">add_value_listener( (DeviceParameter)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_value_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “value” has changed. </Doc></Method><Method compare="common" name="remove_value_listener()"><Doc type="Format">remove_value_listener( (DeviceParameter)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_value_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “value”. </Doc></Method><Method compare="common" name="value_has_listener()"><Doc type="Format">value_has_listener( (DeviceParameter)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool value_has_listener(TPyHandle&lt;ATimeable&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “value”. </Doc></Method><Property compare="common" name="value_items"><Doc type="Description">Return the list of possible values for this parameter. Raises an error if ‘is_quantized’ is False.</Doc></Property></Class><Class compare="common" name="ParameterState"><Value compare="common" name="disabled" /><Value compare="common" name="enabled" /><Value compare="common" name="irrelevant" /></Class></Module><Module compare="common" name="DrumPad"><Class compare="common" name="DrumPad"><Doc type="Description">This class represents a drum group device pad in Live.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the drum pad.</Doc></Property><Property compare="common" name="chains"><Doc type="Description">Return const access to the list of chains in this drum pad.</Doc></Property><Method compare="common" name="add_chains_listener()"><Doc type="Format">add_chains_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_chains_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “chains” has changed. </Doc></Method><Method compare="common" name="chains_has_listener()"><Doc type="Format">chains_has_listener( (DrumPad)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool chains_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “chains”. </Doc></Method><Method compare="common" name="remove_chains_listener()"><Doc type="Format">remove_chains_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_chains_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “chains”. </Doc></Method><Method compare="common" name="delete_all_chains()"><Doc type="Format">delete_all_chains( (DrumPad)arg1) → None</Doc><Doc type="Cpp-Signature">void delete_all_chains(TPyHandle&lt;ADrumGroupDevicePad&gt;)</Doc><Doc type="Description">Deletes all chains associated with a drum pad. This is equivalent to deleting a drum rack pad in Live. </Doc></Method><Property compare="common" name="mute"><Doc type="Description">Mute/unmute the pad.</Doc></Property><Method compare="common" name="add_mute_listener()"><Doc type="Format">add_mute_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_mute_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “mute” has changed. </Doc></Method><Method compare="common" name="mute_has_listener()"><Doc type="Format">mute_has_listener( (DrumPad)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool mute_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “mute”. </Doc></Method><Method compare="common" name="remove_mute_listener()"><Doc type="Format">remove_mute_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_mute_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “mute”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Return const access to the drum pad’s name. It depends on the contained chains.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (DrumPad)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="note"><Doc type="Description">Get the MIDI note of the drum pad.</Doc></Property><Property compare="common" name="solo"><Doc type="Description">Solo/unsolo the pad.</Doc></Property><Method compare="common" name="add_solo_listener()"><Doc type="Format">add_solo_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_solo_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “solo” has changed. </Doc></Method><Method compare="common" name="remove_solo_listener()"><Doc type="Format">remove_solo_listener( (DrumPad)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_solo_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “solo”. </Doc></Method><Method compare="common" name="solo_has_listener()"><Doc type="Format">solo_has_listener( (DrumPad)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool solo_has_listener(TPyHandle&lt;ADrumGroupDevicePad&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “solo”. </Doc></Method></Class></Module><Module compare="common" name="Listener"><Class compare="common" name="ListenerHandle"><Doc type="Description">This class represents a Python listener when connected to a Live property.</Doc><Method compare="common" name="disconnect()"><Doc type="Format">disconnect( (ListenerHandle)arg1) → None</Doc><Doc type="Cpp-Signature">void disconnect(LPythonRemote {lvalue})</Doc><Doc type="Description">Disconnects the listener from its property </Doc></Method><Property compare="common" name="listener_func"><Doc type="Description">Returns the original function</Doc></Property><Property compare="common" name="listener_self"><Doc type="Description">Returns the weak reference to original self, if it was a bound method</Doc></Property><Property compare="common" name="name"><Doc type="Description">Prints the name of the property that this listener is connected to</Doc></Property></Class><Class compare="common" name="ListenerVector"><Doc type="Description">A read only container for accessing a list of listeners.</Doc><Method compare="common" name="append()"><Doc type="Format">append( (ListenerVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::__1::vector&lt;TWeakPtr&lt;LPythonRemote&gt;, std::__1::allocator&lt;TWeakPtr&lt;LPythonRemote&gt; &gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method compare="common" name="extend()"><Doc type="Format">extend( (ListenerVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::__1::vector&lt;TWeakPtr&lt;LPythonRemote&gt;, std::__1::allocator&lt;TWeakPtr&lt;LPythonRemote&gt; &gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class></Module><Module compare="common" name="LomObject"><Class compare="common" name="LomObject"><Doc type="Description">this is the base class for an object that is accessible via the LOM</Doc><Property compare="common" name="_live_ptr" /></Class></Module><Module compare="common" name="MidiMap"><Class compare="common" name="CCFeedbackRule"><Doc type="Description">Structure to define feedback properties of MIDI mappings.</Doc><Property compare="common" name="cc_no" /><Property compare="common" name="cc_value_map" /><Property compare="common" name="channel" /><Property compare="common" name="delay_in_ms" /></Class><Class compare="common" name="MapMode"><Value compare="common" name="absolute" /><Value compare="common" name="absolute_14_bit" /><Value compare="common" name="relative_binary_offset" /><Value compare="common" name="relative_signed_bit" /><Value compare="common" name="relative_signed_bit2" /><Value compare="common" name="relative_smooth_binary_offset" /><Value compare="common" name="relative_smooth_signed_bit" /><Value compare="common" name="relative_smooth_signed_bit2" /><Value compare="common" name="relative_smooth_two_compliment" /><Value compare="common" name="relative_two_compliment" /></Class><Class compare="common" name="NoteFeedbackRule"><Doc type="Description">Structure to define feedback properties of MIDI mappings.</Doc><Property compare="common" name="channel" /><Property compare="common" name="delay_in_ms" /><Property compare="common" name="note_no" /><Property compare="common" name="vel_map" /></Class><Class compare="common" name="PitchBendFeedbackRule"><Doc type="Description">Structure to define feedback properties of MIDI mappings.</Doc><Property compare="common" name="channel" /><Property compare="common" name="delay_in_ms" /><Property compare="common" name="value_pair_map" /></Class><Built-In compare="common" name="forward_midi_cc()"><Doc type="Format">forward_midi_cc( (int)arg1, (int)arg2, (int)arg3, (int)arg4 [, (bool)ShouldConsumeEvent=True]) → bool</Doc><Doc type="Cpp-Signature">bool forward_midi_cc(unsigned int, unsigned int, int, int [, bool=True])</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="forward_midi_note()"><Doc type="Format">forward_midi_note( (int)arg1, (int)arg2, (int)arg3, (int)arg4 [, (bool)ShouldConsumeEvent=True]) → bool</Doc><Doc type="Cpp-Signature">bool forward_midi_note(unsigned int, unsigned int, int, int [, bool=True])</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="forward_midi_pitchbend()"><Doc type="Format">forward_midi_pitchbend( (int)arg1, (int)arg2, (int)arg3) → bool</Doc><Doc type="Cpp-Signature">bool forward_midi_pitchbend(unsigned int, unsigned int, int)</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="map_midi_cc()"><Doc type="Format">map_midi_cc( (int)midi_map_handle, (DeviceParameter)parameter, (int)midi_channel, (int)controller_number, (MapMode)map_mode, (bool)avoid_takeover [, (float)sensitivity=1.0]) → bool</Doc><Doc type="Cpp-Signature">bool map_midi_cc(unsigned int, TPyHandle&lt;ATimeable&gt;, int, int, NRemoteMapperTypes::TControllerMapMode, bool [, float=1.0])</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="map_midi_cc_with_feedback_map()"><Doc type="Format">map_midi_cc_with_feedback_map( (int)midi_map_handle, (DeviceParameter)parameter, (int)midi_channel, (int)controller_number, (MapMode)map_mode, (CCFeedbackRule)feedback_rule, (bool)avoid_takeover [, (float)sensitivity=1.0]) → bool</Doc><Doc type="Cpp-Signature">bool map_midi_cc_with_feedback_map(unsigned int, TPyHandle&lt;ATimeable&gt;, int, int, NRemoteMapperTypes::TControllerMapMode, NPythonMidiMap::TCCFeedbackRule, bool [, float=1.0])</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="map_midi_note()"><Doc type="Format">map_midi_note( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4) → bool</Doc><Doc type="Cpp-Signature">bool map_midi_note(unsigned int, TPyHandle&lt;ATimeable&gt;, int, int)</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="map_midi_note_with_feedback_map()"><Doc type="Format">map_midi_note_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (int)arg4, (NoteFeedbackRule)arg5) → bool</Doc><Doc type="Cpp-Signature">bool map_midi_note_with_feedback_map(unsigned int, TPyHandle&lt;ATimeable&gt;, int, int, NPythonMidiMap::TNoteFeedbackRule)</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="map_midi_pitchbend()"><Doc type="Format">map_midi_pitchbend( (int)arg1, (DeviceParameter)arg2, (int)arg3, (bool)arg4) → bool</Doc><Doc type="Cpp-Signature">bool map_midi_pitchbend(unsigned int, TPyHandle&lt;ATimeable&gt;, int, bool)</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="map_midi_pitchbend_with_feedback_map()"><Doc type="Format">map_midi_pitchbend_with_feedback_map( (int)arg1, (DeviceParameter)arg2, (int)arg3, (PitchBendFeedbackRule)arg4, (bool)arg5) → bool</Doc><Doc type="Cpp-Signature">bool map_midi_pitchbend_with_feedback_map(unsigned int, TPyHandle&lt;ATimeable&gt;, int, NPythonMidiMap::TPitchBendFeedbackRule, bool)</Doc><Doc type="Description" /></Built-In><Built-In compare="common" name="send_feedback_for_parameter()"><Doc type="Format">send_feedback_for_parameter( (int)arg1, (DeviceParameter)arg2) → None</Doc><Doc type="Cpp-Signature">void send_feedback_for_parameter(unsigned int, TPyHandle&lt;ATimeable&gt;)</Doc><Doc type="Description" /></Built-In></Module><Module compare="common" name="Sample"><Class compare="common" name="Sample"><Doc type="Description">This class represents a sample file loaded into a Simpler instance.</Doc><Property compare="common" name="_live_ptr" /><Method compare="common" name="beat_to_sample_time()"><Doc type="Format">beat_to_sample_time( (Sample)self, (float)beat_time) → float</Doc><Doc type="Cpp-Signature">double beat_to_sample_time(TPyHandle&lt;AMultiSamplePart&gt;, double)</Doc><Doc type="Description">Converts the given beat time to sample time. Raises an error if the sample is not warped. </Doc></Method><Property compare="common" name="beats_granulation_resolution"><Doc type="Description">Access to the Granulation Resolution parameter in Beats Warp Mode.</Doc></Property><Method compare="common" name="add_beats_granulation_resolution_listener()"><Doc type="Format">add_beats_granulation_resolution_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_beats_granulation_resolution_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “beats_granulation_resolution” has changed. </Doc></Method><Method compare="common" name="beats_granulation_resolution_has_listener()"><Doc type="Format">beats_granulation_resolution_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool beats_granulation_resolution_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “beats_granulation_resolution”. </Doc></Method><Method compare="common" name="remove_beats_granulation_resolution_listener()"><Doc type="Format">remove_beats_granulation_resolution_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_beats_granulation_resolution_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “beats_granulation_resolution”. </Doc></Method><Property compare="common" name="beats_transient_envelope"><Doc type="Description">Access to the Transient Envelope parameter in Beats Warp Mode.</Doc></Property><Method compare="common" name="add_beats_transient_envelope_listener()"><Doc type="Format">add_beats_transient_envelope_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_beats_transient_envelope_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “beats_transient_envelope” has changed. </Doc></Method><Method compare="common" name="beats_transient_envelope_has_listener()"><Doc type="Format">beats_transient_envelope_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool beats_transient_envelope_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “beats_transient_envelope”. </Doc></Method><Method compare="common" name="remove_beats_transient_envelope_listener()"><Doc type="Format">remove_beats_transient_envelope_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_beats_transient_envelope_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “beats_transient_envelope”. </Doc></Method><Property compare="common" name="beats_transient_loop_mode"><Doc type="Description">Access to the Transient Loop Mode parameter in Beats Warp Mode.</Doc></Property><Method compare="common" name="add_beats_transient_loop_mode_listener()"><Doc type="Format">add_beats_transient_loop_mode_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_beats_transient_loop_mode_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “beats_transient_loop_mode” has changed. </Doc></Method><Method compare="common" name="beats_transient_loop_mode_has_listener()"><Doc type="Format">beats_transient_loop_mode_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool beats_transient_loop_mode_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “beats_transient_loop_mode”. </Doc></Method><Method compare="common" name="remove_beats_transient_loop_mode_listener()"><Doc type="Format">remove_beats_transient_loop_mode_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_beats_transient_loop_mode_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “beats_transient_loop_mode”. </Doc></Method><Property compare="common" name="canonical_parent"><Doc type="Description">Access to the sample’s canonical parent.</Doc></Property><Method compare="common" name="clear_slices()"><Doc type="Format">clear_slices( (Sample)self) → None</Doc><Doc type="Cpp-Signature">void clear_slices(TPyHandle&lt;AMultiSamplePart&gt;)</Doc><Doc type="Description">Clears all slices created in Simpler’s manual mode. </Doc></Method><Property compare="common" name="complex_pro_envelope"><Doc type="Description">Access to the Envelope parameter in Complex Pro Mode.</Doc></Property><Method compare="common" name="add_complex_pro_envelope_listener()"><Doc type="Format">add_complex_pro_envelope_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_complex_pro_envelope_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “complex_pro_envelope” has changed. </Doc></Method><Method compare="common" name="complex_pro_envelope_has_listener()"><Doc type="Format">complex_pro_envelope_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool complex_pro_envelope_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “complex_pro_envelope”. </Doc></Method><Method compare="common" name="remove_complex_pro_envelope_listener()"><Doc type="Format">remove_complex_pro_envelope_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_complex_pro_envelope_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “complex_pro_envelope”. </Doc></Method><Property compare="common" name="complex_pro_formants"><Doc type="Description">Access to the Formants parameter in Complex Pro Warp Mode.</Doc></Property><Method compare="common" name="add_complex_pro_formants_listener()"><Doc type="Format">add_complex_pro_formants_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_complex_pro_formants_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “complex_pro_formants” has changed. </Doc></Method><Method compare="common" name="complex_pro_formants_has_listener()"><Doc type="Format">complex_pro_formants_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool complex_pro_formants_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “complex_pro_formants”. </Doc></Method><Method compare="common" name="remove_complex_pro_formants_listener()"><Doc type="Format">remove_complex_pro_formants_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_complex_pro_formants_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “complex_pro_formants”. </Doc></Method><Property compare="common" name="end_marker"><Doc type="Description">Access to the position of the sample’s end marker.</Doc></Property><Method compare="common" name="add_end_marker_listener()"><Doc type="Format">add_end_marker_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_end_marker_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “end_marker” has changed. </Doc></Method><Method compare="common" name="end_marker_has_listener()"><Doc type="Format">end_marker_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool end_marker_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “end_marker”. </Doc></Method><Method compare="common" name="remove_end_marker_listener()"><Doc type="Format">remove_end_marker_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_end_marker_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “end_marker”. </Doc></Method><Property compare="common" name="file_path"><Doc type="Description">Get the path of the sample file.</Doc></Property><Method compare="common" name="add_file_path_listener()"><Doc type="Format">add_file_path_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_file_path_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “file_path” has changed. </Doc></Method><Method compare="common" name="file_path_has_listener()"><Doc type="Format">file_path_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool file_path_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “file_path”. </Doc></Method><Method compare="common" name="remove_file_path_listener()"><Doc type="Format">remove_file_path_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_file_path_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “file_path”. </Doc></Method><Property compare="common" name="gain"><Doc type="Description">Access to the sample gain.</Doc></Property><Method compare="common" name="add_gain_listener()"><Doc type="Format">add_gain_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_gain_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “gain” has changed. </Doc></Method><Method compare="common" name="gain_has_listener()"><Doc type="Format">gain_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool gain_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “gain”. </Doc></Method><Method compare="common" name="remove_gain_listener()"><Doc type="Format">remove_gain_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_gain_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “gain”. </Doc></Method><Method compare="common" name="gain_display_string()"><Doc type="Format">gain_display_string( (Sample)self) → unicode</Doc><Doc type="Cpp-Signature">TString gain_display_string(TPyHandle&lt;AMultiSamplePart&gt;)</Doc><Doc type="Description">Get the gain’s display value as a string. </Doc></Method><Method compare="common" name="insert_slice()"><Doc type="Format">insert_slice( (Sample)self, (int)slice_time) → None</Doc><Doc type="Cpp-Signature">void insert_slice(TPyHandle&lt;AMultiSamplePart&gt;, int)</Doc><Doc type="Description">Add a slice point at the provided time if there is none. </Doc></Method><Property compare="common" name="length"><Doc type="Description">Get the length of the sample file in sample frames.</Doc></Property><Method compare="common" name="move_slice()"><Doc type="Format">move_slice( (Sample)self, (int)old_time, (int)new_time) → int</Doc><Doc type="Cpp-Signature">int move_slice(TPyHandle&lt;AMultiSamplePart&gt;, int, int)</Doc><Doc type="Description">Move the slice point at the provided time. </Doc></Method><Method compare="common" name="remove_slice()"><Doc type="Format">remove_slice( (Sample)self, (int)slice_time) → None</Doc><Doc type="Cpp-Signature">void remove_slice(TPyHandle&lt;AMultiSamplePart&gt;, int)</Doc><Doc type="Description">Remove the slice point at the provided time if there is one. </Doc></Method><Method compare="common" name="reset_slices()"><Doc type="Format">reset_slices( (Sample)self) → None</Doc><Doc type="Cpp-Signature">void reset_slices(TPyHandle&lt;AMultiSamplePart&gt;)</Doc><Doc type="Description">Resets all edited slices to their original positions. </Doc></Method><Method compare="common" name="sample_to_beat_time()"><Doc type="Format">sample_to_beat_time( (Sample)self, (float)sample_time) → float</Doc><Doc type="Cpp-Signature">double sample_to_beat_time(TPyHandle&lt;AMultiSamplePart&gt;, double)</Doc><Doc type="Description">Converts the given sample time to beat time. Raises an error if the sample is not warped. </Doc></Method><Property compare="common" name="slices"><Doc type="Description">Access to the list of slice points in sample time in the sample.</Doc></Property><Method compare="common" name="add_slices_listener()"><Doc type="Format">add_slices_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_slices_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “slices” has changed. </Doc></Method><Method compare="common" name="remove_slices_listener()"><Doc type="Format">remove_slices_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_slices_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “slices”. </Doc></Method><Method compare="common" name="slices_has_listener()"><Doc type="Format">slices_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool slices_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “slices”. </Doc></Method><Property compare="common" name="slicing_beat_division"><Doc type="Description">Access to sample’s slicing step size.</Doc></Property><Method compare="common" name="add_slicing_beat_division_listener()"><Doc type="Format">add_slicing_beat_division_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_slicing_beat_division_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “slicing_beat_division” has changed. </Doc></Method><Method compare="common" name="remove_slicing_beat_division_listener()"><Doc type="Format">remove_slicing_beat_division_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_slicing_beat_division_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “slicing_beat_division”. </Doc></Method><Method compare="common" name="slicing_beat_division_has_listener()"><Doc type="Format">slicing_beat_division_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool slicing_beat_division_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “slicing_beat_division”. </Doc></Method><Property compare="common" name="slicing_region_count"><Doc type="Description">Access to sample’s slicing split count.</Doc></Property><Method compare="common" name="add_slicing_region_count_listener()"><Doc type="Format">add_slicing_region_count_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_slicing_region_count_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “slicing_region_count” has changed. </Doc></Method><Method compare="common" name="remove_slicing_region_count_listener()"><Doc type="Format">remove_slicing_region_count_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_slicing_region_count_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “slicing_region_count”. </Doc></Method><Method compare="common" name="slicing_region_count_has_listener()"><Doc type="Format">slicing_region_count_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool slicing_region_count_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “slicing_region_count”. </Doc></Method><Property compare="common" name="slicing_sensitivity"><Doc type="Description">Access to sample’s slicing sensitivity whose sensitivity is in between 0.0 and 1.0.The higher the sensitivity, the more slices will be available.</Doc></Property><Method compare="common" name="add_slicing_sensitivity_listener()"><Doc type="Format">add_slicing_sensitivity_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_slicing_sensitivity_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “slicing_sensitivity” has changed. </Doc></Method><Method compare="common" name="remove_slicing_sensitivity_listener()"><Doc type="Format">remove_slicing_sensitivity_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_slicing_sensitivity_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “slicing_sensitivity”. </Doc></Method><Method compare="common" name="slicing_sensitivity_has_listener()"><Doc type="Format">slicing_sensitivity_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool slicing_sensitivity_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “slicing_sensitivity”. </Doc></Method><Property compare="common" name="slicing_style"><Doc type="Description">Access to sample’s slicing style.</Doc></Property><Method compare="common" name="add_slicing_style_listener()"><Doc type="Format">add_slicing_style_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_slicing_style_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “slicing_style” has changed. </Doc></Method><Method compare="common" name="remove_slicing_style_listener()"><Doc type="Format">remove_slicing_style_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_slicing_style_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “slicing_style”. </Doc></Method><Method compare="common" name="slicing_style_has_listener()"><Doc type="Format">slicing_style_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool slicing_style_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “slicing_style”. </Doc></Method><Property compare="common" name="start_marker"><Doc type="Description">Access to the position of the sample’s start marker.</Doc></Property><Method compare="common" name="add_start_marker_listener()"><Doc type="Format">add_start_marker_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_start_marker_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “start_marker” has changed. </Doc></Method><Method compare="common" name="remove_start_marker_listener()"><Doc type="Format">remove_start_marker_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_start_marker_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “start_marker”. </Doc></Method><Method compare="common" name="start_marker_has_listener()"><Doc type="Format">start_marker_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool start_marker_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “start_marker”. </Doc></Method><Property compare="common" name="texture_flux"><Doc type="Description">Access to the Flux parameter in Texture Warp Mode.</Doc></Property><Method compare="common" name="add_texture_flux_listener()"><Doc type="Format">add_texture_flux_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_texture_flux_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “texture_flux” has changed. </Doc></Method><Method compare="common" name="remove_texture_flux_listener()"><Doc type="Format">remove_texture_flux_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_texture_flux_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “texture_flux”. </Doc></Method><Method compare="common" name="texture_flux_has_listener()"><Doc type="Format">texture_flux_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool texture_flux_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “texture_flux”. </Doc></Method><Property compare="common" name="texture_grain_size"><Doc type="Description">Access to the Grain Size parameter in Texture Warp Mode.</Doc></Property><Method compare="common" name="add_texture_grain_size_listener()"><Doc type="Format">add_texture_grain_size_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_texture_grain_size_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “texture_grain_size” has changed. </Doc></Method><Method compare="common" name="remove_texture_grain_size_listener()"><Doc type="Format">remove_texture_grain_size_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_texture_grain_size_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “texture_grain_size”. </Doc></Method><Method compare="common" name="texture_grain_size_has_listener()"><Doc type="Format">texture_grain_size_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool texture_grain_size_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “texture_grain_size”. </Doc></Method><Property compare="common" name="tones_grain_size"><Doc type="Description">Access to the Grain Size parameter in Tones Warp Mode.</Doc></Property><Method compare="common" name="add_tones_grain_size_listener()"><Doc type="Format">add_tones_grain_size_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_tones_grain_size_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “tones_grain_size” has changed. </Doc></Method><Method compare="common" name="remove_tones_grain_size_listener()"><Doc type="Format">remove_tones_grain_size_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_tones_grain_size_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “tones_grain_size”. </Doc></Method><Method compare="common" name="tones_grain_size_has_listener()"><Doc type="Format">tones_grain_size_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool tones_grain_size_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “tones_grain_size”. </Doc></Method><Method compare="common" name="add_warp_markers_listener()"><Doc type="Format">add_warp_markers_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_warp_markers_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “warp_markers” has changed. </Doc></Method><Method compare="common" name="remove_warp_markers_listener()"><Doc type="Format">remove_warp_markers_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_warp_markers_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “warp_markers”. </Doc></Method><Method compare="common" name="warp_markers_has_listener()"><Doc type="Format">warp_markers_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool warp_markers_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “warp_markers”. </Doc></Method><Property compare="common" name="warp_mode"><Doc type="Description">Access to the sample’s warp mode.</Doc></Property><Method compare="common" name="add_warp_mode_listener()"><Doc type="Format">add_warp_mode_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_warp_mode_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “warp_mode” has changed. </Doc></Method><Method compare="common" name="remove_warp_mode_listener()"><Doc type="Format">remove_warp_mode_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_warp_mode_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “warp_mode”. </Doc></Method><Method compare="common" name="warp_mode_has_listener()"><Doc type="Format">warp_mode_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool warp_mode_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “warp_mode”. </Doc></Method><Property compare="common" name="warping"><Doc type="Description">Access to the sample’s warping property.</Doc></Property><Method compare="common" name="add_warping_listener()"><Doc type="Format">add_warping_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_warping_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “warping” has changed. </Doc></Method><Method compare="common" name="remove_warping_listener()"><Doc type="Format">remove_warping_listener( (Sample)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_warping_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “warping”. </Doc></Method><Method compare="common" name="warping_has_listener()"><Doc type="Format">warping_has_listener( (Sample)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool warping_has_listener(TPyHandle&lt;AMultiSamplePart&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “warping”. </Doc></Method></Class><Class compare="common" name="SlicingBeatDivision"><Value compare="common" name="eighth" /><Value compare="common" name="eighth_triplett" /><Value compare="common" name="four_bars" /><Value compare="common" name="half" /><Value compare="common" name="half_triplett" /><Value compare="common" name="one_bar" /><Value compare="common" name="quarter" /><Value compare="common" name="quarter_triplett" /><Value compare="common" name="sixteenth" /><Value compare="common" name="sixteenth_triplett" /><Value compare="common" name="two_bars" /></Class><Class compare="common" name="SlicingStyle"><Value compare="common" name="beat" /><Value compare="common" name="manual" /><Value compare="common" name="region" /><Value compare="common" name="transient" /></Class><Class compare="common" name="TransientLoopMode"><Value compare="common" name="alternate" /><Value compare="common" name="forward" /><Value compare="common" name="off" /></Class></Module><Module compare="common" name="Scene"><Class compare="common" name="Scene"><Doc type="Description">This class represents an series of ClipSlots in Lives Sessionview matrix.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the scene.</Doc></Property><Property compare="common" name="clip_slots"><Doc type="Description">return a list of clipslots (see class AClipSlot) that this scene covers.</Doc></Property><Method compare="common" name="add_clip_slots_listener()"><Doc type="Format">add_clip_slots_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_clip_slots_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “clip_slots” has changed. </Doc></Method><Method compare="common" name="clip_slots_has_listener()"><Doc type="Format">clip_slots_has_listener( (Scene)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool clip_slots_has_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “clip_slots”. </Doc></Method><Method compare="common" name="remove_clip_slots_listener()"><Doc type="Format">remove_clip_slots_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_clip_slots_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “clip_slots”. </Doc></Method><Property compare="common" name="color"><Doc type="Description">Get/set access to the color of the Scene (RGB).</Doc></Property><Method compare="common" name="add_color_listener()"><Doc type="Format">add_color_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_color_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color” has changed. </Doc></Method><Method compare="common" name="color_has_listener()"><Doc type="Format">color_has_listener( (Scene)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool color_has_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color”. </Doc></Method><Method compare="common" name="remove_color_listener()"><Doc type="Format">remove_color_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_color_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color”. </Doc></Method><Property compare="common" name="color_index"><Doc type="Description">Get/set access to the color index of the Scene. Can be None for no color.</Doc></Property><Method compare="common" name="add_color_index_listener()"><Doc type="Format">add_color_index_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_color_index_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color_index” has changed. </Doc></Method><Method compare="common" name="color_index_has_listener()"><Doc type="Format">color_index_has_listener( (Scene)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool color_index_has_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color_index”. </Doc></Method><Method compare="common" name="remove_color_index_listener()"><Doc type="Format">remove_color_index_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_color_index_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color_index”. </Doc></Method><Method compare="common" name="fire()"><Doc type="Format">fire( (Scene)arg1 [, (bool)force_legato=False [, (bool)can_select_scene_on_launch=True]]) → None</Doc><Doc type="Cpp-Signature">void fire(TPyHandle&lt;AScene&gt; [, bool=False [, bool=True]])</Doc><Doc type="Description">Fire the scene directly. Will fire all clipslots that this scene owns and select the scene itself. </Doc></Method><Method compare="common" name="fire_as_selected()"><Doc type="Format">fire_as_selected( (Scene)arg1 [, (bool)force_legato=False]) → None</Doc><Doc type="Cpp-Signature">void fire_as_selected(TPyHandle&lt;AScene&gt; [, bool=False])</Doc><Doc type="Description">Fire the selected scene. Will fire all clipslots that this scene owns and select the next scene if necessary. </Doc></Method><Property compare="common" name="is_empty"><Doc type="Description">Returns True if all clip slots of this scene are empty.</Doc></Property><Property compare="common" name="is_triggered"><Doc type="Description">Const access to the scene’s trigger state.</Doc></Property><Method compare="common" name="add_is_triggered_listener()"><Doc type="Format">add_is_triggered_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_triggered_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_triggered” has changed. </Doc></Method><Method compare="common" name="is_triggered_has_listener()"><Doc type="Format">is_triggered_has_listener( (Scene)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_triggered_has_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_triggered”. </Doc></Method><Method compare="common" name="remove_is_triggered_listener()"><Doc type="Format">remove_is_triggered_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_triggered_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_triggered”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Get/Set the name of the scene. Might contain the substring BPM, whichidentifies that the scene will change the tempo when fireed. To Get/Setthe temp, use the ‘tempo’ property of the scene.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Scene)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Scene)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;AScene&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Method compare="common" name="set_fire_button_state()"><Doc type="Format">set_fire_button_state( (Scene)arg1, (bool)arg2) → None</Doc><Doc type="Cpp-Signature">void set_fire_button_state(TPyHandle&lt;AScene&gt;, bool)</Doc><Doc type="Description">Set the scene’s fire button state directly. Supports all launch modes. </Doc></Method><Property compare="common" name="tempo"><Doc type="Description">Get/Set the the tempo value of the scene.The Song will use the Scenes tempo as soon as the Scene is fired.Returns -1 if the Scene has no tempo propery.</Doc></Property></Class></Module><Module compare="common" name="Song"><Class compare="common" name="BeatTime"><Doc type="Description">Represents a Time, splitted into Bars, Beats, SubDivision and Ticks.</Doc><Property compare="common" name="bars" /><Property compare="common" name="beats" /><Property compare="common" name="sub_division" /><Property compare="common" name="ticks" /></Class><Class compare="common" name="CaptureDestination"><Doc type="Description">The destination for MIDI capture.</Doc><Value compare="common" name="arrangement"><Doc type="Description">The destination for MIDI capture.</Doc></Value><Value compare="common" name="auto"><Doc type="Description">The destination for MIDI capture.</Doc></Value><Value compare="common" name="session"><Doc type="Description">The destination for MIDI capture.</Doc></Value></Class><Class compare="common" name="CaptureMode"><Doc type="Description">The capture mode that is used for capture and insert scene.</Doc><Value compare="common" name="all"><Doc type="Description">The capture mode that is used for capture and insert scene.</Doc></Value><Value compare="common" name="all_except_selected"><Doc type="Description">The capture mode that is used for capture and insert scene.</Doc></Value></Class><Class compare="common" name="CuePoint"><Doc type="Description">Represents a ‘Marker’ in the arrangement.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the cue point.</Doc></Property><Method compare="common" name="jump()"><Doc type="Format">jump( (CuePoint)arg1) → None</Doc><Doc type="Cpp-Signature">void jump(TPyHandle&lt;ACuePoint&gt;)</Doc><Doc type="Description">When the Song is playing, set the playing-position quantized to this Cuepoint’s time. When not playing, simply move the start playing position. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Get/Listen to the name of this CuePoint, as visible in the arranger.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (CuePoint)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TPyHandle&lt;ACuePoint&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (CuePoint)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TPyHandle&lt;ACuePoint&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (CuePoint)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TPyHandle&lt;ACuePoint&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="time"><Doc type="Description">Get/Listen to the CuePoint’s time in beats.</Doc></Property><Method compare="common" name="add_time_listener()"><Doc type="Format">add_time_listener( (CuePoint)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_time_listener(TPyHandle&lt;ACuePoint&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “time” has changed. </Doc></Method><Method compare="common" name="remove_time_listener()"><Doc type="Format">remove_time_listener( (CuePoint)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_time_listener(TPyHandle&lt;ACuePoint&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “time”. </Doc></Method><Method compare="common" name="time_has_listener()"><Doc type="Format">time_has_listener( (CuePoint)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool time_has_listener(TPyHandle&lt;ACuePoint&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “time”. </Doc></Method></Class><Class compare="common" name="Quantization"><Value compare="common" name="q_2_bars" /><Value compare="common" name="q_4_bars" /><Value compare="common" name="q_8_bars" /><Value compare="common" name="q_bar" /><Value compare="common" name="q_eight" /><Value compare="common" name="q_eight_triplet" /><Value compare="common" name="q_half" /><Value compare="common" name="q_half_triplet" /><Value compare="common" name="q_no_q" /><Value compare="common" name="q_quarter" /><Value compare="common" name="q_quarter_triplet" /><Value compare="common" name="q_sixtenth" /><Value compare="common" name="q_sixtenth_triplet" /><Value compare="common" name="q_thirtytwoth" /></Class><Class compare="common" name="RecordingQuantization"><Value compare="common" name="rec_q_eight" /><Value compare="common" name="rec_q_eight_eight_triplet" /><Value compare="common" name="rec_q_eight_triplet" /><Value compare="common" name="rec_q_no_q" /><Value compare="common" name="rec_q_quarter" /><Value compare="common" name="rec_q_sixtenth" /><Value compare="common" name="rec_q_sixtenth_sixtenth_triplet" /><Value compare="common" name="rec_q_sixtenth_triplet" /><Value compare="common" name="rec_q_thirtysecond" /></Class><Class compare="common" name="SessionRecordStatus"><Value compare="common" name="off" /><Value compare="common" name="on" /><Value compare="common" name="transition" /></Class><Class compare="common" name="SmptTime"><Doc type="Description">Represents a Time, split into Hours, Minutes, Seconds and Frames.The frame type must be specified when calling a function that returnsa SmptTime.</Doc><Property compare="common" name="frames" /><Property compare="common" name="hours" /><Property compare="common" name="minutes" /><Property compare="common" name="seconds" /></Class><Class compare="common" name="Song"><Doc type="Description">This class represents a Live set.</Doc><Class compare="common" name="View"><Doc type="Description">Representing the view aspects of a Live document: The Session and Arrangerview.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the song view.</Doc></Property><Property compare="common" name="detail_clip"><Doc type="Description">Get/Set the Clip that is currently visible in Lives Detailview.</Doc></Property><Method compare="common" name="add_detail_clip_listener()"><Doc type="Format">add_detail_clip_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_detail_clip_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “detail_clip” has changed. </Doc></Method><Method compare="common" name="detail_clip_has_listener()"><Doc type="Format">detail_clip_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool detail_clip_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “detail_clip”. </Doc></Method><Method compare="common" name="remove_detail_clip_listener()"><Doc type="Format">remove_detail_clip_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_detail_clip_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “detail_clip”. </Doc></Method><Property compare="common" name="draw_mode"><Doc type="Description">Get/Set if the Envelope/Note draw mode is enabled.</Doc></Property><Method compare="common" name="add_draw_mode_listener()"><Doc type="Format">add_draw_mode_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_draw_mode_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “draw_mode” has changed. </Doc></Method><Method compare="common" name="draw_mode_has_listener()"><Doc type="Format">draw_mode_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool draw_mode_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “draw_mode”. </Doc></Method><Method compare="common" name="remove_draw_mode_listener()"><Doc type="Format">remove_draw_mode_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_draw_mode_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “draw_mode”. </Doc></Method><Property compare="common" name="follow_song"><Doc type="Description">Get/Set if the Arrangerview should scroll to show the playmarker.</Doc></Property><Method compare="common" name="add_follow_song_listener()"><Doc type="Format">add_follow_song_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_follow_song_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “follow_song” has changed. </Doc></Method><Method compare="common" name="follow_song_has_listener()"><Doc type="Format">follow_song_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool follow_song_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “follow_song”. </Doc></Method><Method compare="common" name="remove_follow_song_listener()"><Doc type="Format">remove_follow_song_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_follow_song_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “follow_song”. </Doc></Method><Property compare="common" name="highlighted_clip_slot"><Doc type="Description">Get/Set the clip slot, defined via the highlighted track and scene in the Session.Will be None for Master- and Sendtracks.</Doc></Property><Method compare="common" name="select_device()"><Doc type="Format">select_device( (View)arg1, (Device)arg2 [, (bool)ShouldAppointDevice=True]) → None</Doc><Doc type="Cpp-Signature">void select_device(TPyViewData&lt;ASong&gt;, TPyHandle&lt;ADevice&gt; [, bool=True])</Doc><Doc type="Description">Select the given device. </Doc></Method><Property compare="common" name="selected_chain"><Doc type="Description">Get the highlighted chain if available.</Doc></Property><Method compare="common" name="add_selected_chain_listener()"><Doc type="Format">add_selected_chain_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_selected_chain_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_chain” has changed. </Doc></Method><Method compare="common" name="remove_selected_chain_listener()"><Doc type="Format">remove_selected_chain_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_selected_chain_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_chain”. </Doc></Method><Method compare="common" name="selected_chain_has_listener()"><Doc type="Format">selected_chain_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool selected_chain_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_chain”. </Doc></Method><Property compare="common" name="selected_parameter"><Doc type="Description">Get the currently selected device parameter.</Doc></Property><Method compare="common" name="add_selected_parameter_listener()"><Doc type="Format">add_selected_parameter_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_selected_parameter_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_parameter” has changed. </Doc></Method><Method compare="common" name="remove_selected_parameter_listener()"><Doc type="Format">remove_selected_parameter_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_selected_parameter_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_parameter”. </Doc></Method><Method compare="common" name="selected_parameter_has_listener()"><Doc type="Format">selected_parameter_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool selected_parameter_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_parameter”. </Doc></Method><Property compare="common" name="selected_scene"><Doc type="Description">Get/Set the current selected scene in Lives Sessionview.</Doc></Property><Method compare="common" name="add_selected_scene_listener()"><Doc type="Format">add_selected_scene_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_selected_scene_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_scene” has changed. </Doc></Method><Method compare="common" name="remove_selected_scene_listener()"><Doc type="Format">remove_selected_scene_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_selected_scene_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_scene”. </Doc></Method><Method compare="common" name="selected_scene_has_listener()"><Doc type="Format">selected_scene_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool selected_scene_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_scene”. </Doc></Method><Property compare="common" name="selected_track"><Doc type="Description">Get/Set the current selected Track in Lives Session or Arrangerview.</Doc></Property><Method compare="common" name="add_selected_track_listener()"><Doc type="Format">add_selected_track_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_selected_track_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_track” has changed. </Doc></Method><Method compare="common" name="remove_selected_track_listener()"><Doc type="Format">remove_selected_track_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_selected_track_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_track”. </Doc></Method><Method compare="common" name="selected_track_has_listener()"><Doc type="Format">selected_track_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool selected_track_has_listener(TPyViewData&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_track”. </Doc></Method></Class><Property compare="common" name="_live_ptr" /><Property compare="common" name="appointed_device"><Doc type="Description">Read, write, and listen access to the appointed Device</Doc></Property><Method compare="common" name="add_appointed_device_listener()"><Doc type="Format">add_appointed_device_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_appointed_device_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “appointed_device” has changed. </Doc></Method><Method compare="common" name="appointed_device_has_listener()"><Doc type="Format">appointed_device_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool appointed_device_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “appointed_device”. </Doc></Method><Method compare="common" name="remove_appointed_device_listener()"><Doc type="Format">remove_appointed_device_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_appointed_device_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “appointed_device”. </Doc></Method><Property compare="common" name="arrangement_overdub"><Doc type="Description">Get/Set the global arrangement overdub state.</Doc></Property><Method compare="common" name="add_arrangement_overdub_listener()"><Doc type="Format">add_arrangement_overdub_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_arrangement_overdub_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “arrangement_overdub” has changed. </Doc></Method><Method compare="common" name="arrangement_overdub_has_listener()"><Doc type="Format">arrangement_overdub_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool arrangement_overdub_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “arrangement_overdub”. </Doc></Method><Method compare="common" name="remove_arrangement_overdub_listener()"><Doc type="Format">remove_arrangement_overdub_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_arrangement_overdub_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “arrangement_overdub”. </Doc></Method><Property compare="common" name="back_to_arranger"><Doc type="Description">Get/Set if triggering a Clip in the Session, disabled the playback ofClips in the Arranger.</Doc></Property><Method compare="common" name="add_back_to_arranger_listener()"><Doc type="Format">add_back_to_arranger_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_back_to_arranger_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “back_to_arranger” has changed. </Doc></Method><Method compare="common" name="back_to_arranger_has_listener()"><Doc type="Format">back_to_arranger_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool back_to_arranger_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “back_to_arranger”. </Doc></Method><Method compare="common" name="remove_back_to_arranger_listener()"><Doc type="Format">remove_back_to_arranger_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_back_to_arranger_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “back_to_arranger”. </Doc></Method><Method compare="common" name="begin_undo_step()"><Doc type="Format">begin_undo_step( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void begin_undo_step(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description" /></Method><Property compare="common" name="can_capture_midi"><Doc type="Description">Get whether there currently is material to be captured on any tracks.</Doc></Property><Method compare="common" name="add_can_capture_midi_listener()"><Doc type="Format">add_can_capture_midi_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_can_capture_midi_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “can_capture_midi” has changed. </Doc></Method><Method compare="common" name="can_capture_midi_has_listener()"><Doc type="Format">can_capture_midi_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool can_capture_midi_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “can_capture_midi”. </Doc></Method><Method compare="common" name="remove_can_capture_midi_listener()"><Doc type="Format">remove_can_capture_midi_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_can_capture_midi_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “can_capture_midi”. </Doc></Method><Property compare="common" name="can_jump_to_next_cue"><Doc type="Description">Returns true when there is a cue marker right to the playing pos thatwe could jump to.</Doc></Property><Method compare="common" name="add_can_jump_to_next_cue_listener()"><Doc type="Format">add_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_can_jump_to_next_cue_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “can_jump_to_next_cue” has changed. </Doc></Method><Method compare="common" name="can_jump_to_next_cue_has_listener()"><Doc type="Format">can_jump_to_next_cue_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool can_jump_to_next_cue_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “can_jump_to_next_cue”. </Doc></Method><Method compare="common" name="remove_can_jump_to_next_cue_listener()"><Doc type="Format">remove_can_jump_to_next_cue_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_can_jump_to_next_cue_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “can_jump_to_next_cue”. </Doc></Method><Property compare="common" name="can_jump_to_prev_cue"><Doc type="Description">Returns true when there is a cue marker left to the playing pos thatwe could jump to.</Doc></Property><Method compare="common" name="add_can_jump_to_prev_cue_listener()"><Doc type="Format">add_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_can_jump_to_prev_cue_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “can_jump_to_prev_cue” has changed. </Doc></Method><Method compare="common" name="can_jump_to_prev_cue_has_listener()"><Doc type="Format">can_jump_to_prev_cue_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool can_jump_to_prev_cue_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “can_jump_to_prev_cue”. </Doc></Method><Method compare="common" name="remove_can_jump_to_prev_cue_listener()"><Doc type="Format">remove_can_jump_to_prev_cue_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_can_jump_to_prev_cue_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “can_jump_to_prev_cue”. </Doc></Method><Property compare="common" name="can_redo"><Doc type="Description">Returns true if there is an undone action that we can redo.</Doc></Property><Property compare="common" name="can_undo"><Doc type="Description">Returns true if there is an action that we can restore.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the song.</Doc></Property><Method compare="common" name="capture_and_insert_scene()"><Doc type="Format">capture_and_insert_scene( (Song)arg1 [, (int)CaptureMode=Song.CaptureMode.all]) → None</Doc><Doc type="Cpp-Signature">void capture_and_insert_scene(TPyHandle&lt;ASong&gt; [, int=Song.CaptureMode.all])</Doc><Doc type="Description">Capture currently playing clips and insert them as a new scene after the selected scene. Raises a runtime error if creating a new scene would exceed the limitations. </Doc></Method><Method compare="common" name="capture_midi()"><Doc type="Format">capture_midi( (Song)arg1 [, (int)Destination=Song.CaptureDestination.auto]) → None</Doc><Doc type="Cpp-Signature">void capture_midi(TPyHandle&lt;ASong&gt; [, int=Song.CaptureDestination.auto])</Doc><Doc type="Description">Capture recently played MIDI material from audible tracks. If no Destination is given or Destination is set to CaptureDestination.auto, the captured material is inserted into the Session or Arrangement depending on which is visible. If Destination is set to CaptureDestination.session or CaptureDestination.arrangement, inserts the material into Session or Arrangement, respectively. Raises a limitation error when capturing into the Session and a new scene would have to be created but can’t because it would exceed the limitations. </Doc></Method><Property compare="common" name="clip_trigger_quantization"><Doc type="Description">Get/Set access to the quantization settings that are used to fireClips in the Session.</Doc></Property><Method compare="common" name="add_clip_trigger_quantization_listener()"><Doc type="Format">add_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_clip_trigger_quantization_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “clip_trigger_quantization” has changed. </Doc></Method><Method compare="common" name="clip_trigger_quantization_has_listener()"><Doc type="Format">clip_trigger_quantization_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool clip_trigger_quantization_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “clip_trigger_quantization”. </Doc></Method><Method compare="common" name="remove_clip_trigger_quantization_listener()"><Doc type="Format">remove_clip_trigger_quantization_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_clip_trigger_quantization_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “clip_trigger_quantization”. </Doc></Method><Method compare="common" name="continue_playing()"><Doc type="Format">continue_playing( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void continue_playing(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Continue playing the song from the current position </Doc></Method><Property compare="common" name="count_in_duration"><Doc type="Description">Get the count in duration. Returns an index, mapped as follows: 0 - None, 1 - 1 Bar, 2 - 2 Bars, 3 - 4 Bars.</Doc></Property><Method compare="common" name="add_count_in_duration_listener()"><Doc type="Format">add_count_in_duration_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_count_in_duration_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “count_in_duration” has changed. </Doc></Method><Method compare="common" name="count_in_duration_has_listener()"><Doc type="Format">count_in_duration_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool count_in_duration_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “count_in_duration”. </Doc></Method><Method compare="common" name="remove_count_in_duration_listener()"><Doc type="Format">remove_count_in_duration_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_count_in_duration_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “count_in_duration”. </Doc></Method><Method compare="common" name="create_audio_track()"><Doc type="Format">create_audio_track( (Song)arg1 [, (object)Index=None]) → None</Doc><Doc type="Cpp-Signature">void create_audio_track(TPyHandle&lt;ASong&gt; [, boost::python::api::object=None])</Doc><Doc type="Description">Create a new audio track at the optional given index. If the index is -1, the new track is added at the end. It will create a default audio track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised.If the index is missing, the track is created after the last selected item </Doc></Method><Method compare="common" name="create_midi_track()"><Doc type="Format">create_midi_track( (Song)arg1 [, (object)Index=None]) → None</Doc><Doc type="Cpp-Signature">void create_midi_track(TPyHandle&lt;ASong&gt; [, boost::python::api::object=None])</Doc><Doc type="Description">Create a new midi track at the optional given index. If the index is -1, the new track is added at the end. It will create a default midi track if possible. If the index is invalid or the new track would exceed the limitations, a limitation error is raised.If the index is missing, the track is created after the last selected item </Doc></Method><Method compare="common" name="create_return_track()"><Doc type="Format">create_return_track( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void create_return_track(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Create a new return track at the end. If the new track would exceed  the limitations, a limitation error is raised.  If the maximum number of return tracks is exceeded, a RuntimeError is raised. </Doc></Method><Method compare="common" name="create_scene()"><Doc type="Format">create_scene( (Song)arg1, (int)arg2) → Scene</Doc><Doc type="Cpp-Signature">TWeakPtr&lt;TPyHandle&lt;AScene&gt; &gt; create_scene(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Create a new scene at the given index. If the index is -1, the new scene is added at the end. If the index is invalid or the new scene would exceed the limitations, a limitation error is raised. </Doc></Method><Property compare="common" name="cue_points"><Doc type="Description">Const access to a list of all cue points of the Live Song.</Doc></Property><Method compare="common" name="add_cue_points_listener()"><Doc type="Format">add_cue_points_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_cue_points_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “cue_points” has changed. </Doc></Method><Method compare="common" name="cue_points_has_listener()"><Doc type="Format">cue_points_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool cue_points_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “cue_points”. </Doc></Method><Method compare="common" name="remove_cue_points_listener()"><Doc type="Format">remove_cue_points_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_cue_points_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “cue_points”. </Doc></Method><Property compare="common" name="current_song_time"><Doc type="Description">Get/Set access to the songs current playing position in ms.</Doc></Property><Method compare="common" name="add_current_song_time_listener()"><Doc type="Format">add_current_song_time_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_current_song_time_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “current_song_time” has changed. </Doc></Method><Method compare="common" name="current_song_time_has_listener()"><Doc type="Format">current_song_time_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool current_song_time_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “current_song_time”. </Doc></Method><Method compare="common" name="remove_current_song_time_listener()"><Doc type="Format">remove_current_song_time_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_current_song_time_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “current_song_time”. </Doc></Method><Method compare="common" name="add_data_listener()"><Doc type="Format">add_data_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_data_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “data” has changed. </Doc></Method><Method compare="common" name="data_has_listener()"><Doc type="Format">data_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool data_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “data”. </Doc></Method><Method compare="common" name="remove_data_listener()"><Doc type="Format">remove_data_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_data_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “data”. </Doc></Method><Method compare="common" name="delete_return_track()"><Doc type="Format">delete_return_track( (Song)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void delete_return_track(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Delete the return track with the given index. If no track with this index exists, an exception will be raised. </Doc></Method><Method compare="common" name="delete_scene()"><Doc type="Format">delete_scene( (Song)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void delete_scene(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Delete the scene with the given index. If no scene with this index exists, an exception will be raised. </Doc></Method><Method compare="common" name="delete_track()"><Doc type="Format">delete_track( (Song)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void delete_track(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Delete the track with the given index. If no track with this index exists, an exception will be raised. </Doc></Method><Method compare="common" name="duplicate_scene()"><Doc type="Format">duplicate_scene( (Song)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void duplicate_scene(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Duplicates a scene and selects the new one. Raises a limitation error if creating a new scene would exceed the limitations. </Doc></Method><Method compare="common" name="duplicate_track()"><Doc type="Format">duplicate_track( (Song)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void duplicate_track(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Duplicates a track and selects the new one. Raises a limitation error if creating a new track would exceed the limitations. </Doc></Method><Method compare="common" name="end_undo_step()"><Doc type="Format">end_undo_step( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void end_undo_step(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description" /></Method><Property compare="common" name="exclusive_arm"><Doc type="Description">Get if Tracks should be armed exclusively by default.</Doc></Property><Method compare="common" name="add_exclusive_arm_listener()"><Doc type="Format">add_exclusive_arm_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_exclusive_arm_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “exclusive_arm” has changed. </Doc></Method><Method compare="common" name="exclusive_arm_has_listener()"><Doc type="Format">exclusive_arm_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool exclusive_arm_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “exclusive_arm”. </Doc></Method><Method compare="common" name="remove_exclusive_arm_listener()"><Doc type="Format">remove_exclusive_arm_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_exclusive_arm_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “exclusive_arm”. </Doc></Method><Property compare="common" name="exclusive_solo"><Doc type="Description">Get if Tracks should be soloed exclusively by default.</Doc></Property><Method compare="common" name="find_device_position()"><Doc type="Format">find_device_position( (Song)arg1, (Device)device, (LomObject)target, (int)target_position) → int</Doc><Doc type="Cpp-Signature">int find_device_position(TPyHandle&lt;ASong&gt;, TPyHandle&lt;ADevice&gt;, TPyHandleBase, int)</Doc><Doc type="Description">Returns the closest possible position to the given target, where the device can be inserted. If inserting is not possible at all (i.e. if the device type is wrong), -1 is returned. </Doc></Method><Method compare="common" name="force_link_beat_time()"><Doc type="Format">force_link_beat_time( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void force_link_beat_time(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Force the Link timeline to jump to Lives current beat time. Danger: This can cause beat time discontinuities in other connected apps. </Doc></Method><Method compare="common" name="get_beats_loop_length()"><Doc type="Format">get_beats_loop_length( (Song)arg1) → BeatTime</Doc><Doc type="Cpp-Signature">NPythonSong::TBeatTime get_beats_loop_length(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Get const access to the songs loop length, using a BeatTime class with the current global set signature. </Doc></Method><Method compare="common" name="get_beats_loop_start()"><Doc type="Format">get_beats_loop_start( (Song)arg1) → BeatTime</Doc><Doc type="Cpp-Signature">NPythonSong::TBeatTime get_beats_loop_start(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Get const access to the songs loop start, using a BeatTime class with the current global set signature. </Doc></Method><Method compare="common" name="get_current_beats_song_time()"><Doc type="Format">get_current_beats_song_time( (Song)arg1) → BeatTime</Doc><Doc type="Cpp-Signature">NPythonSong::TBeatTime get_current_beats_song_time(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Get const access to the songs current playing position, using a BeatTime class with the current global set signature. </Doc></Method><Method compare="common" name="get_current_smpte_song_time()"><Doc type="Format">get_current_smpte_song_time( (Song)arg1, (int)arg2) → SmptTime</Doc><Doc type="Cpp-Signature">NPythonSong::TSmptTime get_current_smpte_song_time(TPyHandle&lt;ASong&gt;, int)</Doc><Doc type="Description">Get const access to the songs current playing position, by specifying the SMPTE format in which you would like to receive the time. </Doc></Method><Method compare="common" name="get_data()"><Doc type="Format">get_data( (Song)arg1, (object)key, (object)default_value) → object</Doc><Doc type="Cpp-Signature">boost::python::api::object get_data(TPyHandle&lt;ASong&gt;, TString, boost::python::api::object)</Doc><Doc type="Description">Get data for the given key, that was previously stored using set_data. </Doc></Method><Property compare="common" name="groove_amount"><Doc type="Description">Get/Set the global groove amount, that adjust all setup groovesin all clips.</Doc></Property><Method compare="common" name="add_groove_amount_listener()"><Doc type="Format">add_groove_amount_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_groove_amount_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “groove_amount” has changed. </Doc></Method><Method compare="common" name="groove_amount_has_listener()"><Doc type="Format">groove_amount_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool groove_amount_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “groove_amount”. </Doc></Method><Method compare="common" name="remove_groove_amount_listener()"><Doc type="Format">remove_groove_amount_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_groove_amount_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “groove_amount”. </Doc></Method><Property compare="common" name="is_counting_in"><Doc type="Description">Get whether currently counting in.</Doc></Property><Method compare="common" name="add_is_counting_in_listener()"><Doc type="Format">add_is_counting_in_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_counting_in_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_counting_in” has changed. </Doc></Method><Method compare="common" name="is_counting_in_has_listener()"><Doc type="Format">is_counting_in_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_counting_in_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_counting_in”. </Doc></Method><Method compare="common" name="remove_is_counting_in_listener()"><Doc type="Format">remove_is_counting_in_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_counting_in_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_counting_in”. </Doc></Method><Method compare="common" name="is_cue_point_selected()"><Doc type="Format">is_cue_point_selected( (Song)arg1) → bool</Doc><Doc type="Cpp-Signature">bool is_cue_point_selected(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Return true if the global playing pos is currently on a cue point. </Doc></Method><Property compare="common" name="is_playing"><Doc type="Description">Returns true if the Song is currently playing.</Doc></Property><Method compare="common" name="add_is_playing_listener()"><Doc type="Format">add_is_playing_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_playing_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_playing” has changed. </Doc></Method><Method compare="common" name="is_playing_has_listener()"><Doc type="Format">is_playing_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_playing_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_playing”. </Doc></Method><Method compare="common" name="remove_is_playing_listener()"><Doc type="Format">remove_is_playing_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_playing_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_playing”. </Doc></Method><Method compare="common" name="jump_by()"><Doc type="Format">jump_by( (Song)arg1, (float)arg2) → None</Doc><Doc type="Cpp-Signature">void jump_by(TPyHandle&lt;ASong&gt;, double)</Doc><Doc type="Description">Set a new playing pos, relative to the current one. </Doc></Method><Method compare="common" name="jump_to_next_cue()"><Doc type="Format">jump_to_next_cue( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void jump_to_next_cue(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Jump to the next cue (marker) if possible. </Doc></Method><Method compare="common" name="jump_to_prev_cue()"><Doc type="Format">jump_to_prev_cue( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void jump_to_prev_cue(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Jump to the prior cue (marker) if possible. </Doc></Method><Property compare="common" name="last_event_time"><Doc type="Description">Return the time of the last set event in the song. In contrary tosong_length, this will not add some extra beats that are mostly neededfor Display purposes in the Arrangerview.</Doc></Property><Property compare="common" name="loop"><Doc type="Description">Get/Set the the looping flag that en/disables the usage of the globalloop markers in the song.</Doc></Property><Method compare="common" name="add_loop_listener()"><Doc type="Format">add_loop_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_loop_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “loop” has changed. </Doc></Method><Method compare="common" name="loop_has_listener()"><Doc type="Format">loop_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool loop_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “loop”. </Doc></Method><Method compare="common" name="remove_loop_listener()"><Doc type="Format">remove_loop_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_loop_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “loop”. </Doc></Method><Property compare="common" name="loop_length"><Doc type="Description">Get/Set the lenght of the global loop marker position in beats.</Doc></Property><Method compare="common" name="add_loop_length_listener()"><Doc type="Format">add_loop_length_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_loop_length_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “loop_length” has changed. </Doc></Method><Method compare="common" name="loop_length_has_listener()"><Doc type="Format">loop_length_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool loop_length_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “loop_length”. </Doc></Method><Method compare="common" name="remove_loop_length_listener()"><Doc type="Format">remove_loop_length_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_loop_length_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “loop_length”. </Doc></Method><Property compare="common" name="loop_start"><Doc type="Description">Get/Set the start of the global loop marker position in beats.</Doc></Property><Method compare="common" name="add_loop_start_listener()"><Doc type="Format">add_loop_start_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_loop_start_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “loop_start” has changed. </Doc></Method><Method compare="common" name="loop_start_has_listener()"><Doc type="Format">loop_start_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool loop_start_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “loop_start”. </Doc></Method><Method compare="common" name="remove_loop_start_listener()"><Doc type="Format">remove_loop_start_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_loop_start_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “loop_start”. </Doc></Method><Property compare="common" name="master_track"><Doc type="Description">Access to the Master Track (always available)</Doc></Property><Property compare="common" name="metronome"><Doc type="Description">Get/Set if the metronom is audible.</Doc></Property><Method compare="common" name="add_metronome_listener()"><Doc type="Format">add_metronome_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_metronome_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “metronome” has changed. </Doc></Method><Method compare="common" name="metronome_has_listener()"><Doc type="Format">metronome_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool metronome_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “metronome”. </Doc></Method><Method compare="common" name="remove_metronome_listener()"><Doc type="Format">remove_metronome_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_metronome_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “metronome”. </Doc></Method><Property compare="common" name="midi_recording_quantization"><Doc type="Description">Get/Set access to the settings that are used to quantizeMIDI recordings.</Doc></Property><Method compare="common" name="add_midi_recording_quantization_listener()"><Doc type="Format">add_midi_recording_quantization_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_midi_recording_quantization_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “midi_recording_quantization” has changed. </Doc></Method><Method compare="common" name="midi_recording_quantization_has_listener()"><Doc type="Format">midi_recording_quantization_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool midi_recording_quantization_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “midi_recording_quantization”. </Doc></Method><Method compare="common" name="remove_midi_recording_quantization_listener()"><Doc type="Format">remove_midi_recording_quantization_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_midi_recording_quantization_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “midi_recording_quantization”. </Doc></Method><Method compare="common" name="move_device()"><Doc type="Format">move_device( (Song)arg1, (Device)device, (LomObject)target, (int)target_position) → int</Doc><Doc type="Cpp-Signature">int move_device(TPyHandle&lt;ASong&gt;, TPyHandle&lt;ADevice&gt;, TPyHandleBase, int)</Doc><Doc type="Description">Move a device into the target at the given position, where 0 moves it before the first device and len(devices) moves it to the end of the device chain.If the device cannot be moved to this position, the nearest possible position is chosen. If the device type is not valid, a runtime error is raised.Returns the index, where the device was moved to. </Doc></Method><Property compare="common" name="nudge_down"><Doc type="Description">Get/Set the status of the nudge down button.</Doc></Property><Method compare="common" name="add_nudge_down_listener()"><Doc type="Format">add_nudge_down_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_nudge_down_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “nudge_down” has changed. </Doc></Method><Method compare="common" name="nudge_down_has_listener()"><Doc type="Format">nudge_down_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool nudge_down_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “nudge_down”. </Doc></Method><Method compare="common" name="remove_nudge_down_listener()"><Doc type="Format">remove_nudge_down_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_nudge_down_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “nudge_down”. </Doc></Method><Property compare="common" name="nudge_up"><Doc type="Description">Get/Set the status of the nudge up button.</Doc></Property><Method compare="common" name="add_nudge_up_listener()"><Doc type="Format">add_nudge_up_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_nudge_up_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “nudge_up” has changed. </Doc></Method><Method compare="common" name="nudge_up_has_listener()"><Doc type="Format">nudge_up_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool nudge_up_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “nudge_up”. </Doc></Method><Method compare="common" name="remove_nudge_up_listener()"><Doc type="Format">remove_nudge_up_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_nudge_up_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “nudge_up”. </Doc></Method><Property compare="common" name="overdub"><Doc type="Description">Legacy hook for Live 8 overdub state. Now hooks tosession record.</Doc></Property><Method compare="common" name="add_overdub_listener()"><Doc type="Format">add_overdub_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_overdub_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “overdub” has changed. </Doc></Method><Method compare="common" name="overdub_has_listener()"><Doc type="Format">overdub_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool overdub_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “overdub”. </Doc></Method><Method compare="common" name="remove_overdub_listener()"><Doc type="Format">remove_overdub_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_overdub_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “overdub”. </Doc></Method><Method compare="common" name="play_selection()"><Doc type="Format">play_selection( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void play_selection(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Start playing the current set selection, or do nothing if no selection is set. </Doc></Method><Property compare="common" name="punch_in"><Doc type="Description">Get/Set the flag that will enable recording as soon as the Song playsand hits the global loop start region.</Doc></Property><Method compare="common" name="add_punch_in_listener()"><Doc type="Format">add_punch_in_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_punch_in_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “punch_in” has changed. </Doc></Method><Method compare="common" name="punch_in_has_listener()"><Doc type="Format">punch_in_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool punch_in_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “punch_in”. </Doc></Method><Method compare="common" name="remove_punch_in_listener()"><Doc type="Format">remove_punch_in_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_punch_in_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “punch_in”. </Doc></Method><Property compare="common" name="punch_out"><Doc type="Description">Get/Set the flag that will disable recording as soon as the Song playsand hits the global loop end region.</Doc></Property><Method compare="common" name="add_punch_out_listener()"><Doc type="Format">add_punch_out_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_punch_out_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “punch_out” has changed. </Doc></Method><Method compare="common" name="punch_out_has_listener()"><Doc type="Format">punch_out_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool punch_out_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “punch_out”. </Doc></Method><Method compare="common" name="remove_punch_out_listener()"><Doc type="Format">remove_punch_out_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_punch_out_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “punch_out”. </Doc></Method><Method compare="common" name="re_enable_automation()"><Doc type="Format">re_enable_automation( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void re_enable_automation(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Discards overrides of automated parameters. </Doc></Method><Property compare="common" name="re_enable_automation_enabled"><Doc type="Description">Returns true if some automated parameter has been overriden</Doc></Property><Method compare="common" name="add_re_enable_automation_enabled_listener()"><Doc type="Format">add_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_re_enable_automation_enabled_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “re_enable_automation_enabled” has changed. </Doc></Method><Method compare="common" name="re_enable_automation_enabled_has_listener()"><Doc type="Format">re_enable_automation_enabled_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool re_enable_automation_enabled_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “re_enable_automation_enabled”. </Doc></Method><Method compare="common" name="remove_re_enable_automation_enabled_listener()"><Doc type="Format">remove_re_enable_automation_enabled_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_re_enable_automation_enabled_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “re_enable_automation_enabled”. </Doc></Method><Property compare="common" name="record_mode"><Doc type="Description">Get/Set the state of the global recording flag.</Doc></Property><Method compare="common" name="add_record_mode_listener()"><Doc type="Format">add_record_mode_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_record_mode_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “record_mode” has changed. </Doc></Method><Method compare="common" name="record_mode_has_listener()"><Doc type="Format">record_mode_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool record_mode_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “record_mode”. </Doc></Method><Method compare="common" name="remove_record_mode_listener()"><Doc type="Format">remove_record_mode_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_record_mode_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “record_mode”. </Doc></Method><Method compare="common" name="redo()"><Doc type="Format">redo( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void redo(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Redo the last action that was undone. </Doc></Method><Property compare="common" name="return_tracks"><Doc type="Description">Const access to the list of available Return Tracks.</Doc></Property><Method compare="common" name="add_return_tracks_listener()"><Doc type="Format">add_return_tracks_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_return_tracks_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “return_tracks” has changed. </Doc></Method><Method compare="common" name="remove_return_tracks_listener()"><Doc type="Format">remove_return_tracks_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_return_tracks_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “return_tracks”. </Doc></Method><Method compare="common" name="return_tracks_has_listener()"><Doc type="Format">return_tracks_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool return_tracks_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “return_tracks”. </Doc></Method><Property compare="common" name="root_note"><Doc type="Description">Set and access the root note (i.e. key) of the song used for control surfaces. The root note can be a number between 0 and 11, with 0 corresponding to C and 11 corresponding to B.</Doc></Property><Property compare="common" name="scale_name"><Doc type="Description">Set and access the last used scale name for control surfaces. The default scale names that can be saved with a set and recalled are: ‘Major’, ‘Minor’, ‘Dorian’, ‘Mixolydian’, ‘Lydian’, ‘Phrygian’, ‘Locrian’, ‘Diminished’, ‘Whole-half’, ‘Whole Tone’, ‘Minor Blues’, ‘Minor Pentatonic’, ‘Major Pentatonic’, ‘Harmonic Minor’, ‘Melodic Minor’, ‘Super Locrian’, ‘Bhairav’, ‘Hungarian Minor’, ‘Minor Gypsy’, ‘Hirojoshi’, ‘In-Sen’, ‘Iwato’, ‘Kumoi’, ‘Pelog’, ‘Spanish’</Doc></Property><Property compare="common" name="scenes"><Doc type="Description">Const access to a list of all Scenes in the Live Song.</Doc></Property><Method compare="common" name="add_scenes_listener()"><Doc type="Format">add_scenes_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_scenes_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “scenes” has changed. </Doc></Method><Method compare="common" name="remove_scenes_listener()"><Doc type="Format">remove_scenes_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_scenes_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “scenes”. </Doc></Method><Method compare="common" name="scenes_has_listener()"><Doc type="Format">scenes_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool scenes_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “scenes”. </Doc></Method><Method compare="common" name="scrub_by()"><Doc type="Format">scrub_by( (Song)arg1, (float)arg2) → None</Doc><Doc type="Cpp-Signature">void scrub_by(TPyHandle&lt;ASong&gt;, double)</Doc><Doc type="Description">Same as jump_by, but does not stop playback. </Doc></Method><Property compare="common" name="select_on_launch"><Doc type="Description">Get if Scenes and Clips should be selected when fired.</Doc></Property><Property compare="common" name="session_automation_record"><Doc type="Description">Returns true if automation recording is enabled.</Doc></Property><Method compare="common" name="add_session_automation_record_listener()"><Doc type="Format">add_session_automation_record_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_session_automation_record_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “session_automation_record” has changed. </Doc></Method><Method compare="common" name="remove_session_automation_record_listener()"><Doc type="Format">remove_session_automation_record_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_session_automation_record_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “session_automation_record”. </Doc></Method><Method compare="common" name="session_automation_record_has_listener()"><Doc type="Format">session_automation_record_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool session_automation_record_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “session_automation_record”. </Doc></Method><Property compare="common" name="session_record"><Doc type="Description">Get/Set the session record state.</Doc></Property><Method compare="common" name="add_session_record_listener()"><Doc type="Format">add_session_record_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_session_record_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “session_record” has changed. </Doc></Method><Method compare="common" name="remove_session_record_listener()"><Doc type="Format">remove_session_record_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_session_record_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “session_record”. </Doc></Method><Method compare="common" name="session_record_has_listener()"><Doc type="Format">session_record_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool session_record_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “session_record”. </Doc></Method><Property compare="common" name="session_record_status"><Doc type="Description">Get the session slot-recording state.</Doc></Property><Method compare="common" name="add_session_record_status_listener()"><Doc type="Format">add_session_record_status_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_session_record_status_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “session_record_status” has changed. </Doc></Method><Method compare="common" name="remove_session_record_status_listener()"><Doc type="Format">remove_session_record_status_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_session_record_status_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “session_record_status”. </Doc></Method><Method compare="common" name="session_record_status_has_listener()"><Doc type="Format">session_record_status_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool session_record_status_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “session_record_status”. </Doc></Method><Method compare="common" name="set_data()"><Doc type="Format">set_data( (Song)arg1, (object)key, (object)value) → None</Doc><Doc type="Cpp-Signature">void set_data(TPyHandle&lt;ASong&gt;, TString, boost::python::api::object)</Doc><Doc type="Description">Store data for the given key in this object. The data is persistent and will be restored when loading the Live Set. </Doc></Method><Method compare="common" name="set_or_delete_cue()"><Doc type="Format">set_or_delete_cue( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void set_or_delete_cue(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">When a cue is selected, it gets deleted. If no cue is selected, a new cue is created at the current global songtime. </Doc></Method><Property compare="common" name="signature_denominator"><Doc type="Description">Get/Set access to the global signature denominator of the Song.</Doc></Property><Method compare="common" name="add_signature_denominator_listener()"><Doc type="Format">add_signature_denominator_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_signature_denominator_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “signature_denominator” has changed. </Doc></Method><Method compare="common" name="remove_signature_denominator_listener()"><Doc type="Format">remove_signature_denominator_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_signature_denominator_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “signature_denominator”. </Doc></Method><Method compare="common" name="signature_denominator_has_listener()"><Doc type="Format">signature_denominator_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool signature_denominator_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “signature_denominator”. </Doc></Method><Property compare="common" name="signature_numerator"><Doc type="Description">Get/Set access to the global signature numerator of the Song.</Doc></Property><Method compare="common" name="add_signature_numerator_listener()"><Doc type="Format">add_signature_numerator_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_signature_numerator_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “signature_numerator” has changed. </Doc></Method><Method compare="common" name="remove_signature_numerator_listener()"><Doc type="Format">remove_signature_numerator_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_signature_numerator_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “signature_numerator”. </Doc></Method><Method compare="common" name="signature_numerator_has_listener()"><Doc type="Format">signature_numerator_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool signature_numerator_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “signature_numerator”. </Doc></Method><Property compare="common" name="song_length"><Doc type="Description">Return the time of the last set event in the song, plus som extra beatsthat are usually added for better navigation in the arrangerview.</Doc></Property><Method compare="common" name="add_song_length_listener()"><Doc type="Format">add_song_length_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_song_length_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “song_length” has changed. </Doc></Method><Method compare="common" name="remove_song_length_listener()"><Doc type="Format">remove_song_length_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_song_length_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “song_length”. </Doc></Method><Method compare="common" name="song_length_has_listener()"><Doc type="Format">song_length_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool song_length_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “song_length”. </Doc></Method><Method compare="common" name="start_playing()"><Doc type="Format">start_playing( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void start_playing(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Start playing from the startmarker </Doc></Method><Method compare="common" name="stop_all_clips()"><Doc type="Format">stop_all_clips( (Song)arg1 [, (bool)Quantized=True]) → None</Doc><Doc type="Cpp-Signature">void stop_all_clips(TPyHandle&lt;ASong&gt; [, bool=True])</Doc><Doc type="Description">Stop all playing Clips (if any) but continue playing the Song. </Doc></Method><Method compare="common" name="stop_playing()"><Doc type="Format">stop_playing( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void stop_playing(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Stop playing the Song. </Doc></Method><Property compare="common" name="swing_amount"><Doc type="Description">Get/Set access to the amount of swing that is applied when adding or quantizing notes to MIDI clips</Doc></Property><Method compare="common" name="add_swing_amount_listener()"><Doc type="Format">add_swing_amount_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_swing_amount_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “swing_amount” has changed. </Doc></Method><Method compare="common" name="remove_swing_amount_listener()"><Doc type="Format">remove_swing_amount_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_swing_amount_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “swing_amount”. </Doc></Method><Method compare="common" name="swing_amount_has_listener()"><Doc type="Format">swing_amount_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool swing_amount_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “swing_amount”. </Doc></Method><Method compare="common" name="tap_tempo()"><Doc type="Format">tap_tempo( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void tap_tempo(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Trigger the tap tempo function. </Doc></Method><Property compare="common" name="tempo"><Doc type="Description">Get/Set the global project tempo.</Doc></Property><Method compare="common" name="add_tempo_listener()"><Doc type="Format">add_tempo_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_tempo_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “tempo” has changed. </Doc></Method><Method compare="common" name="remove_tempo_listener()"><Doc type="Format">remove_tempo_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_tempo_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “tempo”. </Doc></Method><Method compare="common" name="tempo_has_listener()"><Doc type="Format">tempo_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool tempo_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “tempo”. </Doc></Method><Property compare="common" name="tracks"><Doc type="Description">Const access to a list of all Player Tracks in the Live Song, exludingthe return and Master Track (see also Song.send_tracks and Song.master_track).At least one MIDI or Audio Track is always available.</Doc></Property><Method compare="common" name="add_tracks_listener()"><Doc type="Format">add_tracks_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_tracks_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “tracks” has changed. </Doc></Method><Method compare="common" name="remove_tracks_listener()"><Doc type="Format">remove_tracks_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_tracks_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “tracks”. </Doc></Method><Method compare="common" name="tracks_has_listener()"><Doc type="Format">tracks_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool tracks_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “tracks”. </Doc></Method><Method compare="common" name="trigger_session_record()"><Doc type="Format">trigger_session_record( (Song)self [, (float)record_length=1.7976931348623157e+308]) → None</Doc><Doc type="Cpp-Signature">void trigger_session_record(TPyHandle&lt;ASong&gt; [, double=1.7976931348623157e+308])</Doc><Doc type="Description">Triggers a new session recording. </Doc></Method><Method compare="common" name="undo()"><Doc type="Format">undo( (Song)arg1) → None</Doc><Doc type="Cpp-Signature">void undo(TPyHandle&lt;ASong&gt;)</Doc><Doc type="Description">Undo the last action that was made. </Doc></Method><Property compare="common" name="view"><Doc type="Description">Representing the view aspects of a Live document: The Session and Arrangerview.</Doc></Property><Property compare="common" name="visible_tracks"><Doc type="Description">Const access to a list of all visible Player Tracks in the Live Song, exludingthe return and Master Track (see also Song.send_tracks and Song.master_track).At least one MIDI or Audio Track is always available.</Doc></Property><Method compare="common" name="add_visible_tracks_listener()"><Doc type="Format">add_visible_tracks_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_visible_tracks_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “visible_tracks” has changed. </Doc></Method><Method compare="common" name="remove_visible_tracks_listener()"><Doc type="Format">remove_visible_tracks_listener( (Song)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_visible_tracks_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “visible_tracks”. </Doc></Method><Method compare="common" name="visible_tracks_has_listener()"><Doc type="Format">visible_tracks_has_listener( (Song)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool visible_tracks_has_listener(TPyHandle&lt;ASong&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “visible_tracks”. </Doc></Method></Class><Class compare="common" name="TimeFormat"><Value compare="common" name="ms_time" /><Value compare="common" name="smpte_24" /><Value compare="common" name="smpte_25" /><Value compare="common" name="smpte_29" /><Value compare="common" name="smpte_30" /><Value compare="common" name="smpte_30_drop" /></Class></Module><Module compare="common" name="String" /><Module compare="common" name="Track"><Class compare="common" name="DeviceContainer"><Doc type="Description">This class is a common super class of Track and Chain</Doc><Property compare="common" name="_live_ptr" /></Class><Class compare="common" name="DeviceInsertMode"><Value compare="common" name="count" /><Value compare="common" name="default" /><Value compare="common" name="selected_left" /><Value compare="common" name="selected_right" /></Class><Class compare="common" name="RoutingChannel"><Doc type="Description">This class represents a routing channel.</Doc><Property compare="common" name="display_name"><Doc type="Description">Display name of routing channel.</Doc></Property><Property compare="common" name="layout"><Doc type="Description">The routing channel’s Layout, e.g., mono or stereo.</Doc></Property></Class><Class compare="common" name="RoutingChannelLayout"><Value compare="common" name="midi" /><Value compare="common" name="mono" /><Value compare="common" name="stereo" /></Class><Class compare="common" name="RoutingChannelVector"><Doc type="Description">A container for returning routing channels from Live.</Doc><Method compare="common" name="append()"><Doc type="Format">append( (RoutingChannelVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::__1::vector&lt;NPythonRouting::TPythonRoutingChannel, std::__1::allocator&lt;NPythonRouting::TPythonRoutingChannel&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method compare="common" name="extend()"><Doc type="Format">extend( (RoutingChannelVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::__1::vector&lt;NPythonRouting::TPythonRoutingChannel, std::__1::allocator&lt;NPythonRouting::TPythonRoutingChannel&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class><Class compare="common" name="RoutingType"><Doc type="Description">This class represents a routing type.</Doc><Property compare="common" name="attached_object"><Doc type="Description">Live object associated with the routing type.</Doc></Property><Property compare="common" name="category"><Doc type="Description">Category of the routing type.</Doc></Property><Property compare="common" name="display_name"><Doc type="Description">Display name of routing type.</Doc></Property></Class><Class compare="common" name="RoutingTypeCategory"><Value compare="common" name="external" /><Value compare="common" name="invalid" /><Value compare="common" name="master" /><Value compare="common" name="none" /><Value compare="common" name="parent_group_track" /><Value compare="common" name="resampling" /><Value compare="common" name="rewire" /><Value compare="common" name="track" /></Class><Class compare="common" name="RoutingTypeVector"><Doc type="Description">A container for returning routing types from Live.</Doc><Method compare="common" name="append()"><Doc type="Format">append( (RoutingTypeVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void append(std::__1::vector&lt;NPythonRouting::TPythonRoutingType, std::__1::allocator&lt;NPythonRouting::TPythonRoutingType&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method><Method compare="common" name="extend()"><Doc type="Format">extend( (RoutingTypeVector)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void extend(std::__1::vector&lt;NPythonRouting::TPythonRoutingType, std::__1::allocator&lt;NPythonRouting::TPythonRoutingType&gt; &gt; {lvalue}, boost::python::api::object)</Doc><Doc type="Description" /></Method></Class><Class compare="common" name="Track"><Doc type="Description">This class represents a track in Live. It can be either an Audio track, a MIDI Track, a Return Track or the Master track. The Master Track and at least one Audio or MIDI track will be always present.Return Tracks are optional.</Doc><Class compare="common" name="View"><Doc type="Description">Representing the view aspects of a Track.</Doc><Property compare="common" name="_live_ptr" /><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the track view.</Doc></Property><Property compare="common" name="device_insert_mode"><Doc type="Description">Get/Listen the device insertion mode of the track.  By default, it will insert devices at the end, but it can be changed to make it relative to current selection.</Doc></Property><Method compare="common" name="add_device_insert_mode_listener()"><Doc type="Format">add_device_insert_mode_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_device_insert_mode_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “device_insert_mode” has changed. </Doc></Method><Method compare="common" name="device_insert_mode_has_listener()"><Doc type="Format">device_insert_mode_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool device_insert_mode_has_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “device_insert_mode”. </Doc></Method><Method compare="common" name="remove_device_insert_mode_listener()"><Doc type="Format">remove_device_insert_mode_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_device_insert_mode_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “device_insert_mode”. </Doc></Method><Property compare="common" name="is_collapsed"><Doc type="Description">Get/Set/Listen if the track is shown collapsed in the arranger view.</Doc></Property><Method compare="common" name="add_is_collapsed_listener()"><Doc type="Format">add_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_collapsed_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_collapsed” has changed. </Doc></Method><Method compare="common" name="is_collapsed_has_listener()"><Doc type="Format">is_collapsed_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_collapsed_has_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_collapsed”. </Doc></Method><Method compare="common" name="remove_is_collapsed_listener()"><Doc type="Format">remove_is_collapsed_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_collapsed_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_collapsed”. </Doc></Method><Method compare="common" name="select_instrument()"><Doc type="Format">select_instrument( (View)arg1) → bool</Doc><Doc type="Cpp-Signature">bool select_instrument(TPyViewData&lt;ATrack&gt;)</Doc><Doc type="Description">Selects the track’s instrument if it has one. </Doc></Method><Property compare="common" name="selected_device"><Doc type="Description">Get/Set/Listen the insertion mode of the device.  While in insertion mode, loading new devices from the browser will place devices at the selected position.</Doc></Property><Method compare="common" name="add_selected_device_listener()"><Doc type="Format">add_selected_device_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_selected_device_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “selected_device” has changed. </Doc></Method><Method compare="common" name="remove_selected_device_listener()"><Doc type="Format">remove_selected_device_listener( (View)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_selected_device_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “selected_device”. </Doc></Method><Method compare="common" name="selected_device_has_listener()"><Doc type="Format">selected_device_has_listener( (View)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool selected_device_has_listener(TPyViewData&lt;ATrack&gt;, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “selected_device”. </Doc></Method></Class><Property compare="common" name="_live_ptr" /><Property compare="common" name="arm"><Doc type="Description">Arm the track for recording. Not available for Master- and Send Tracks.</Doc></Property><Method compare="common" name="add_arm_listener()"><Doc type="Format">add_arm_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_arm_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “arm” has changed. </Doc></Method><Method compare="common" name="arm_has_listener()"><Doc type="Format">arm_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool arm_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “arm”. </Doc></Method><Method compare="common" name="remove_arm_listener()"><Doc type="Format">remove_arm_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_arm_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “arm”. </Doc></Method><Property compare="common" name="available_input_routing_channels"><Doc type="Description">Return a list of source channels for input routing.</Doc></Property><Method compare="common" name="add_available_input_routing_channels_listener()"><Doc type="Format">add_available_input_routing_channels_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_available_input_routing_channels_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “available_input_routing_channels” has changed. </Doc></Method><Method compare="common" name="available_input_routing_channels_has_listener()"><Doc type="Format">available_input_routing_channels_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool available_input_routing_channels_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “available_input_routing_channels”. </Doc></Method><Method compare="common" name="remove_available_input_routing_channels_listener()"><Doc type="Format">remove_available_input_routing_channels_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_available_input_routing_channels_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “available_input_routing_channels”. </Doc></Method><Property compare="common" name="available_input_routing_types"><Doc type="Description">Return a list of source types for input routing.</Doc></Property><Method compare="common" name="add_available_input_routing_types_listener()"><Doc type="Format">add_available_input_routing_types_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_available_input_routing_types_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “available_input_routing_types” has changed. </Doc></Method><Method compare="common" name="available_input_routing_types_has_listener()"><Doc type="Format">available_input_routing_types_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool available_input_routing_types_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “available_input_routing_types”. </Doc></Method><Method compare="common" name="remove_available_input_routing_types_listener()"><Doc type="Format">remove_available_input_routing_types_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_available_input_routing_types_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “available_input_routing_types”. </Doc></Method><Property compare="common" name="available_output_routing_channels"><Doc type="Description">Return a list of destination channels for output routing.</Doc></Property><Method compare="common" name="add_available_output_routing_channels_listener()"><Doc type="Format">add_available_output_routing_channels_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_available_output_routing_channels_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “available_output_routing_channels” has changed. </Doc></Method><Method compare="common" name="available_output_routing_channels_has_listener()"><Doc type="Format">available_output_routing_channels_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool available_output_routing_channels_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “available_output_routing_channels”. </Doc></Method><Method compare="common" name="remove_available_output_routing_channels_listener()"><Doc type="Format">remove_available_output_routing_channels_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_available_output_routing_channels_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “available_output_routing_channels”. </Doc></Method><Property compare="common" name="available_output_routing_types"><Doc type="Description">Return a list of destination types for output routing.</Doc></Property><Method compare="common" name="add_available_output_routing_types_listener()"><Doc type="Format">add_available_output_routing_types_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_available_output_routing_types_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “available_output_routing_types” has changed. </Doc></Method><Method compare="common" name="available_output_routing_types_has_listener()"><Doc type="Format">available_output_routing_types_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool available_output_routing_types_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “available_output_routing_types”. </Doc></Method><Method compare="common" name="remove_available_output_routing_types_listener()"><Doc type="Format">remove_available_output_routing_types_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_available_output_routing_types_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “available_output_routing_types”. </Doc></Method><Property compare="common" name="can_be_armed"><Doc type="Description">return True, if this Track has a valid arm property. Not all trackscan be armed (for example return Tracks or the Master Tracks).</Doc></Property><Property compare="common" name="can_be_frozen"><Doc type="Description">return True, if this Track can be frozen.</Doc></Property><Property compare="common" name="can_show_chains"><Doc type="Description">return True, if this Track contains a rack instrument device that is capable of showing its chains in session view.</Doc></Property><Property compare="common" name="canonical_parent"><Doc type="Description">Get the canonical parent of the track.</Doc></Property><Property compare="common" name="clip_slots"><Doc type="Description">const access to the list of clipslots (see class AClipSlot) for this track.The list will be empty for the master and sendtracks.</Doc></Property><Method compare="common" name="add_clip_slots_listener()"><Doc type="Format">add_clip_slots_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_clip_slots_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “clip_slots” has changed. </Doc></Method><Method compare="common" name="clip_slots_has_listener()"><Doc type="Format">clip_slots_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool clip_slots_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “clip_slots”. </Doc></Method><Method compare="common" name="remove_clip_slots_listener()"><Doc type="Format">remove_clip_slots_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_clip_slots_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “clip_slots”. </Doc></Method><Property compare="common" name="color"><Doc type="Description">Get/set access to the color of the Track (RGB).</Doc></Property><Method compare="common" name="add_color_listener()"><Doc type="Format">add_color_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_color_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color” has changed. </Doc></Method><Method compare="common" name="color_has_listener()"><Doc type="Format">color_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool color_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color”. </Doc></Method><Method compare="common" name="remove_color_listener()"><Doc type="Format">remove_color_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_color_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color”. </Doc></Method><Property compare="common" name="color_index"><Doc type="Description">Get/Set access to the color index of the track. Can be None for no color.</Doc></Property><Method compare="common" name="add_color_index_listener()"><Doc type="Format">add_color_index_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_color_index_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “color_index” has changed. </Doc></Method><Method compare="common" name="color_index_has_listener()"><Doc type="Format">color_index_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool color_index_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “color_index”. </Doc></Method><Method compare="common" name="remove_color_index_listener()"><Doc type="Format">remove_color_index_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_color_index_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “color_index”. </Doc></Method><Property compare="common" name="current_input_routing"><Doc type="Description">Get/Set the name of the current active input routing.When setting a new routing, the new routing must be one of the available ones.</Doc></Property><Method compare="common" name="add_current_input_routing_listener()"><Doc type="Format">add_current_input_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_current_input_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “current_input_routing” has changed. </Doc></Method><Method compare="common" name="current_input_routing_has_listener()"><Doc type="Format">current_input_routing_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool current_input_routing_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “current_input_routing”. </Doc></Method><Method compare="common" name="remove_current_input_routing_listener()"><Doc type="Format">remove_current_input_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_current_input_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “current_input_routing”. </Doc></Method><Property compare="common" name="current_input_sub_routing"><Doc type="Description">Get/Set the current active input sub routing.When setting a new routing, the new routing must be one of the available ones.</Doc></Property><Method compare="common" name="add_current_input_sub_routing_listener()"><Doc type="Format">add_current_input_sub_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_current_input_sub_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “current_input_sub_routing” has changed. </Doc></Method><Method compare="common" name="current_input_sub_routing_has_listener()"><Doc type="Format">current_input_sub_routing_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool current_input_sub_routing_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “current_input_sub_routing”. </Doc></Method><Method compare="common" name="remove_current_input_sub_routing_listener()"><Doc type="Format">remove_current_input_sub_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_current_input_sub_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “current_input_sub_routing”. </Doc></Method><Property compare="common" name="current_monitoring_state"><Doc type="Description">Get/Set the track’s current monitoring state.</Doc></Property><Method compare="common" name="add_current_monitoring_state_listener()"><Doc type="Format">add_current_monitoring_state_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_current_monitoring_state_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “current_monitoring_state” has changed. </Doc></Method><Method compare="common" name="current_monitoring_state_has_listener()"><Doc type="Format">current_monitoring_state_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool current_monitoring_state_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “current_monitoring_state”. </Doc></Method><Method compare="common" name="remove_current_monitoring_state_listener()"><Doc type="Format">remove_current_monitoring_state_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_current_monitoring_state_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “current_monitoring_state”. </Doc></Method><Property compare="common" name="current_output_routing"><Doc type="Description">Get/Set the current active output routing.When setting a new routing, the new routing must be one of the available ones.</Doc></Property><Method compare="common" name="add_current_output_routing_listener()"><Doc type="Format">add_current_output_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_current_output_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “current_output_routing” has changed. </Doc></Method><Method compare="common" name="current_output_routing_has_listener()"><Doc type="Format">current_output_routing_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool current_output_routing_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “current_output_routing”. </Doc></Method><Method compare="common" name="remove_current_output_routing_listener()"><Doc type="Format">remove_current_output_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_current_output_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “current_output_routing”. </Doc></Method><Property compare="common" name="current_output_sub_routing"><Doc type="Description">Get/Set the current active output sub routing.When setting a new routing, the new routing must be one of the available ones.</Doc></Property><Method compare="common" name="add_current_output_sub_routing_listener()"><Doc type="Format">add_current_output_sub_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_current_output_sub_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “current_output_sub_routing” has changed. </Doc></Method><Method compare="common" name="current_output_sub_routing_has_listener()"><Doc type="Format">current_output_sub_routing_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool current_output_sub_routing_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “current_output_sub_routing”. </Doc></Method><Method compare="common" name="remove_current_output_sub_routing_listener()"><Doc type="Format">remove_current_output_sub_routing_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_current_output_sub_routing_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “current_output_sub_routing”. </Doc></Method><Method compare="common" name="add_data_listener()"><Doc type="Format">add_data_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_data_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “data” has changed. </Doc></Method><Method compare="common" name="data_has_listener()"><Doc type="Format">data_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool data_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “data”. </Doc></Method><Method compare="common" name="remove_data_listener()"><Doc type="Format">remove_data_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_data_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “data”. </Doc></Method><Method compare="common" name="delete_clip()"><Doc type="Format">delete_clip( (Track)arg1, (Clip)arg2) → None</Doc><Doc type="Cpp-Signature">void delete_clip(TTrackPyHandle, TPyHandle&lt;AClip&gt;)</Doc><Doc type="Description">Delete the given clip. Raises a runtime error when the clip belongs to another track. </Doc></Method><Method compare="common" name="delete_device()"><Doc type="Format">delete_device( (Track)arg1, (int)arg2) → None</Doc><Doc type="Cpp-Signature">void delete_device(TTrackPyHandle, int)</Doc><Doc type="Description">Delete a device identified by the index in the ‘devices’ list. </Doc></Method><Property compare="common" name="devices"><Doc type="Description">Return const access to all available Devices that are present in the TracksDevicechain. This tuple will also include the ‘mixer_device’ that every Trackalways has.</Doc></Property><Method compare="common" name="add_devices_listener()"><Doc type="Format">add_devices_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_devices_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “devices” has changed. </Doc></Method><Method compare="common" name="devices_has_listener()"><Doc type="Format">devices_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool devices_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “devices”. </Doc></Method><Method compare="common" name="remove_devices_listener()"><Doc type="Format">remove_devices_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_devices_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “devices”. </Doc></Method><Method compare="common" name="duplicate_clip_slot()"><Doc type="Format">duplicate_clip_slot( (Track)arg1, (int)arg2) → int</Doc><Doc type="Cpp-Signature">int duplicate_clip_slot(TTrackPyHandle, int)</Doc><Doc type="Description">Duplicate a clip and put it into the next free slot and return the index of the destination slot. A new scene is created if no free slot is available. If creating the new scene would exceed the limitations, a runtime error is raised. </Doc></Method><Method compare="common" name="duplicate_clip_to_arrangement()"><Doc type="Format">duplicate_clip_to_arrangement( (Track)self, (Clip)clip, (float)destination_time) → Clip</Doc><Doc type="Cpp-Signature">TWeakPtr&lt;TPyHandle&lt;AClip&gt; &gt; duplicate_clip_to_arrangement(TTrackPyHandle, TPyHandle&lt;AClip&gt;, double)</Doc><Doc type="Description">Duplicate the given clip into the arrangement of this track at the provided destination time and return it. When the type of the clip and the type of the track are incompatible, a runtime error is raised. </Doc></Method><Property compare="common" name="fired_slot_index"><Doc type="Description">const access to the index of the fired (and thus blinking) clipslot in this track.This index is -1 if no slot is fired and -2 if the track’s stop button has been fired.</Doc></Property><Method compare="common" name="add_fired_slot_index_listener()"><Doc type="Format">add_fired_slot_index_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_fired_slot_index_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “fired_slot_index” has changed. </Doc></Method><Method compare="common" name="fired_slot_index_has_listener()"><Doc type="Format">fired_slot_index_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool fired_slot_index_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “fired_slot_index”. </Doc></Method><Method compare="common" name="remove_fired_slot_index_listener()"><Doc type="Format">remove_fired_slot_index_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_fired_slot_index_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “fired_slot_index”. </Doc></Method><Property compare="common" name="fold_state"><Doc type="Description">Get/Set whether the track is folded or not. Only available if is_foldable is True.</Doc></Property><Method compare="common" name="get_data()"><Doc type="Format">get_data( (Track)arg1, (object)key, (object)default_value) → object</Doc><Doc type="Cpp-Signature">boost::python::api::object get_data(TTrackPyHandle, TString, boost::python::api::object)</Doc><Doc type="Description">Get data for the given key, that was previously stored using set_data. </Doc></Method><Property compare="common" name="group_track"><Doc type="Description">return the group track if is_grouped.</Doc></Property><Property compare="common" name="has_audio_input"><Doc type="Description">return True, if this Track can be feed with an Audio signal. This istrue for all Audio Tracks.</Doc></Property><Method compare="common" name="add_has_audio_input_listener()"><Doc type="Format">add_has_audio_input_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_has_audio_input_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_audio_input” has changed. </Doc></Method><Method compare="common" name="has_audio_input_has_listener()"><Doc type="Format">has_audio_input_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool has_audio_input_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_audio_input”. </Doc></Method><Method compare="common" name="remove_has_audio_input_listener()"><Doc type="Format">remove_has_audio_input_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_has_audio_input_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_audio_input”. </Doc></Method><Property compare="common" name="has_audio_output"><Doc type="Description">return True, if this Track sends out an Audio signal. This istrue for all Audio Tracks, and MIDI tracks with an Instrument.</Doc></Property><Method compare="common" name="add_has_audio_output_listener()"><Doc type="Format">add_has_audio_output_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_has_audio_output_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_audio_output” has changed. </Doc></Method><Method compare="common" name="has_audio_output_has_listener()"><Doc type="Format">has_audio_output_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool has_audio_output_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_audio_output”. </Doc></Method><Method compare="common" name="remove_has_audio_output_listener()"><Doc type="Format">remove_has_audio_output_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_has_audio_output_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_audio_output”. </Doc></Method><Property compare="common" name="has_midi_input"><Doc type="Description">return True, if this Track can be feed with an Audio signal. This istrue for all MIDI Tracks.</Doc></Property><Method compare="common" name="add_has_midi_input_listener()"><Doc type="Format">add_has_midi_input_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_has_midi_input_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_midi_input” has changed. </Doc></Method><Method compare="common" name="has_midi_input_has_listener()"><Doc type="Format">has_midi_input_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool has_midi_input_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_midi_input”. </Doc></Method><Method compare="common" name="remove_has_midi_input_listener()"><Doc type="Format">remove_has_midi_input_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_has_midi_input_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_midi_input”. </Doc></Method><Property compare="common" name="has_midi_output"><Doc type="Description">return True, if this Track sends out MIDI events. This istrue for all MIDI Tracks with no Instruments.</Doc></Property><Method compare="common" name="add_has_midi_output_listener()"><Doc type="Format">add_has_midi_output_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_has_midi_output_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “has_midi_output” has changed. </Doc></Method><Method compare="common" name="has_midi_output_has_listener()"><Doc type="Format">has_midi_output_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool has_midi_output_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “has_midi_output”. </Doc></Method><Method compare="common" name="remove_has_midi_output_listener()"><Doc type="Format">remove_has_midi_output_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_has_midi_output_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “has_midi_output”. </Doc></Method><Property compare="common" name="implicit_arm"><Doc type="Description">Arm the track for recording. When The track is implicitly armed, it showsin a weaker color in the live GUI and is not saved in the set.</Doc></Property><Method compare="common" name="add_implicit_arm_listener()"><Doc type="Format">add_implicit_arm_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_implicit_arm_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “implicit_arm” has changed. </Doc></Method><Method compare="common" name="implicit_arm_has_listener()"><Doc type="Format">implicit_arm_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool implicit_arm_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “implicit_arm”. </Doc></Method><Method compare="common" name="remove_implicit_arm_listener()"><Doc type="Format">remove_implicit_arm_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_implicit_arm_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “implicit_arm”. </Doc></Method><Property compare="common" name="input_meter_left"><Doc type="Description">Momentary value of left input channel meter, 0.0 to 1.0. For Audio Tracks only.</Doc></Property><Method compare="common" name="add_input_meter_left_listener()"><Doc type="Format">add_input_meter_left_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_input_meter_left_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “input_meter_left” has changed. </Doc></Method><Method compare="common" name="input_meter_left_has_listener()"><Doc type="Format">input_meter_left_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool input_meter_left_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “input_meter_left”. </Doc></Method><Method compare="common" name="remove_input_meter_left_listener()"><Doc type="Format">remove_input_meter_left_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_input_meter_left_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “input_meter_left”. </Doc></Method><Property compare="common" name="input_meter_level"><Doc type="Description">Return the MIDI or Audio meter value of the Tracks input, depending on thetype of the Track input. Meter values (MIDI or Audio) are always scaledfrom 0.0 to 1.0.</Doc></Property><Method compare="common" name="add_input_meter_level_listener()"><Doc type="Format">add_input_meter_level_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_input_meter_level_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “input_meter_level” has changed. </Doc></Method><Method compare="common" name="input_meter_level_has_listener()"><Doc type="Format">input_meter_level_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool input_meter_level_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “input_meter_level”. </Doc></Method><Method compare="common" name="remove_input_meter_level_listener()"><Doc type="Format">remove_input_meter_level_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_input_meter_level_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “input_meter_level”. </Doc></Method><Property compare="common" name="input_meter_right"><Doc type="Description">Momentary value of right input channel meter, 0.0 to 1.0. For Audio Tracks only.</Doc></Property><Method compare="common" name="add_input_meter_right_listener()"><Doc type="Format">add_input_meter_right_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_input_meter_right_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “input_meter_right” has changed. </Doc></Method><Method compare="common" name="input_meter_right_has_listener()"><Doc type="Format">input_meter_right_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool input_meter_right_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “input_meter_right”. </Doc></Method><Method compare="common" name="remove_input_meter_right_listener()"><Doc type="Format">remove_input_meter_right_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_input_meter_right_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “input_meter_right”. </Doc></Method><Property compare="common" name="input_routing_channel"><Doc type="Description">Get and set the current source channel for input routing.Raises ValueError if the type isn’t one of the current values inavailable_input_routing_channels.</Doc></Property><Method compare="common" name="add_input_routing_channel_listener()"><Doc type="Format">add_input_routing_channel_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_input_routing_channel_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “input_routing_channel” has changed. </Doc></Method><Method compare="common" name="input_routing_channel_has_listener()"><Doc type="Format">input_routing_channel_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool input_routing_channel_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “input_routing_channel”. </Doc></Method><Method compare="common" name="remove_input_routing_channel_listener()"><Doc type="Format">remove_input_routing_channel_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_input_routing_channel_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “input_routing_channel”. </Doc></Method><Property compare="common" name="input_routing_type"><Doc type="Description">Get and set the current source type for input routing.Raises ValueError if the type isn’t one of the current values inavailable_input_routing_types.</Doc></Property><Method compare="common" name="add_input_routing_type_listener()"><Doc type="Format">add_input_routing_type_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_input_routing_type_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “input_routing_type” has changed. </Doc></Method><Method compare="common" name="input_routing_type_has_listener()"><Doc type="Format">input_routing_type_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool input_routing_type_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “input_routing_type”. </Doc></Method><Method compare="common" name="remove_input_routing_type_listener()"><Doc type="Format">remove_input_routing_type_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_input_routing_type_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “input_routing_type”. </Doc></Method><Property compare="common" name="input_routings"><Doc type="Description">Const access to the list of available input routings.</Doc></Property><Method compare="common" name="add_input_routings_listener()"><Doc type="Format">add_input_routings_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_input_routings_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “input_routings” has changed. </Doc></Method><Method compare="common" name="input_routings_has_listener()"><Doc type="Format">input_routings_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool input_routings_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “input_routings”. </Doc></Method><Method compare="common" name="remove_input_routings_listener()"><Doc type="Format">remove_input_routings_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_input_routings_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “input_routings”. </Doc></Method><Property compare="common" name="input_sub_routings"><Doc type="Description">Return a list of all available input sub routings.</Doc></Property><Method compare="common" name="add_input_sub_routings_listener()"><Doc type="Format">add_input_sub_routings_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_input_sub_routings_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “input_sub_routings” has changed. </Doc></Method><Method compare="common" name="input_sub_routings_has_listener()"><Doc type="Format">input_sub_routings_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool input_sub_routings_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “input_sub_routings”. </Doc></Method><Method compare="common" name="remove_input_sub_routings_listener()"><Doc type="Format">remove_input_sub_routings_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_input_sub_routings_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “input_sub_routings”. </Doc></Method><Property compare="common" name="is_foldable"><Doc type="Description">return True if the track can be (un)folded to hide/reveal contained tracks.</Doc></Property><Property compare="common" name="is_frozen"><Doc type="Description">return True if this Track is currently frozen. No changes should be applied to the track’s devices or clips while it is frozen.</Doc></Property><Method compare="common" name="add_is_frozen_listener()"><Doc type="Format">add_is_frozen_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_frozen_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_frozen” has changed. </Doc></Method><Method compare="common" name="is_frozen_has_listener()"><Doc type="Format">is_frozen_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_frozen_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_frozen”. </Doc></Method><Method compare="common" name="remove_is_frozen_listener()"><Doc type="Format">remove_is_frozen_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_frozen_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_frozen”. </Doc></Method><Property compare="common" name="is_grouped"><Doc type="Description">return True if this Track is current part of a group track.</Doc></Property><Property compare="common" name="is_part_of_selection"><Doc type="Description">return False if the track is not selected.</Doc></Property><Property compare="common" name="is_showing_chains"><Doc type="Description">Get/Set whether a track with a rack device is showing its chains in session view.</Doc></Property><Method compare="common" name="add_is_showing_chains_listener()"><Doc type="Format">add_is_showing_chains_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_is_showing_chains_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “is_showing_chains” has changed. </Doc></Method><Method compare="common" name="is_showing_chains_has_listener()"><Doc type="Format">is_showing_chains_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool is_showing_chains_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “is_showing_chains”. </Doc></Method><Method compare="common" name="remove_is_showing_chains_listener()"><Doc type="Format">remove_is_showing_chains_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_is_showing_chains_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “is_showing_chains”. </Doc></Method><Property compare="common" name="is_visible"><Doc type="Description">return False if the track is hidden within a folded group track.</Doc></Property><Method compare="common" name="jump_in_running_session_clip()"><Doc type="Format">jump_in_running_session_clip( (Track)arg1, (float)arg2) → None</Doc><Doc type="Cpp-Signature">void jump_in_running_session_clip(TTrackPyHandle, double)</Doc><Doc type="Description">Jump forward or backward in the currently running Sessionclip (if any) by the specified relative amount in beats. Does nothing if no Session Clip is currently running. </Doc></Method><Property compare="common" name="mixer_device"><Doc type="Description">Return access to the special Device that every Track has: This Device containsthe Volume, Pan, Sendamounts, and Crossfade assignment parameters.</Doc></Property><Sub-Class compare="common" name="monitoring_states"><Value compare="common" name="AUTO" /><Value compare="common" name="IN" /><Value compare="common" name="OFF" /></Sub-Class><Property compare="common" name="mute"><Doc type="Description">Mute/unmute the track.</Doc></Property><Method compare="common" name="add_mute_listener()"><Doc type="Format">add_mute_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_mute_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “mute” has changed. </Doc></Method><Method compare="common" name="mute_has_listener()"><Doc type="Format">mute_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool mute_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “mute”. </Doc></Method><Method compare="common" name="remove_mute_listener()"><Doc type="Format">remove_mute_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_mute_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “mute”. </Doc></Method><Property compare="common" name="muted_via_solo"><Doc type="Description">Returns true if the track is muted because another track is soloed.</Doc></Property><Method compare="common" name="add_muted_via_solo_listener()"><Doc type="Format">add_muted_via_solo_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_muted_via_solo_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “muted_via_solo” has changed. </Doc></Method><Method compare="common" name="muted_via_solo_has_listener()"><Doc type="Format">muted_via_solo_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool muted_via_solo_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “muted_via_solo”. </Doc></Method><Method compare="common" name="remove_muted_via_solo_listener()"><Doc type="Format">remove_muted_via_solo_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_muted_via_solo_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “muted_via_solo”. </Doc></Method><Property compare="common" name="name"><Doc type="Description">Read/write access to the name of the Track, as visible in the track header.</Doc></Property><Method compare="common" name="add_name_listener()"><Doc type="Format">add_name_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_name_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “name” has changed. </Doc></Method><Method compare="common" name="name_has_listener()"><Doc type="Format">name_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool name_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “name”. </Doc></Method><Method compare="common" name="remove_name_listener()"><Doc type="Format">remove_name_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_name_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “name”. </Doc></Method><Property compare="common" name="output_meter_left"><Doc type="Description">Momentary value of left output channel meter, 0.0 to 1.0.For tracks with audio output only.</Doc></Property><Method compare="common" name="add_output_meter_left_listener()"><Doc type="Format">add_output_meter_left_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_output_meter_left_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “output_meter_left” has changed. </Doc></Method><Method compare="common" name="output_meter_left_has_listener()"><Doc type="Format">output_meter_left_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool output_meter_left_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “output_meter_left”. </Doc></Method><Method compare="common" name="remove_output_meter_left_listener()"><Doc type="Format">remove_output_meter_left_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_output_meter_left_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “output_meter_left”. </Doc></Method><Property compare="common" name="output_meter_level"><Doc type="Description">Return the MIDI or Audio meter value of the Track output (behind themixer_device), depending on the type of the Track input, this can be a MIDIor Audio meter. Meter values (MIDI or Audio) are always scaled from 0.0 to 1.0.</Doc></Property><Method compare="common" name="add_output_meter_level_listener()"><Doc type="Format">add_output_meter_level_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_output_meter_level_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “output_meter_level” has changed. </Doc></Method><Method compare="common" name="output_meter_level_has_listener()"><Doc type="Format">output_meter_level_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool output_meter_level_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “output_meter_level”. </Doc></Method><Method compare="common" name="remove_output_meter_level_listener()"><Doc type="Format">remove_output_meter_level_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_output_meter_level_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “output_meter_level”. </Doc></Method><Property compare="common" name="output_meter_right"><Doc type="Description">Momentary value of right output channel meter, 0.0 to 1.0.For tracks with audio output only.</Doc></Property><Method compare="common" name="add_output_meter_right_listener()"><Doc type="Format">add_output_meter_right_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_output_meter_right_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “output_meter_right” has changed. </Doc></Method><Method compare="common" name="output_meter_right_has_listener()"><Doc type="Format">output_meter_right_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool output_meter_right_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “output_meter_right”. </Doc></Method><Method compare="common" name="remove_output_meter_right_listener()"><Doc type="Format">remove_output_meter_right_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_output_meter_right_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “output_meter_right”. </Doc></Method><Property compare="common" name="output_routing_channel"><Doc type="Description">Get and set the current destination channel for output routing.Raises ValueError if the channel isn’t one of the current values inavailable_output_routing_channels.</Doc></Property><Method compare="common" name="add_output_routing_channel_listener()"><Doc type="Format">add_output_routing_channel_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_output_routing_channel_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “output_routing_channel” has changed. </Doc></Method><Method compare="common" name="output_routing_channel_has_listener()"><Doc type="Format">output_routing_channel_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool output_routing_channel_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “output_routing_channel”. </Doc></Method><Method compare="common" name="remove_output_routing_channel_listener()"><Doc type="Format">remove_output_routing_channel_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_output_routing_channel_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “output_routing_channel”. </Doc></Method><Property compare="common" name="output_routing_type"><Doc type="Description">Get and set the current destination type for output routing.Raises ValueError if the type isn’t one of the current values inavailable_output_routing_types.</Doc></Property><Method compare="common" name="add_output_routing_type_listener()"><Doc type="Format">add_output_routing_type_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_output_routing_type_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “output_routing_type” has changed. </Doc></Method><Method compare="common" name="output_routing_type_has_listener()"><Doc type="Format">output_routing_type_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool output_routing_type_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “output_routing_type”. </Doc></Method><Method compare="common" name="remove_output_routing_type_listener()"><Doc type="Format">remove_output_routing_type_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_output_routing_type_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “output_routing_type”. </Doc></Method><Property compare="common" name="output_routings"><Doc type="Description">Const access to the list of all available output routings.</Doc></Property><Method compare="common" name="add_output_routings_listener()"><Doc type="Format">add_output_routings_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_output_routings_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “output_routings” has changed. </Doc></Method><Method compare="common" name="output_routings_has_listener()"><Doc type="Format">output_routings_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool output_routings_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “output_routings”. </Doc></Method><Method compare="common" name="remove_output_routings_listener()"><Doc type="Format">remove_output_routings_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_output_routings_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “output_routings”. </Doc></Method><Property compare="common" name="output_sub_routings"><Doc type="Description">Return a list of all available output sub routings.</Doc></Property><Method compare="common" name="add_output_sub_routings_listener()"><Doc type="Format">add_output_sub_routings_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_output_sub_routings_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “output_sub_routings” has changed. </Doc></Method><Method compare="common" name="output_sub_routings_has_listener()"><Doc type="Format">output_sub_routings_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool output_sub_routings_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “output_sub_routings”. </Doc></Method><Method compare="common" name="remove_output_sub_routings_listener()"><Doc type="Format">remove_output_sub_routings_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_output_sub_routings_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “output_sub_routings”. </Doc></Method><Property compare="common" name="playing_slot_index"><Doc type="Description">const access to the index of the currently playing clip in the track.Will be -1 when no clip is playing.</Doc></Property><Method compare="common" name="add_playing_slot_index_listener()"><Doc type="Format">add_playing_slot_index_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_playing_slot_index_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “playing_slot_index” has changed. </Doc></Method><Method compare="common" name="playing_slot_index_has_listener()"><Doc type="Format">playing_slot_index_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool playing_slot_index_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “playing_slot_index”. </Doc></Method><Method compare="common" name="remove_playing_slot_index_listener()"><Doc type="Format">remove_playing_slot_index_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_playing_slot_index_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “playing_slot_index”. </Doc></Method><Method compare="common" name="set_data()"><Doc type="Format">set_data( (Track)arg1, (object)key, (object)value) → None</Doc><Doc type="Cpp-Signature">void set_data(TTrackPyHandle, TString, boost::python::api::object)</Doc><Doc type="Description">Store data for the given key in this object. The data is persistent and will be restored when loading the Live Set. </Doc></Method><Property compare="common" name="solo"><Doc type="Description">Get/Set the solo status of the track. Note that this will not disable thesolo state of any other track. If you want exclusive solo, you have to disable the solo state of the other Tracks manually.</Doc></Property><Method compare="common" name="add_solo_listener()"><Doc type="Format">add_solo_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void add_solo_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Add a listener function or method, which will be called as soon as the property “solo” has changed. </Doc></Method><Method compare="common" name="remove_solo_listener()"><Doc type="Format">remove_solo_listener( (Track)arg1, (object)arg2) → None</Doc><Doc type="Cpp-Signature">void remove_solo_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Remove a previously set listener function or method from property “solo”. </Doc></Method><Method compare="common" name="solo_has_listener()"><Doc type="Format">solo_has_listener( (Track)arg1, (object)arg2) → bool</Doc><Doc type="Cpp-Signature">bool solo_has_listener(TTrackPyHandle, boost::python::api::object)</Doc><Doc type="Description">Returns true, if the given listener function or method is connected to the property “solo”. </Doc></Method><Method compare="common" name="stop_all_clips()"><Doc type="Format">stop_all_clips( (Track)arg1 [, (bool)Quantized=True]) → None</Doc><Doc type="Cpp-Signature">void stop_all_clips(TTrackPyHandle [, bool=True])</Doc><Doc type="Description">Stop running and triggered clip and slots on this track. </Doc></Method><Property compare="common" name="view"><Doc type="Description">Representing the view aspects of a Track.</Doc></Property></Class></Module></Module></LiveAPI>